"""
@file    phem.py
@author  Daniel Krajzewicz
@date    2013-01-15
@version $Id:$

This module includes functions for converting SUMO's fcd-output into
data files read by PHEM.

SUMO, Simulation of Urban MObility; see http://sumo.sourceforge.net/
Copyright (C) 2013 DLR (http://www.dlr.de/) and contributors
All rights reserved
"""
import sumolib.output
import sumolib.net



class _Running:
  """
  A generator of running, numerical IDs
  Should be enhanced by:
  - a member method for returning the size
  - a member iterator over the stored ids
  """
  def __init__(self):
    """Contructor"""
    self._m = {}
    
  def g(self, id):
    """
    If the given id is known, the numerical representation is returned,
    otherwise a new running number is assigned to the id and returned"""
    if id not in self._m:
      self._m[id] = len(self._m)   
      return len(self._m)-1
    return self._m[id]




def _intTime(tStr):
  """
  Converts a time given as a string containing a float into an integer representation.
  """
  return int(float(tStr))


def _getOutputStream(name):
  if not name:
    return None
  return open(name, "w")

def _closeOutputStream(strm):
  if strm: strm.close()



        
def toDRI(fcd, outSTRM):
  """
  Reformats the contents of the given fcd-output file into a .dri file, readable
  by PHEM. The fcd-output "fcd" must be a valid file name of an fcd-output.

  The following may be a matter of changes:
  - the slope is not given, yet
  - the engine torque is not given, yet 
  """
  inpFCD = sumolib.output.parse(fcd, "timestep")
  #print >> outSTRM, "v1\n<t>,<v>,<grad>,<n>\n[s],[km/h],[%],[1/min]\n"
  print >> outSTRM, "v1\n<t>,<v>\n[s],[km/h]"
  for q in inpFCD:
    if q.vehicle:
      for v in q.vehicle:
        print >> outSTRM, "%s,%s" % (_intTime(q.time), float(v.speed)*3.6)



def toSTR(inpNET, outSTRM):
  """
  Writes the network object given as "inpNET" as a .str file readable by PHEM.
  Returns a map from the SUMO-road id to the generated numerical id used by PHEM.

  The following may be a matter of changes:
  - currently, only the positions of the start and the end nodes are written, 
    the geometry of the edge as defined in the SUMO-network is not exported.
    A map between the edge id and a segment to a numerical id would be necessary 
  """
  if outSTRM!=None:
    print >> outSTRM, "Str-Id,Sp,SegAnX,SegEnX,SegAnY,SegEnY"
  sIDm = _Running()
  for e in inpNET._edges:
    eid = sIDm.g(e._id)
    if outSTRM!=None:
      c1 = e._from._coord
      c2 = e._to._coord
      print >> outSTRM, "%s,%s,%s,%s,%s,%s" % (eid, len(e._lanes), c1[0], c2[0], c1[1], c2[1])
  return sIDm 



def toFZP(fcd, outSTRM, sIDm):
  """
  Reformats the contents of the given fcd-output file into a .fzp file, readable
  by PHEM. The fcd-output "fcd" must be a valid file name of an fcd-output.
  
  The "sIDm" parameter must be a map from SUMO-edge ids to their numerical 
  representation as generated by toSTR(inpNET, outSTRM).
  Returns two maps, the first from vehicle ids to a numerical representation,
  the second from vehicle type ids to a numerical representation.
  
  The following may be a matter of changes:
  - the slope is not given, yet
  - the street name is not correct, yet, we need to extend the fcd-output
  """
  inpFCD = sumolib.output.parse(fcd, "timestep")
  if outSTRM!=None:
    print >> outSTRM, "t,WeltX,WeltY,Veh. No,v,Gradient,veh.Typ-Id,Str-Id"
  vIDm = _Running()
  vtIDm = _Running()
  for q in inpFCD:
    if q.vehicle:
      for v in q.vehicle:
        vid = vIDm.g(v.id)
        vtid = vtIDm.g(v.type)
        if outSTRM!=None:  
          print >> outSTRM, "%s,%s,%s,%s,%s,%s,%s,%s" % (
                  _intTime(q.time), float(v.x), float(v.y), 
                  vid, float(v.speed)*3.6, 0, vtid, "0")
  return vIDm, vtIDm
  
  
  
def toFLT(inpWHAT, outSTRM, vtIDm):
  """
  Currently, rather a stub than an implementation. Writes the vehicle ids stored
  in the given "vtIDm" map formatted as a .flt file readable by PHEM.

  The following may be a matter of changes:
  - A default map is assigned to all vehicle types with the same probability 
  """
  for q in vtIDm._m:
    print >> outSTRM, "%s,%s,%s" % (vtIDm.g(q), "<VEHDIR>\PC\PC_EU0_G.GEN", float(1)/float(len(vtIDm._m)))

