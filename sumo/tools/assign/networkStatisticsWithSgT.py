"""
@file    networkStatistics.py
@author  Yun-Pang.Wang@dlr.de
@date    2007-02-27
@version $Id$

This script is to calculate the global performance indices according to the SUMO-based simulation results.
Besides, this script is also to execute the significance test for evaluating the results from different assignment methods.
The t test and the Kruskal-Wallis test are available in this script. 
If not specified, the Kruskal-Wallis test will be applied with the assumption that data are not normally distributed.

The analyzed parameters include:
- travel length
- travel time
- travel speed
- stop time

Copyright (C) 2008 DLR/TS, Germany
All rights reserved
"""

import os, string, sys, datetime, random, math

from xml.sax import saxutils, make_parser, handler
from optparse import OptionParser
from elements import Vertex, Edge, Vehicle, Assign, T_Value, H_Value
from network import Net, NetworkReader, DistrictsReader, VehInformationReader
from calStatistics import getBasicStats, doTTestForAvg, doKruskalWallisTest
from outputs import getStatisticsOutput, getSignificanceTestOutput


optParser = OptionParser()
optParser.add_option("-u", "--vehinform-file", dest="duavehfile",
                     help="read vehicle information generated by the DUA assignment from FILE (mandatory)", metavar="FILE")
optParser.add_option("-i", "--incremvehinform-file", dest="incremvehfile",
                     help="read vehicle information generated by the incremental assignment from FILE (mandatory)", metavar="FILE")
optParser.add_option("-c", "--clogitvehinform-file", dest="clogitvehfile",
                     help="read vehicle information generated by the clogit model from FILE (mandatory)", metavar="FILE")
optParser.add_option("-s", "--oneshotvehinform-file", dest="shotvehfile",
                     help="read vehicle information generated by the one-shot assignment from FILE (mandatory)", metavar="FILE")
optParser.add_option("-e", "--lohsevehinform-file", dest="lohsevehfile",
                     help="read vehicle information generated by the lohse assignment from FILE (mandatory)", metavar="FILE")
optParser.add_option("-o", "--output-file", dest="outputfile", default="Global_MOE.txt",
                     help="write output to FILE", metavar="FILE")
optParser.add_option("-g", "--SGToutput-file", dest="sgtoutputfile", default="significanceTest.txt",
                     help="write output to FILE", metavar="FILE")
optParser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                     default=False, help="tell me what you are doing")
                     
                                       
(options, args) = optParser.parse_args()

if not options.duavehfile or not options.incremvehfile or not options.clogitvehfile or not options.shotvehfile:
    optParser.print_help()
    sys.exit()
parser = make_parser()

net = Net()

for duafile in options.duavehfile.split(","):
    net._duavehicles[duafile] = []
    parser.setContentHandler(VehInformationReader(net._duavehicles[duafile]))
    parser.parse(duafile)

for oneshotfile in options.shotvehfile.split(","):
    net._oneshotvehicles[oneshotfile] = []
    parser.setContentHandler(VehInformationReader(net._oneshotvehicles[oneshotfile]))
    parser.parse(oneshotfile)

parser.setContentHandler(VehInformationReader(net._incremvehicles))
parser.parse(options.incremvehfile)

parser.setContentHandler(VehInformationReader(net._clogitvehicles))
parser.parse(options.clogitvehfile)

#parser.setContentHandler(VehInformationReader(net._lohsevehicles))
#parser.parse(options.incremvehfile)

# Vehicles from dua, incremental, clogit and oneshot are in included in the allvehlist.
allvehlist = []

# The results of the t test are stored in the tValueAvg.
tValueAvg = {}
# The resultes of the Kruskal-Wallis test are stored in the hValues.
hValues = []

# intitalization
normal = False
allgroups = 0
allmethodlabel = ''
combilabel = ''

# calculate/read the basic statistics
for method, vehicles in [("increm", net._incremvehicles), ("clogit", net._clogitvehicles)]:
    allvehlist, vlist = getBasicStats(net, options.verbose, method, vehicles, allvehlist)
    allmethodlabel = allmethodlabel + method + "_"
    allgroups += 1
    
for method, vehicles in net._oneshotvehicles.iteritems():
    allvehlist, oneshotvehlist = getBasicStats(net, options.verbose, method, vehicles, allvehlist)
    if method == "tripinfo_oneshot_1800.xml":
        allmethodlabel = allmethodlabel + method + "_"
        allgroups += 1

for method, vehicles in net._duavehicles.iteritems():
    allvehlist, duavehlist = getBasicStats(net, options.verbose, method, vehicles, allvehlist)
    if method == "tripinfo_dua_24.xml":
        allmethodlabel = allmethodlabel + method + "_"
        allgroups += 1
        
# begin the significance test for the observations with a normal distribution
for A in net._assignments.itervalues():
    tValueAvg[A] = {}

doTTestForAvg(options.verbose, tValueAvg, net._assignments)
        
if normal:
    tTable = getTTable(options.tfile)
    # begin the significance test for the observations with a normal distribution
    for A in net._assignments.itervalues():
        tValueAvg[A] = {}

    doTTestForAvg(options.verbose, tValueAvg, net._assignments)
    
else:
    # The Kruskal-Wallis test is applied for the data, not drawn from a normally distributed population.
    methodlist = [("increm", net._incremvehicles), ("clogit", net._clogitvehicles)]
    for num, A in enumerate(methodlist):
        groups = 2
        for B in methodlist[num+1: ]:
            combilabel = ''
            combilabel = A[0] + '_' + B[0]
            print 'Test for:', combilabel

            combivehlist = []
            for veh in A[1]:
                combivehlist.append(veh)
            for veh in B[1]:
                combivehlist.append(veh)
                
            doKruskalWallisTest(options.verbose, groups, combivehlist, net._assignments, combilabel, hValues)
             
        for methodB, vehiclesB in net._oneshotvehicles.iteritems():
            combilabel = ''
            combilabel = A[0] + "_" + methodB
            print 'Test for:', combilabel
            combivehlist = []
            for veh in A[1]:
                combivehlist.append(veh)
            for veh in vehiclesB:
                combivehlist.append(veh)
                
            doKruskalWallisTest(options.verbose, groups, combivehlist, net._assignments, combilabel, hValues)
                 
        for methodC, vehiclesC in net._duavehicles.iteritems():
            combilabel = ''
            combilabel = A[0] + "_" + methodC
            print 'Test for:', combilabel
            combivehlist = []
            for veh in A[1]:
                combivehlist.append(veh)
            for veh in vehiclesC:
                combivehlist.append(veh)
                
            doKruskalWallisTest(options.verbose, groups, combivehlist, net._assignments, combilabel, hValues)
        
    doKruskalWallisTest(options.verbose, allgroups, allvehlist, net._assignments, allmethodlabel, hValues)
    print 'Test for:', allmethodlabel
    doKruskalWallisTest(options.verbose, len(net._oneshotvehicles), oneshotvehlist, net._assignments, "alloneshots", hValues)
    print 'Test for: alloneshots'
    doKruskalWallisTest(options.verbose, len(net._duavehicles), duavehlist, net._assignments, "duas", hValues)
    print 'Test for: duas'
    
getStatisticsOutput(net, options.outputfile)
print 'The calculation of network statistics is done!'

getSignificanceTestOutput(net, normal, tValueAvg, hValues)
print 'The Significance test is done!'
