<configuration>

    <input>
        <!-- Read SUMO-net from FILE -->
        <sumo-net value=""/>

        <!-- Read XML-node defs from FILE -->
        <xml-node-files value=""/>

        <!-- Read XML-edge defs from FILE -->
        <xml-edge-files value=""/>

        <!-- Read XML-connection defs from FILE -->
        <xml-connection-files value=""/>

        <!-- Read XML-type defs from FILE -->
        <xml-type-files value=""/>

        <!-- Read shapefiles (ArcView, Tiger, ...) from files starting with 'FILE' -->
        <shapefile value=""/>

        <!-- Read converted Navteq GDF data (unsplitted Elmar-network) from path 'FILE' -->
        <dlr-navteq value=""/>

        <!-- Read OSM-network from path 'FILE(s)' -->
        <osm-files value=""/>

        <!-- Read openDrive-network from FILE -->
        <opendrive value=""/>

        <!-- Read VISUM-net from FILE -->
        <visum-file value=""/>

        <!-- Read VISSIM-net from FILE -->
        <vissim-file value=""/>

        <!-- Read RoboCup-net from DIR -->
        <robocup-net value=""/>

    </input>

    <output>
        <!-- The generated net will be written to FILE -->
        <output-file value="net.net.xml"/>

        <!-- Prefix of files to write nodes and edges to -->
        <plain-output value=""/>

        <!-- Writes node corner positions to FILE -->
        <node-geometry-dump value=""/>

        <!-- Writes joined edges information to FILE -->
        <map-output value=""/>

        <!-- Writes pois of node types to FILE -->
        <node-type-output value=""/>

    </output>

    <projection>
        <!-- Uses a simple method for projection -->
        <proj.simple value="false"/>

        <!-- Number of places to shift decimal point to right in geo-coordinates -->
        <proj.shift value="0"/>

        <!-- Determine the UTM zone (for a universal transversal mercator projection based on the WGS84 ellipsoid) -->
        <proj.utm value="false"/>

        <!-- Determine the DHDN zone (for a transversal mercator projection based on the bessel ellipsoid) -->
        <proj.dhdn value="false"/>

        <!-- Uses STR as proj.4 definition for projection -->
        <proj value="!"/>

        <!-- Inverses projection -->
        <proj.inverse value="false"/>

    </projection>

    <tls_building>
        <!-- Interprets STR as list of junctions to be controlled by TLS -->
        <explicite-tls value=""/>

        <!-- Interprets STR as list of junctions to be not controlled by TLS -->
        <explicite-no-tls value=""/>

        <!-- Turns on TLS guessing -->
        <guess-tls value="false"/>

        <!-- Sets district nodes as tls-controlled -->
        <tls-guess.district-nodes value="false"/>

        <!-- Includes node clusters into guess -->
        <tls-guess.joining value="false"/>

        <!-- Tries to cluster tls-controlled nodes -->
        <try-join-tls value="false"/>

        <!-- Defines smallest vehicle deceleration -->
        <min-decel value="3"/>

        <!-- Given yellow times are patched even if being too short -->
        <patch-small-tyellow value="false"/>

        <!-- Use INT as green phase duration -->
        <traffic-light-green value=""/>

        <!-- Set INT as fixed time for yellow phase durations -->
        <traffic-light-yellow value=""/>

        <!-- TLSs in STR will be shifted by half-phase -->
        <tl-logics.half-offset value=""/>

        <!-- TLSs in STR will be shifted by quarter-phase -->
        <tl-logics.quarter-offset value=""/>

    </tls_building>

    <ramp_guessing>
        <!-- Enable ramp-guessing -->
        <guess-ramps value="false"/>

        <!-- Treat edges with speed > FLOAT as no ramps -->
        <ramp-guess.max-ramp-speed value="-1"/>

        <!-- Treat edges with speed < FLOAT as no highways -->
        <ramp-guess.min-highway-speed value="21.9444"/>

        <!-- Use FLOAT as ramp-length -->
        <ramp-guess.ramp-length value="100"/>

        <!-- Tries to handle the given edges as ramps -->
        <ramp-guess.explicite value=""/>

        <!--  -->
        <guess-obscure-ramps value="false"/>

        <!--  -->
        <obscure-ramps.add-ramp value="false"/>

        <!--  -->
        <obscure-ramps.min-highway-speed value="27.7778"/>

    </ramp_guessing>

    <edge_removal>
        <!-- Remove edges with speed < FLOAT -->
        <edges-min-speed value=""/>

        <!-- Remove edges in STR -->
        <remove-edges value=""/>

        <!-- Remove edges not in STR -->
        <keep-edges value=""/>

        <!-- Removed edges not in FILE -->
        <keep-edges.input-file value=""/>

        <!-- Remove edges after joining -->
        <keep-edges.postload value="false"/>

        <!-- Keeps edges which are located within the given boundary -->
        <keep-edges.in-boundary value=""/>

        <!-- Remove edges where vclass def is not in STR -->
        <remove-edges.by-vclass value=""/>

    </edge_removal>

    <unregulated_nodes>
        <!-- All nodes will be not regulated -->
        <keep-unregulated value="false"/>

        <!-- Do not regulate nodes in STR -->
        <keep-unregulated.nodes value=""/>

        <!-- Do not regulate district nodes -->
        <keep-unregulated.district-nodes value="false"/>

    </unregulated_nodes>

    <processing>
        <!-- Continue on broken input -->
        <dismiss-loading-errors value="false"/>

        <!-- The factor for flow to no. lanes conv -->
        <capacity-norm value="1800"/>

        <!-- vmax is parsed as given in km/h (some) -->
        <speed-in-kmh value="false"/>

        <!-- No node positions are added to the edge shape -->
        <xml.keep-shape value="false"/>

        <!-- Read edge ids from column STR -->
        <shapefile.street-id value=""/>

        <!-- Read from-node ids from column STR -->
        <shapefile.from-id value=""/>

        <!-- Read to-node ids from column STR -->
        <shapefile.to-id value=""/>

        <!-- Read type ids from column STR -->
        <shapefile.type-id value=""/>

        <!-- Uses edge type defaults on problems -->
        <shapefile.use-defaults-on-failure value="false"/>

        <!-- Insert edges in both directions -->
        <shapefile.all-bidi value="false"/>

        <!-- Use INT as UTM zone -->
        <shapefile.utm value="32"/>

        <!-- Guess the proper projection -->
        <shapefile.guess-projection value="false"/>

        <!-- Structure join offset -->
        <vissim.offset value="5"/>

        <!-- Use FLOAT as default speed -->
        <vissim.default-speed value="50"/>

        <!-- Factor for edge velocity -->
        <vissim.speed-norm value="1"/>

        <!-- Writes lanes without an explicite speed set. -->
        <vissim.report-unset-speeds value="false"/>

        <!-- Uses priorities from types -->
        <visum.use-type-priority value="false"/>

        <!-- Uses lane numbers from types -->
        <visum.use-type-laneno value="false"/>

        <!-- Uses speeds from types -->
        <visum.use-type-speed value="false"/>

        <!-- Sets connector speed -->
        <visum.connector-speeds value="100"/>

        <!-- Sets connector lane number -->
        <visum.connector-laneno value="3"/>

        <!-- Excludes connectors -->
        <visum.no-connectors value="false"/>

        <!-- Excludes connectors -->
        <visum.recompute-laneno value="false"/>

        <!-- Flips the y-coordinate along zero -->
        <flip-y value="false"/>

        <!--  -->
        <dismiss-vclasses value="false"/>

        <!-- Removes geometry information from edges -->
        <remove-geometry value="false"/>

        <!-- Removes isolated edges -->
        <remove-isolated value="false"/>

        <!-- Disables building turnarounds -->
        <no-turnarounds value="false"/>

        <!-- Disables building turnarounds at tls-controlled junctions -->
        <no-tls-turnarounds value="false"/>

        <!-- Omits internal links -->
        <no-internal-links value="false"/>

        <!-- Splits edges across geometry nodes -->
        <split-geometry value="false"/>

        <!-- Turn off normalizing node positions -->
        <disable-normalize-node-positions value="false"/>

        <!-- Adds FLOAT to net x-positions -->
        <x-offset-to-apply value="0"/>

        <!-- Adds FLOAT to net y-positions -->
        <y-offset-to-apply value="0"/>

        <!-- Enable roundabout-guessing -->
        <guess-roundabouts value="false"/>

        <!-- Assumes left-hand traffic on the network -->
        <lefthand value="false"/>

    </processing>

    <building_defaults>
        <!-- The default name for an edges type -->
        <type value="Unknown"/>

        <!-- The default number of lanes in an edge -->
        <lanenumber value="1"/>

        <!-- The default speed on an edge (in m/s) -->
        <speed value="13.9"/>

        <!-- The default priority of an edge -->
        <priority value="-1"/>

    </building_defaults>

    <report>
        <!-- Switches to verbose output -->
        <verbose value="false"/>

        <!-- Prints option values before processing -->
        <print-options value="false"/>

        <!-- Prints this screen -->
        <help value="false"/>

        <!-- Disables output of warnings -->
        <suppress-warnings value="false"/>

        <!-- Writes all messages to FILE -->
        <log-file value=""/>

    </report>

    <random_number>
        <!-- Initialises the random number generator with the given value -->
        <srand value="23423"/>

        <!-- Initialises the random number generator with the current system time -->
        <abs-rand value="false"/>

    </random_number>

</configuration>
