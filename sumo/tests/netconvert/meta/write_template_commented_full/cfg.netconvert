<?xml version="1.0" encoding="iso-8859-1"?>

<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://sumo.sf.net/xsd/netconvertConfiguration.xsd">

    <input>
        <!-- Read SUMO-net from FILE -->
        <sumo-net-file value="" synonymes="s sumo-net"/>

        <!-- Read XML-node defs from FILE -->
        <node-files value="" synonymes="n nodes xml-node-files xml-nodes"/>

        <!-- Read XML-edge defs from FILE -->
        <edge-files value="" synonymes="e edges xml-edge-files xml-edges"/>

        <!-- Read XML-connection defs from FILE -->
        <connection-files value="" synonymes="connections x xml-connection-files xml-connections"/>

        <!-- Read XML-type defs from FILE -->
        <type-files value="" synonymes="t types xml-type-files xml-types"/>

        <!-- Read shapefiles (ArcView, Tiger, ...) from files starting with 'FILE' -->
        <shapefile-prefix value="" synonymes="arcview shapefile tiger"/>

        <!-- Read converted Navteq GDF data (unsplitted Elmar-network) from path 'FILE' -->
        <dlr-navteq-prefix value="" synonymes="dlr-navteq elmar2"/>

        <!-- Read OSM-network from path 'FILE(s)' -->
        <osm-files value="" synonymes="osm"/>

        <!-- Read openDrive-network from FILE -->
        <opendrive-files value="" synonymes="opendrive"/>

        <!-- Read VISUM-net from FILE -->
        <visum-file value="" synonymes="visum"/>

        <!-- Read VISSIM-net from FILE -->
        <vissim-file value="" synonymes="vissim"/>

        <!-- Read RoboCup-net from DIR -->
        <robocup-dir value="" synonymes="robocup robocup-net"/>

        <!-- Read MATSim-net from FILE -->
        <matsim-files value="" synonymes="matsim"/>

    </input>

    <output>
        <!-- The generated net will be written to FILE -->
        <output value="" synonymes="o output-file sumo-output"/>

        <!-- Prefix of files to write plain xml nodes, edges and connections to -->
        <plain-output-prefix value="" synonymes="plain-output"/>

        <!-- Writes joined edges information to FILE -->
        <map-output value="" synonymes="M"/>

        <!-- The generated net will be written to FILE using MATSIM format. -->
        <matsim-output value=""/>

    </output>

    <projection>
        <!-- Uses a simple method for projection -->
        <proj.simple value="false"/>

        <!-- Number of places to shift decimal point to right in geo-coordinates -->
        <proj.shift value="0"/>

        <!-- Determine the UTM zone (for a universal transversal mercator projection based on the WGS84 ellipsoid) -->
        <proj.utm value="false"/>

        <!-- Determine the DHDN zone (for a transversal mercator projection based on the bessel ellipsoid) -->
        <proj.dhdn value="false"/>

        <!-- Uses STR as proj.4 definition for projection -->
        <proj value="!"/>

        <!-- Inverses projection -->
        <proj.inverse value="false"/>

    </projection>

    <tls_building>
        <!-- Interprets STR as list of junctions to be controlled by TLS -->
        <tls.set value="" synonymes="explicite-tls"/>

        <!-- Interprets STR as list of junctions to be not controlled by TLS -->
        <tls.unset value="" synonymes="explicite-no-tls"/>

        <!-- Turns on TLS guessing -->
        <tls.guess value="false" synonymes="guess-tls"/>

        <!-- Sets district nodes as tls-controlled -->
        <tls.taz-nodes value="false" synonymes="tls-guess.district-nodes"/>

        <!-- Includes node clusters into guess -->
        <tls-guess.joining value="false"/>

        <!-- Tries to cluster tls-controlled nodes -->
        <tls.join value="false" synonymes="try-join-tls"/>

        <!-- Use INT as green phase duration -->
        <tls.green.time value="31" synonymes="traffic-light-green"/>

        <!-- Defines smallest vehicle deceleration -->
        <tls.yellow.min-decel value="3" synonymes="D min-decel"/>

        <!-- Given yellow times are patched even if being too short -->
        <tls.yellow.patch-small value="false" synonymes="patch-small-tyellow"/>

        <!-- Set INT as fixed time for yellow phase durations -->
        <tls.yellow.time value="" synonymes="traffic-light-yellow"/>

        <!-- TLSs in STR will be shifted by half-phase -->
        <tls.half-offset value="" synonymes="tl-logics.half-offset"/>

        <!-- TLSs in STR will be shifted by quarter-phase -->
        <tls.quarter-offset value="" synonymes="tl-logics.quarter-offset"/>

    </tls_building>

    <ramp_guessing>
        <!-- Enable ramp-guessing -->
        <ramps.guess value="false" synonymes="guess-ramps"/>

        <!-- Treat edges with speed > FLOAT as no ramps -->
        <ramps.max-ramp-speed value="-1" synonymes="ramp-guess.max-ramp-speed"/>

        <!-- Treat edges with speed < FLOAT as no highways -->
        <ramps.min-highway-speed value="21.9444" synonymes="ramp-guess.min-highway-speed"/>

        <!-- Use FLOAT as ramp-length -->
        <ramps.ramp-length value="100" synonymes="ramp-guess.ramp-length"/>

        <!-- Tries to handle the given edges as ramps -->
        <ramps.set value="" synonymes="ramp-guess.explicite"/>

    </ramp_guessing>

    <edge_removal>
        <!-- Remove edges with speed < FLOAT -->
        <edges-min-speed value=""/>

        <!-- Remove edges in STR -->
        <remove-edges value=""/>

        <!-- Remove edges not in STR -->
        <keep-edges value=""/>

        <!-- Removed edges not in FILE -->
        <keep-edges.input-file value=""/>

        <!-- Remove edges after joining -->
        <keep-edges.postload value="false"/>

        <!-- Keeps edges which are located within the given boundary -->
        <keep-edges.in-boundary value=""/>

        <!-- Keep edges that allow any of the vclasss in STR -->
        <keep-edges.by-vclass value=""/>

        <!-- Remove edges where vclass def is not in STR -->
        <remove-edges.by-vclass value=""/>

    </edge_removal>

    <unregulated_nodes>
        <!-- All nodes will be not regulated -->
        <keep-unregulated value="false"/>

        <!-- Do not regulate nodes in STR -->
        <keep-unregulated.nodes value=""/>

        <!-- Do not regulate district nodes -->
        <keep-unregulated.district-nodes value="false"/>

    </unregulated_nodes>

    <processing>
        <!-- Continue on broken input -->
        <ignore-errors value="false" synonymes="dismiss-loading-errors"/>

        <!-- The factor for flow to no. lanes conversion. -->
        <lanes-from-capacity.norm value="1800" synonymes="capacity-norm"/>

        <!-- vmax is parsed as given in km/h (some) -->
        <speed-in-kmh value="false"/>

        <!-- No node positions are added to the edge shape -->
        <xml.keep-shape value="false"/>

        <!-- The edge lengths given in the MATSIM-file will be kept. -->
        <matsim.keep-length value="false"/>

        <!-- The lane number will be computed from the capacity. -->
        <matsim.lanes-from-capacity value="false"/>

        <!-- Read edge ids from column STR -->
        <shapefile.street-id value="" synonymes="arcview.street-id"/>

        <!-- Read from-node ids from column STR -->
        <shapefile.from-id value="" synonymes="arcview.from-id"/>

        <!-- Read to-node ids from column STR -->
        <shapefile.to-id value="" synonymes="arcview.to-id"/>

        <!-- Read type ids from column STR -->
        <shapefile.type-id value="" synonymes="arcview.type-id"/>

        <!-- Uses edge type defaults on problems -->
        <shapefile.use-defaults-on-failure value="false" synonymes="arcview.use-defaults-on-failure"/>

        <!-- Insert edges in both directions -->
        <shapefile.all-bidirectional value="false" synonymes="arcview.all-bidi shapefile.all-bidi"/>

        <!-- Guess the proper projection -->
        <shapefile.guess-projection value="false" synonymes="arcview.guess-projection"/>

        <!-- Structure join offset -->
        <vissim.join-distance value="5" synonymes="vissim.offset"/>

        <!-- Use FLOAT as default speed -->
        <vissim.default-speed value="50"/>

        <!-- Factor for edge velocity -->
        <vissim.speed-norm value="1"/>

        <!-- Writes lanes without an explicite speed set. -->
        <vissim.report-unset-speeds value="false"/>

        <!-- Uses priorities from types -->
        <visum.use-type-priority value="false"/>

        <!-- Uses lane numbers from types -->
        <visum.use-type-laneno value="false"/>

        <!-- Uses speeds from types -->
        <visum.use-type-speed value="false"/>

        <!-- Sets connector speed -->
        <visum.connector-speeds value="100"/>

        <!-- Sets connector lane number -->
        <visum.connectors-lane-number value="3" synonymes="visum.connector-laneno"/>

        <!-- Excludes connectors -->
        <visum.no-connectors value="false"/>

        <!-- Computes the number of lanes from the edges' capacities -->
        <visum.recompute-lane-number value="false" synonymes="visum.recompute-laneno"/>

        <!-- Prints all warnings, some of which are due to VISUM misbehaviour -->
        <visum.verbose-warnings value="false"/>

        <!-- Skips the check for duplicate nodes and edges. -->
        <osm.skip-duplicates-check value="false"/>

        <!-- Removes vehicle class restrictions from imported edges. -->
        <dismiss-vclasses value="false"/>

        <!-- Removes geometry information from edges -->
        <remove-geometry value="false" synonymes="R"/>

        <!-- Removes isolated edges -->
        <remove-isolated value="false"/>

        <!-- Disables building turnarounds -->
        <no-turnarounds value="false"/>

        <!-- Disables building turnarounds at tls-controlled junctions -->
        <no-tls-turnarounds value="false"/>

        <!-- Omits internal links -->
        <no-internal-links value="false"/>

        <!-- Splits edges across geometry nodes -->
        <split-geometry value="false"/>

        <!-- Turn off normalizing node positions -->
        <offset.disable-normalization value="false" synonymes="disable-normalize-node-positions"/>

        <!-- Adds FLOAT to net x-positions -->
        <offset.x value="0" synonymes="x-offset-to-apply"/>

        <!-- Adds FLOAT to net y-positions -->
        <offset.y value="0" synonymes="y-offset-to-apply"/>

        <!-- Flips the y-coordinate along zero -->
        <flip-y-axis value="false" synonymes="flip-y"/>

        <!-- Enable roundabout-guessing -->
        <roundabouts.guess value="false" synonymes="guess-roundabouts"/>

        <!-- Assumes left-hand traffic on the network -->
        <lefthand value="false"/>

    </processing>

    <building_defaults>
        <!-- The default number of lanes in an edge -->
        <default.lanenumber value="1" synonymes="L lanenumber"/>

        <!-- The default speed on an edge (in m/s) -->
        <default.speed value="13.9" synonymes="S speed"/>

        <!-- The default priority of an edge -->
        <default.priority value="-1" synonymes="P priority"/>

    </building_defaults>

    <report>
        <!-- Switches to verbose output -->
        <verbose value="false" synonymes="v"/>

        <!-- Prints option values before processing -->
        <print-options value="false" synonymes="p"/>

        <!-- Prints this screen -->
        <help value="false" synonymes="?"/>

        <!-- Prints the current version -->
        <version value="false" synonymes="V"/>

        <!-- Disables output of warnings -->
        <no-warnings value="false" synonymes="W suppress-warnings"/>

        <!-- Writes all messages to FILE -->
        <log-file value="" synonymes="l"/>

        <!-- Writes all non-error messages to FILE -->
        <message-log value=""/>

        <!-- Writes all warnings and errors to FILE -->
        <error-log value=""/>

    </report>

    <random_number>
        <!-- Initialises the random number generator with the current system time -->
        <random value="false" synonymes="abs-rand"/>

        <!-- Initialises the random number generator with the given value -->
        <seed value="23423" synonymes="srand"/>

    </random_number>

</configuration>
