#ifndef MS_E2_ZS_CollectorOverLanes_h
#define MS_E2_ZS_CollectorOverLanes_h

#include "MS_E2_ZS_Collector.h"



class
MS_E2_ZS_CollectorOverLanes
{
public:
    typedef std::vector< MS_E2_ZS_Collector* > CollectorCont;
    typedef std::map<std::string, std::vector<std::string> > LaneContinuations;

    MS_E2_ZS_CollectorOverLanes( std::string id,
                        MSLane* lane,
                        MSUnit::Meters startPos,
/*                        MSUnit::Meters detLength,
                        const LaneContinuations &laneContinuations,*/
                        MSUnit::Seconds haltingTimeThreshold = 1,
                        MSUnit::MetersPerSecond haltingSpeedThreshold =5.0/3.6,
                        MSUnit::Meters jamDistThreshold = 10,
                        MSUnit::Seconds deleteDataAfterSeconds = 1800 );

    void init(MSLane *lane, MSUnit::Meters detLength,
        const LaneContinuations &laneContinuations);

    virtual ~MS_E2_ZS_CollectorOverLanes( void );

    double getCurrent( E2::DetType type );

    double getAggregate( E2::DetType type, MSUnit::Seconds lastNSeconds );

    bool hasDetector( E2::DetType type );

    void addDetector( E2::DetType type, std::string detId = "" );

    const std::string &getId() const;

    const std::string &getStartLaneID() const;

    void resetQueueLengthAheadOfTrafficLights( void );


    /**
     * @name Inherited MSDetectorFileOutput methods.
     *
     */
    //@{
    /**
     * Returns a string indentifying an object of this class. Used for
     * distinct filenames.
     */
    std::string  getNamePrefix( void ) const
        {
            return std::string("MS_E2_ZS_CollectorOverLanes");
        }

    /**
     * Get a header for file output which shall contain some
     * explanation of the output generated by getXMLOutput.
     */
    std::string& getXMLHeader( void ) const
        {
            return xmlHeaderM;
        }

    /**
     * Get the XML-formatted output of the concrete detector.
     *
     * @param lastNTimesteps Generate data out of the interval
     * (now-lastNTimesteps, now].
     */
    std::string getXMLOutput( MSUnit::IntSteps lastNTimesteps );

    /**
     * Get an opening XML-element containing information about the detector.
     */
    std::string  getXMLDetectorInfoStart( void ) const;

    /**
     * Get the data-clean up interval in timesteps.
     */
    MSUnit::IntSteps getDataCleanUpSteps( void ) const
        {
            return MSUnit::getInstance()->getIntegerSteps(
                deleteDataAfterSecondsM );
        }
    //@}

    MSUnit::Meters getLength() const {
        return myLength;
    }

protected:
    void extendTo(double length, const LaneContinuations &laneContinuations);
    std::string  makeID( const std::string &baseID,
        size_t c, size_t r ) const;
    virtual MS_E2_ZS_Collector *buildCollector(size_t c, size_t r,
        MSLane *l, double start, double end);


protected:
    MSUnit::Meters startPosM;
    MSUnit::Meters myLength;

    MSUnit::Seconds deleteDataAfterSecondsM;
    MSUnit::Steps haltingTimeThresholdM;
    MSUnit::CellsPerStep haltingSpeedThresholdM;
    MSUnit::Cells jamDistThresholdM;

    typedef std::vector<MSLane*> LaneVector;
    typedef std::vector<LaneVector> LaneVectorVector;
    typedef std::vector<MS_E2_ZS_Collector*> DetectorVector;
    typedef std::vector<DetectorVector> DetectorVectorVector;
    typedef std::vector<double> DoubleVector;
    typedef DoubleVector LengthVector;

    LaneVectorVector myLaneCombinations;
    DetectorVectorVector myDetectorCombinations;
    LengthVector myLengths;
//    DoubleVector myTmpArray;

    static std::string xmlHeaderM;

    std::string myID;
    std::string myStartLaneID;
    typedef std::map<MSLane*, MS_E2_ZS_Collector*> LaneDetMap;

    LaneDetMap myAlreadyBuild;

};



#endif // MS_E2_ZS_CollectorOverLanes

// Local Variables:
// mode:C++
// End:
