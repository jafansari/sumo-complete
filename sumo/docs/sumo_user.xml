<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<book>
  <bookinfo>
    <title>SUMO - Simulation of Urban MObility - user documentation</title>

    <author>
      <firstname>Daniel</firstname>

      <surname>Krajzewicz</surname>

      <affiliation>
        <address><email>Daniel.Krajzewicz@dlr.de</email></address>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>
  </bookinfo>

  <toc></toc>

  <chapter>
    <title>Introduction</title>

    <sect1>
      <title>What is SUMO?</title>

      <para>SUMO is a traffic simulation tool. It was primarily designed for
      urban street networks, but it may also be used for highway traffic
      simulations. In the near future it will be extended to model transit
      modes simultaneously with ordinary car traffic.</para>
    </sect1>

    <sect1>
      <title>Why open source?</title>

      <para>Two thoughts stood behind the release of the package as open
      source. At first the fact that every traffic research organisation has
      to implement an own simulation package for its own. Some people are
      interested in traffic light optimisation, other try to find mistakes
      made during the design of a road network. Both do need some kind of a
      simulation package and have to implement a framework containing input
      and output functions and other things from scratch. So the first idea
      was to give them a basic framework - containing all needed methods for a
      simulation - they can put own ideas into.</para>

      <para>The second idea is to supply a common test bed for models,
      especially car models, to the community to make them comparable. Due to
      different architectures of traffic simulations such comparisons on a
      wide scale are not possible by now.</para>
    </sect1>

    <sect1>
      <title>Features</title>

      <para><itemizedlist><listitem><para>High portability (using standard -
      c++)</para></listitem><listitem><para>Collision free vehicle movement</para></listitem><listitem><para>Different
      vehicle types</para></listitem><listitem><para>Single-vehicle routing</para></listitem><listitem><para>Multi-lane
      streets with lane changing</para></listitem><listitem><para>Junction-based
      right-of-way rules</para></listitem><listitem><para>Hierarchy of
      junction types</para></listitem><listitem><para>A fast openGL GUI</para></listitem><listitem><para>Dynamic
      routing</para></listitem><listitem><para>Manages networks with several
      10.000 edges (streets)</para></listitem><listitem><para>Fast execution
      speed (up to 1.000.000 vehicle updates/s on a 1GHz machine)</para></listitem><listitem><para>Supports
      import of many network formats (Visum, Vissim, ArcView,
      XML-Descriptions)</para></listitem></itemizedlist></para>
    </sect1>

    <sect1>
      <title>About this document</title>

      <para>This document is still under development and is meant to grow with
      the software. Due to this, you may find it together with the sources
      within out repository at sourceforge (<ulink
      url="http://sumo.sourceforge.net/projects/sumo">http://sumo.sourceforge.net/projects/sumo</ulink>).
      In this version, it describes the SUMO-release 0.8. The information
      about the document state can be found at the end of the document.</para>

      <para>We should remark, that this document only covers the usage of the
      software and some description of the models used. Information on the
      programming side - if you want to extend the software what is really
      appreciated by us - may be found in the programmer manual.</para>

      <para>We should also remark, that the previous division of documents
      where each document described a single application is now abandoned. We
      hope to make the process of simulation more easy to understand.</para>

      <sect2>
        <title>To do</title>

        <para>- Describe ArcView-Import</para>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Call for Help</title>

      <para>Please let us know when either the document remains any point
      unclear or the simulation does not behave as expected. Every help is
      appreciated. Thank you.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>First Steps: Running the examples</title>

    <sect1>
      <title>Install</title>

      <para>From version 0.8 on, we want not only supply the sources, but also
      the compiled binaries at least for MS Windows and a Linux-derivate.</para>

      <para>At first, You have to decide whether you primary want to use the
      software only or also extend it. In the first case, you should download
      the binaries, appropriate to your operating system. All needed libraries
      will be included and - if necessary - a script should guide you through
      the installation process.</para>

      <para>In the latter case, please download the source distribution and
      compile it for your own. We hope to be able to support two
      distributions, one with all needed libraries included and a second
      without. The description of the building process is found within a
      separate document located <ulink url="sumo_build.html">here</ulink>.</para>

      <para>If you have built the package on a system not included within our
      binary distribution, please let us know and send it to us, so that we
      can include it into the pages.</para>
    </sect1>

    <sect1>
      <title>First Steps</title>

      <para>As SUMO was at first meant to be a command line tool, what means
      that no window pops up if you start it, you have to open a shell window
      first.</para>

      <para>Change into the folder you have extracted the package into, build
      the project if necessary (not needed if you have downloaded the
      binaries) and go further to the &#34;tests&#34;-folder. You will find
      two folders in here &#34;dos&#34; and &#34;unix&#34;. Choose the
      appropriate one (&#34;dos&#34; if your operating system is MSDOS or MS
      Windows, &#34;unix&#34; if it is Linux or UNIX). You will find a set of
      scripts in here that allow you a fast generation and removal of the test
      scenarios. Start &#34;buildExamples&#34; and wait until all networks
      have been built and all route descriptions are computed.</para>

      <para>After everything is build, go back to the packages folder (two
      folders up) and from there to the folder named &#34;bin&#34;. Here you
      will find the executable files, among them a file named
      &#34;gui(.exe)&#34;. Start it. After some seconds, a window will pop up.
      Use &#34;Open...&#34; as usual to open an example scenario. You can find
      the scenarios you have build by running the script in
      &#34;../data/examples/&#34;. As we are not allowed to give networks
      build from digital maps at all, only simple examples are supported.
      After the network is loaded, the main area of the window shall display
      it. Now you can start the simulation by pressing one of the control
      buttons known from other simulations or from any tape media device.</para>
    </sect1>

    <sect1>
      <title>What has happened?</title>

      <para>As briefly mentioned before, you have built some example networks
      and vehicle movements by starting the &#34;makeExamples&#34;-script. To
      allow a better handling of networks during the simulation and save
      computation time, the networks are stored in quite a complicated format,
      which has to be built from more simple representations first. The
      simulation of traffic is also quite complicated as each vehicle is an
      individual within. This requires not only a network that shall be
      simulated, but also a description of the routes the vehicles make. They
      were built, too.</para>

      <para>After both operations - which were performed for all known
      examples within the distribution - both networks and route descriptions
      are ready to be executed.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Basic Paradigms</title>

    <sect1>
      <title>Some Traffic Simulation Theory</title>

      <sect2>
        <title>Simulation types</title>

        <para>SUMO is a microscopic, space continuous and time discrete
        traffic simulation.</para>

        <para>In traffic research three or four classes of models are
        distinguished according to the level of detail of the simulation. In
        macroscopic models traffic flow is the basic entity. Microscopic
        models simulate the movement of every single vehicle on the street,
        mostly assuming that the behaviour of the vehicle depends on both, the
        vehicle&#39;s physical abilities to move and the driver&#39;s
        controlling behaviour (Krauss 1998; Janz 1998). Submicroscopic models
        regard single vehicles like microscopic but extend them by modelling
        their substructures, which describe the engine&#39;s rotation speed in
        relation to the vehicle&#39;s speed or the driver&#39;s preferred gear
        switching actions, for instance. This allows more detailed
        computations of the emissions produced by the vehicle compared to a
        simple microscopic simulation (Diekamp 1995; Schreckenberg and Wolf
        1998; Helbig et al. 2001). However, submicroscopic models require
        large computation times. This restrains the size of the networks to be
        simulated.</para>

        <figure>
          <title>The different simulation granularities; from left to right:
          macroscopic, microscopic, submicroscopic (within the circle:
          mesoscopic)</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./gfx/3sims.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Within a space-continuous simulation each vehicle has a certain
        position described by a floating-point number. In contrast,
        space-discrete simulations are a special kind of cellular automata.
        They use cells and vehicles driving on the simulated streets
        &#34;jump&#34; from one cell to another (Brockfeld et al 2001).</para>

        <figure>
          <title>The difference between a space-continuous (top) and a
          space-discrete (bottom) simulation</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./gfx/contdisc.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>And there is another difference between the available simulation
        packages. Almost every simulation packages uses an own model for
        vehicle movement. Almost all models are so-called
        &#34;car-following-models&#34;: the behaviour of the driver is herein
        meant to be dependent on his distance to the vehicle in front of him
        and of this vehicle&#39;s speed. Although SUMO is meant to be a test
        bed for such vehicle models, only one is implemented by now, which was
        developed by Stefan Kraus. Other obstacles such as traffic lights are
        of course considered herein, too. Please take a look into &#34;Used
        models&#34; for a more detailed description of the Krauß-model.</para>
      </sect2>

      <sect2>
        <title>Needed Data</title>

        <para>What data is needed to simulate traffic? At first, you do of
        course need the network the traffic to simulate takes place on. As
        SUMO is meant to work with large networks, we mainly concentrated our
        work on importing networks and the computation of further needed
        values. Beside the roads and descriptions where they meet, information
        about traffic lights is necessary.</para>

        <para>Further, you do need information of the traffic demand. While
        most traffic simulation use a statistical distribution laid over the
        network, each vehicle within SUMO knows its route. Within this
        approach, the route is a list of edges to pass. Although this approach
        is more realistic, it also induces a large amount of data needed to
        describe the vehicle movements. By now, routes are not compressed
        within SUMO and so may be several MB large. We will possibly change
        this in future.</para>

        <figure>
          <title>Three parts of a simulation (from left to right: vehicles,
          streets, signals)</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./gfx/simparts.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>User Assignment</title>

        <para>It seems obvious, that each driver is trying to use to shortest
        path through the network. But when all are trying to do this, some of
        the roads - mainly the arterial roads would get congested and their
        benefit would sink. This problem is known to traffic research as the
        dynamic user assignment. Some approaches have been developed to solve
        this.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Main Software Paradigms</title>

      <para>Two basic design goals are approached: the software shall be fast
      and it shall be portable. Due to this, the very first versions were
      developed to be run from the command line - no graphical interface was
      supplied at first and all parameter had to be inserted by hand. Also,
      due to these goals, the software was split into several parts. Each of
      them has a certain purpose and must be run individually. This is
      something that makes SUMO different to other simulation packages where
      the dynamical user assignment is made within the simulation itself, not
      via an external application like here.</para>

      <para>The split allows an easier extension of the application&#39;s part
      as they small enough and it also allows the usage of faster data
      structures, each adjusted to the current purpose, instead of using
      complicated and ballast-loaded ones. Still, this makes the usage of SUMO
      a little bit uncomfortable in comparison to other simulation packages.
      As there are still other things to do, we are not thinking of a redesign
      towards an integrated approach by now.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Usage Description</title>

    <sect1>
      <title>The Workflow of preparing a Simulation</title>

      <para>As shortly described above, you basically have to the following
      steps - which we will also describe in a greater detail within the next
      subchapters: generation of the road network and generation of the
      vehicle movements. After this, you can perform your first simulation
      steps. This process is also visualised within the next figure.</para>

      <para>Please remark, that most of the tools are command-line tools by
      now. They do nothing if you just double-click them. Do also notice, that
      we describe the call parameter in the following chapters which may be
      also stored in so-called &#34;configuration files&#34; to allow their
      reuse. This possibility is described on a later place in the document.</para>

      <figure>
        <title>Process of simulation with SUMO; (grey and rounded: data used;
        white: program calls)</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="./gfx/simsteps1.gif" format="GIF" scale="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <sect2>
        <title>Network Generation</title>

        <para>As SUMO uses an own road network description, normally networks
        must be generated from an existing dataset. The only exception is that
        someone already possesses build SUMO-networks, normally having the
        extension *.net.xml. Although being readable (xml) by human beings,
        the format of the road network used by SUMO is not meant to be edited
        by a human being and will also not be described herein due to its
        complexity. Take a look into the developer documentation if you want
        more information about this, please.</para>

        <para>Having data describing the network, you may convert them into a
        network description readable by SUMO using the SUMO-NETCONVERT tool.
        By now, SUMO-NETCONVERT is capable to parse the following formats:</para>

        <para><itemizedlist><listitem><para>ptv VISUM (a macroscopic traffic
        simulation package)</para></listitem><listitem><para>ptv VISSIM (a
        microscopic traffic simulation package)</para></listitem><listitem><para>ARTEMIS
        by Prof. Peter Hidas (a microscopic traffic simulation package)</para></listitem><listitem><para>CELL
        by Christian Gawron (a mesoscopic traffic simulation package)</para></listitem><listitem><para>ARCVIEW-data
        base files</para></listitem><listitem><para>XML-descriptions</para></listitem></itemizedlist></para>

        <para>In most of these cases, SUMO-NETCOVERT only needs two parameter:
        the name of the input format followed by the name of the file and the
        name of the output format. If you want to import a file generated by
        the VISUM simulation package, simply write the following:</para>

        <example>
          <title>netconvert(.exe) --visum=MyVisumNet.inp
          --output-file=MySUMOFile.net.xml</title>
        </example>

        <para>Please note, that SUMO-NETCONVERT has to be started from the
        command line. There is no graphical interface available, yet.</para>

        <para>The only exception to this rule occurs if you want to use
        XML-descriptions of the network and we will describe this a little bit
        more detailed, now. This is the common way to build own networks.</para>

        <para>Here, again a figure may explain what to do beside the
        descriptions given next.</para>

        <figure>
          <title>Building a network</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./gfx/simsteps-netconv.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <sect3>
          <title>Building Networks from own XML-descriptions</title>

          <para>All of the small theoretical examples, but also the model of a
          part of the I-880 included within the distribution were made by
          hand. For doing this, you need at least two files: one file for
          nodes and another one for the streets between them. Please notice,
          that we use both names &#34;node&#34; and &#34;junction&#34; the
          same way. <caution><para><inlinegraphic
          fileref="./gfx/attention_small.gif" format="GIF" />Please do also
          read the chapter &#34;General comments on import of networks without
          traffic light logics&#34;</para></caution></para>

          <sect4>
            <title>Nodes description</title>

            <para>Within the nodes-files, normally named MyNodes.nod.xml,
            every node is described in a single line which looks like this:
            <sgmltag>&#60;node id=&#34;&#60;STRING&#62;&#34;
            x=&#34;&#60;FLOAT&#62;&#34; y=&#34;&#60;FLOAT&#62;&#34;
            [type=&#34;&#60;TYPE&#62;&#34;]/&#62;</sgmltag> - the straight
            brackets (&#39;[&#39; and &#39;]&#39;) indicate that the parameter
            is optional. Each of these attributes has a certain meaning and
            value range:</para>

            <para><itemizedlist><listitem><para>id: The name of the node; may
            be any character string</para></listitem><listitem><para>x: The
            x-position of the node on the plane in m; must be a floating point
            number</para></listitem><listitem><para>y: The y-position of the
            node on the plane in m; must be a floating point number</para></listitem><listitem><para>type:
            An optional type for the node. If you leave out the type of the
            node, it is automatically guessed by SUMO-NETCOVERT but may not be
            the one you intentionally thought of. The following types are
            possible, any other string is counted as an error and will yield
            in a program stop:</para><itemizedlist><listitem><para>priority:
            Vehicles have to wait until vehicles right to them have passed the
            junction. This is a very common scheme within Germany.</para></listitem><listitem><para>traffic_light:
            The junction is controlled by a traffic light.</para></listitem></itemizedlist><para>We
            do not have implemented the american way of giving way on
            junctions that are not controlled by a traffic light. It is also
            not possible to describe the parameter of the traffic light at
            this level.</para></listitem></itemizedlist> When writing your
            nodes-file, please do not forget to embed your node definitions
            into an opening and a closing &#34;tag&#34;. A complete file
            should like the example below, which is the node file for the
            &#34;cross1ltl&#34; example. And you may also take a look into our
            examples using a simple text editor.</para>

            <para><sgmltag>&#60;nodes&#62; &#60;!-- The opening tag --&#62;</sgmltag></para>

            <para><sgmltag> &#60;node id=&#34;0&#34; x=&#34;0.0&#34;
            y=&#34;0.0&#34; type=&#34;traffic_light&#34;/&#62; &#60;!--
            definition of node &#34;0&#34; --&#62;</sgmltag></para>

            <para><sgmltag> &#60;node id=&#34;1&#34; x=&#34;-500.0&#34;
            y=&#34;0.0&#34; type=&#34;priority&#34;/&#62; &#60;!-- definition
            of node &#34;1&#34; --&#62;</sgmltag></para>

            <para><sgmltag> &#60;node id=&#34;2&#34; x=&#34;+500.0&#34;
            y=&#34;0.0&#34; type=&#34;priority&#34;/&#62; &#60;!-- definition
            of node &#34;2&#34; --&#62; </sgmltag></para>

            <para><sgmltag> &#60;node id=&#34;3&#34; x=&#34;0.0&#34;
            y=&#34;-500.0&#34; type=&#34;priority&#34;/&#62; &#60;!--
            definition of node &#34;3&#34; --&#62; </sgmltag></para>

            <para><sgmltag> &#60;node id=&#34;4&#34; x=&#34;0.0&#34;
            y=&#34;+500.0&#34; type=&#34;priority&#34;/&#62; &#60;!--
            definition of node &#34;4&#34; --&#62; </sgmltag></para>

            <para><sgmltag>&#60;/nodes&#62; &#60;!-- The closing tag --&#62;</sgmltag></para>

            <para>As you may notice, only the first node named &#34;0&#34;,
            which is the node in the middle of the network, is a traffic light
            controlled junction. All other nodes are uncontrolled. You may
            also notice, that each of both ends of a street does need an
            according node. This is not really necessary as you may see soon,
            but it eases the understanding of the concept: every edge (road)
            is a connection between two nodes.</para>

            <para>You should also know something about the coordinate system:
            the higher a node on the screen shall be (the nearer to the top of
            your monitor), the higher his y-value must be. The more to left it
            shall be, the higher his x-value.</para>

            <figure>
              <title>Coordinate system used in SUMO</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="./gfx/basic_coordinates.gif"
                  format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>
          </sect4>

          <sect4>
            <title>Edges description</title>

            <para>Edges are described quite the same way as nodes, but do
            possess other parameter. Within the edges file, each description
            of a single edge looks like this: <sgmltag>&#60;edge
            id=&#34;&#60;STRING&#62;&#34;
            (fromnode=&#34;&#60;NODE_ID&#62;&#34;
            tonode=&#34;&#60;NODE_ID&#62;&#34; |
            xfrom=&#34;&#60;FLOAT&#62;&#34; yfrom=&#34;&#60;FLOAT&#62;
            xto=&#34;&#60;FLOAT&#62;&#34; yto=&#34;&#60;FLOAT&#62;&#34;)
            [(type=&#34;&#60;STRING&#62;&#34; |
            nolanes=&#34;&#60;INT&#62;&#34; speed=&#34;&#60;FLOAT&#62;&#34;
            priority=&#34;&#60;FLOAT&#62;&#34;
            length=&#34;&#60;FLOAT&#62;&#34;)] [shape=&#34;&#60;2D_POINT&#62;[
            &#60;2D_POINT&#62;]* &#60;2D_POINT&#62;&#34;]
            [spread_type=&#34;center&#34;]/&#62;</sgmltag>.</para>

            <para>What does it mean? Every one who knows how XML-files look
            like, should have noticed brackets (&#39;(&#39; and &#39;)&#39;)
            and pipes (&#39;|&#39;) within the definition and these characters
            are not allowed within XML... What we wanted to show which
            parameter are optional. So for the definition of the origin and
            the destination node, you can either give their names using
            <sgmltag>fromnode=&#34;&#60;NODE_ID&#62;&#34;
            tonode=&#34;&#60;NODE_ID&#62;&#34; </sgmltag>or you give their
            positions using <sgmltag>xfrom=&#34;&#60;FLOAT&#62;&#34;
            yfrom=&#34;&#60;FLOAT&#62; xto=&#34;&#60;FLOAT&#62;&#34;
            yto=&#34;&#60;FLOAT&#62;&#34;</sgmltag>. In the second case, a
            node will be build automatically at the given positions. Each edge
            is unidirectional and starts at the &#34;from&#34;-node and ends
            at the &#34;to&#34;-node. If a name of one of the nodes can not be
            dereferenced - no node with the name is found - an error is
            generated.</para>

            <para>For each edge, some further attributes should be supplied,
            being the number of lanes the edge has, the maximum speed allowed
            on the edge, the length the edge has (in meters) and a priority
            value. These values - beside the length in fact - may either be
            given explicitly for each edge using according attributes or they
            may reference a &#34;type&#34;. In this case, you should also
            write a type-file which format will be described within the next
            chapter and give each edge within your edge file a reference to a
            type within your type file using the name of the type to use. A
            type with this name should of course be within the generated
            type-file, otherwise an error is reported. You may also leave the
            edge parameter of. In this case, default-values will be used and
            the edge will have a single lane, a priority of 0 (zero) and the
            maximum allowed speed on this edge will be 13.9m/s being around
            50km/h. The length of this edge will be computed as the distance
            between the starting and the end point.</para>

            <para>As an edge may have a more complicated geometry, especially
            when it is a highway off road, you may supply the edge&#39;s shape
            within the shape tag. If the length of the edge is not given
            otherwise, the distances of the shape elements will be summed.</para>

            <para>The information <sgmltag>spread_type=&#34;center&#34;
            </sgmltag>forces NETCONVERT to spread lanes to both sides of the
            connection between the begin node and the end node or from the
            list of lines making up the shape. If not given, lanes are spread
            to right, as default.</para>

            <para>Let&#39;s list an edge&#39;s attributes again:</para>

            <para><itemizedlist><listitem><para>id: The name of the edge; may
            be any character string</para></listitem><listitem><para>Origin
            and destination node descriptions</para><para>Either:</para><itemizedlist><listitem><para>fromnode:
            The name of a node within the nodes-file the edge shall start at</para></listitem><listitem><para>tonode:
            The name of a node within the nodes-file the edge shall end at</para></listitem></itemizedlist><para>or:</para><itemizedlist><listitem><para>xfrom:
            The x-position of the node the edge shall start at in m; must be a
            floating point number</para></listitem><listitem><para>yfrom: The
            y-position of the node the edge shall start at in m; must be a
            floating point number</para></listitem><listitem><para>xto: The
            x-position of the node the edge shall end at in m; must be a
            floating point number</para></listitem><listitem><para>yto: The
            y-position of the node the edge shall end at in m; must be a
            floating point number</para></listitem></itemizedlist></listitem><listitem><para>Descriptions
            of the edge&#39;s type and atomic attributes:</para><para>Either:</para><itemizedlist><listitem><para>type:
            The name of a type within the types-file</para></listitem></itemizedlist><para>or:</para><itemizedlist><listitem><para>nolanes:
            The number of lanes of the edge; must be an integer value</para></listitem><listitem><para>speed:
            The maximum speed allowed on the edge in m/s; must be a floating
            point number</para></listitem><listitem><para>priority: The
            priority of the edge; must be an integer value</para></listitem><listitem><para>length:
            The length of the edge in meter; must be an float value</para></listitem></itemizedlist></listitem><listitem><para>The
            edges shape:</para><itemizedlist><listitem><para>shape: List of
            positions; each position is encoded in x,y (do not separate the
            numbers with a space!) in meters; an edge&#39;s shape definition
            must of course be at least two positions long; an example:
            shape=&#34;0,0 0,100&#34; describes a vertical edge of one hundred
            meters.</para></listitem><listitem><para>spread_type: The
            description of how to spread the lanes; center spreads lanes to
            both directions of the shape, any other value to right.</para></listitem></itemizedlist></listitem></itemizedlist>
            The priority plays a role during the computation of the way-giving
            rules of a node. Larger values for the priority of an edge allow
            vehicles using it to pass without waiting - if no traffic light is
            on the node.</para>

            <para>Even if you supply a type, you can still override the so set
            values by supplying any of the parameter &#34;nolanes&#34;,
            &#34;speed&#34; and &#34;priority&#34;.</para>

            <para>Also the definitions of the edges must be embedded into an
            opening and a closing tag and for the example &#34;cross1ltl&#34;
            the whole edges-file looks like this:</para>

            <para><sgmltag>&#60;edges&#62;</sgmltag></para>

            <para><sgmltag> &#60;edge id=&#34;1i&#34; fromnode=&#34;1&#34;
            tonode=&#34;0&#34; type=&#34;25&#34;/&#62; &#60;!-- incoming edge
            1 --&#62;</sgmltag></para>

            <para><sgmltag> &#60;edge id=&#34;1o&#34; fromnode=&#34;0&#34;
            tonode=&#34;1&#34; type=&#34;51&#34;/&#62; &#60;!-- outgoing edge
            1 --&#62;</sgmltag></para>

            <para><sgmltag> &#60;edge id=&#34;2i&#34; fromnode=&#34;2&#34;
            tonode=&#34;0&#34; type=&#34;25&#34;/&#62; &#60;!-- incoming edge
            2 --&#62;</sgmltag></para>

            <para><sgmltag> &#60;edge id=&#34;2o&#34; fromnode=&#34;0&#34;
            tonode=&#34;2&#34; type=&#34;51&#34;/&#62; &#60;!-- outgoing edge
            2 --&#62;</sgmltag></para>

            <para><sgmltag> &#60;edge id=&#34;3i&#34; fromnode=&#34;3&#34;
            tonode=&#34;0&#34; type=&#34;25&#34;/&#62; &#60;!-- incoming edge
            3 --&#62;</sgmltag></para>

            <para><sgmltag> &#60;edge id=&#34;3o&#34; fromnode=&#34;0&#34;
            tonode=&#34;3&#34; type=&#34;51&#34;/&#62; &#60;!-- outgoing edge
            3 --&#62;</sgmltag></para>

            <para><sgmltag> &#60;edge id=&#34;4i&#34; fromnode=&#34;4&#34;
            tonode=&#34;0&#34; type=&#34;25&#34;/&#62; &#60;!-- incoming edge
            4 --&#62;</sgmltag></para>

            <para><sgmltag> &#60;edge id=&#34;4o&#34; fromnode=&#34;0&#34;
            tonode=&#34;4&#34; type=&#34;51&#34;/&#62; &#60;!-- outgoing edge
            4 --&#62;</sgmltag></para>

            <para><sgmltag>&#60;/edges&#62;</sgmltag></para>

            <para>As you see, we have used references to road types and to
            junctions, here.</para>

            <caution>
              <para><inlinegraphic fileref="./gfx/attention_small.gif"
              format="GIF" />There are some constraints about the streets&#39;
              ids. They must not contain any of the following characters:
              &#39;_&#39; (underline - used for lane ids), &#39;[&#39; and
              &#39;]&#39; (used for enumerations), &#39; &#39; (space - used
              as list divider), &#39;*&#39; (star, used as wildcard),
              &#39;:&#39; (used as marker for internal lanes).</para>
            </caution>
          </sect4>

          <sect4>
            <title>Types description</title>

            <para>Road types are meant to be used to ease the definition of
            edges. As described above, the description of an edge should
            include information about the number of lanes, the maximum speed
            allowed on this edge and the edge&#39;s priority. To avoid the
            explicit definition of eachparameter for every edge, one can use
            road types, which do encapsulate these parameter under a given
            name, the road type, which instead may be used on describing the
            edge.</para>

            <para>Due to the usage, the attributes are of course exactly the
            same as for edges themselves:</para>

            <para><itemizedlist><listitem><para>id: The name of the road type;
            may be any character string</para></listitem><listitem><para>nolanes:
            The number of lanes of the referencing must be an integer value</para></listitem><listitem><para>speed:
            The maximum speed allowed on the referencing edge in m/s; must be
            a floating point number</para></listitem><listitem><para>priority:
            The priority of the referencing edge; must be an integer value</para></listitem></itemizedlist>The
            information about the nodes the edge starts and ends at is not
            given within the types&#39; descriptions. They can only be set
            within the edge&#39;s attributes.</para>

            <para>Within the previous edge input file example, two references
            to type definitions were used, &#34;25&#34; and &#34;51&#34;. You
            can find the definitions themselves within the file
            &#34;std_types.xml&#34; within the &#34;data/types&#34; - folder.
            They are:</para>

            <para><sgmltag>&#60;types&#62;</sgmltag></para>

            <para>... some other types ...</para>

            <para><sgmltag> &#60;type id=&#34;25&#34; priority=&#34;78&#34;
            nolanes=&#34;1&#34; speed=&#34;19.444&#34;/&#62;</sgmltag></para>

            <para>... some other types ...</para>

            <para><sgmltag> &#60;type id=&#34;51&#34; priority=&#34;46&#34;
            nolanes=&#34;1&#34; speed=&#34;11.111&#34;/&#62;</sgmltag></para>

            <para>... some other types ...</para>

            <para><sgmltag>&#60;/types&#62;</sgmltag></para>

            <para>What does it mean? Every incoming street which is every
            street that ends at node &#34;0&#34;, is of the type named
            &#34;25&#34;. This type sets the edge&#39;s maximum speed to
            19.444m/s being around 70km/h and the edge&#39;s priority to 78.
            All edges of this type will have one lane - unless not overwritten
            within the edge definition what is not done, here.</para>

            <para>All outgoing edges (those starting at node &#34;0&#34;) or
            of the type &#34;51&#34;, so being roads where 11.111m/s (~40km/h)
            is the maximum speed. They also have one lane and their priority
            is &#34;46&#34;.</para>
          </sect4>

          <sect4>
            <title>Connection descriptions</title>

            <para>If you have tried the version 0.7 you have possibly missed
            the possibility to specify the connections between the edges for
            yourself. This is possibly using a further file, the connections
            file. The connection file specifies which edges outgoing from a
            junction may be reached by a certain edge incoming into this
            junction and optionally also which lanes shall be used on both
            sides.</para>

            <para>If you only want to describe which edges may be reached from
            a certain edge, this definition could look something like this:
            <sgmltag>&#60;connection from=&#34;&#60;FROM_EDGE_ID&#62;&#34;
            to=&#34;&#60;T0_EDGE_ID&#62;&#34;/&#62;</sgmltag>. This tells the
            netconverter not only that vehicles shall be allowed to drive from
            the edge named &#60;FROM_EDGE_ID&#62; to the edge named
            &#60;TO_EDGE_ID&#62;, but also prohibits all movements to other
            edges from &#60;FROM_EDGE_ID&#62;, unless they are specified
            within this file. Let&#39;s repeat the parameters:</para>

            <itemizedlist>
              <listitem>
                <para>from: The name of the edge the vehicles leave</para>
              </listitem>

              <listitem>
                <para>to: The name of the edge the vehicles may reach when
                leaving &#34;from&#34;</para>
              </listitem>
            </itemizedlist>

            <para>When using this kind of input, NETCONVERT will compute which
            lanes shall be used if any of the connected edges has more than
            one lane.</para>

            <para>If you also want to explicitly override this computation and
            set the lanes by hand, use the following: <sgmltag>&#60;connection
            from=&#34;&#60;FROM_EDGE_ID&#62;&#34;
            to=&#34;&#60;T0_EDGE_ID&#62;&#34;
            lane=&#34;&#60;INT_1&#62;:&#60;INT_2&#62;&#34;/&#62;</sgmltag>.
            Here, a connection from the edge&#39;s
            &#34;&#60;FROM_EDGE_ID&#62;&#34; lane with the number
            &#60;INT_1&#62; is build to the lane &#60;INT_2&#62; of the edge
            &#34;&#60;TO_EDGE_ID&#62;&#34;. Lanes are counted from the right
            (outer) to the left (inner) side of the road beginning with 0.
            Again the parameter:</para>

            <para><itemizedlist><listitem><para>from: The name of the edge the
            vehicles leave</para></listitem><listitem><para>to: The name of
            the edge the vehicles may reach when leaving &#34;from&#34;</para></listitem><listitem><para>lane:
            the numbers of the connected lanes, separated with &#39;:&#39;;
            lanes are counter from right to left beginning with 0</para></listitem></itemizedlist>Warning:
            Please do not use both connection declarations for the same
            from-edge! The behaviour is not verified and tested for these
            settings.</para>
          </sect4>
        </sect3>

        <sect3>
          <title>Converting other input data</title>

          <para>Large maps cannot be inserted by hand. We use maps from
          NavTech stored in the ArcView database format and maps from other
          simulation suppliers such as ptv within our projects and both are
          too large for this. We will now explain how to convert such data. We
          will not give any introduction into those formats/simulations
          themselves or compare their quality, look out for other sources of
          information on this, but we will also describe what is being
          imported and what problems may arise during the conversion.</para>

          <sect4>
            <title>Importing ArcView-databases</title>

            <para>Each of the maps we&#39;ve got from NavTech, being encoded
            in the ArcView database format, describes an area of a single
            state or federal state. This is much too large for our purposes,
            as we are mainly interested in urban traffic. In fact, we have not
            tried out which resources are needed to perform the simulation of
            a single german federal state with SUMO, although this should be
            possible at all.</para>

            <para>Due to this, one has at first to extract an area of
            interest. Our first approaches to do this by using postal numbers
            is not as sophisticated as firstly though to be: some parts of the
            city, which still are interesting, above all major highways do not
            belong to the postal area of the regarded cities (Magdeburg and
            Munich within this test). Due to this, we suspect it is better to
            extract those</para>

            <para>Warning! Due to their size, import of ArcView data does dure
            quite long!</para>

            <para><caution><para><inlinegraphic
            fileref="./gfx/attention_small.gif" format="GIF" />Please do also
            read the chapter &#34;General comments on import of networks
            without traffic light logics&#34;</para></caution></para>

            <para>Known problems:</para>

            <itemizedlist>
              <listitem>
                <para>The junctions are not assigned to proper types</para>
              </listitem>
            </itemizedlist>
          </sect4>

          <sect4>
            <title>Importing Artemis-simulation folders</title>

            <para>To import Artemis-network descriptions, start
            SUMO-NETCONVERT with the following parameter:</para>

            <example>
              <title>netconvert(.exe) --artemis=&#60;PATH&#62;
              --output-file=MySUMOFile.net.xml</title>
            </example>

            <para>This should build the network &#34;MySUMOFile.net.xml&#34;
            which contains the build network that may be used by SUMO.
            &#60;PATH&#62; is the path to (the name of) the folder that
            contains the files that make up the description of an
            ARTEMIS-simulation.</para>

            <para>Imported information:</para>

            <itemizedlist>
              <listitem>
                <para>Nodes (id, position, type)</para>
              </listitem>

              <listitem>
                <para>Links (origin, destination, id, speed, number of lanes,
                length)</para>
              </listitem>

              <listitem>
                <para>Signals</para>
              </listitem>

              <listitem>
                <para>Signal Groups (node id, group, connection, start &#38;
                end phase)</para>
              </listitem>

              <listitem>
                <para>Signal Phases (node id, start, phase, percentage)</para>
              </listitem>

              <listitem>
                <para>Segments (link, position on link, geometrical position)</para>
              </listitem>

              <listitem>
                <para>Lanes (lane number, section number, begin and end
                position)</para>
              </listitem>

              <listitem>
                <para>HVdests (origin and destination lane)</para>
              </listitem>
            </itemizedlist>

            <para>We have to import the HVdests to know which sources and
            sinks we have to build.</para>

            <para>Known problems:</para>

            <itemizedlist>
              <listitem>
                <para>The connections between lanes may be not the same as in
                the input</para>
              </listitem>

              <listitem>
                <para>The positions of the lanes are not correct</para>
              </listitem>

              <listitem>
                <para>The times the traffic lights switch at may not be the
                same as within the input</para>
              </listitem>

              <listitem>
                <para>Additional source and sink links must be build</para>
              </listitem>

              <listitem>
                <para>Possible speed changes at segments are not supported</para>
              </listitem>
            </itemizedlist>

            <para>Artemis simulation description also holds definitions of the
            traffic flows to use. They are not parsed by the SUMO-NETCONVERT -
            module, but may be passed to SUMO-ROUTER to gain the according
            routes.</para>
          </sect4>

          <sect4>
            <title>Importing Cell/Fastlane-networks</title>

            <para>FastLane, developed at the ZAIK, is a mesoscopic traffic
            simulation. The network description consists of a file containing
            edges and a second one containing nodes. Due to this, you need to
            supply two values as input parameter and the call looks like this:</para>

            <example>
              <title>netconvert(.exe) --cell-nodes=&#60;CELL_NODE_FILE&#62;
              --cell-edges=&#60;CELL_EDGE_FILE&#62;
              --output-file=MySUMOFile.net.xml</title>
            </example>

            <para>Of course, both files must belong to the same network.</para>

            <para>Known problems:</para>

            <itemizedlist>
              <listitem>
                <para>All junctions are interpreted as priority-junctions</para>
              </listitem>

              <listitem>
                <para>The number of a street&#39;s lanes is not computed from
                the flows, it must be given</para>
              </listitem>
            </itemizedlist>
          </sect4>

          <sect4>
            <title>Importing VISSIM-networks</title>

            <para>Although Vissim is a microscopic simulation as SUMO is, it
            follows a completely different concept of modelling traffic. Due
            to this, the import is quite clumsy and may not work with all
            networks. Also, we have to insert additional edges into our
            networks to simulate the Vissim-parking places, originally being
            nodes, which we do not have.</para>

            <para>Known problems:</para>

            <itemizedlist>
              <listitem>
                <para>Works with german networks only</para>
              </listitem>

              <listitem>
                <para>All actuated traffic lights are mapped onto the same
                type of traffic light (MSActuatedTrafficLight)</para>
              </listitem>

              <listitem>
                <para>Additional source and sink links must be build</para>
              </listitem>
            </itemizedlist>

            <para>An usage example could be this one:</para>

            <example>
              <title>netconvert(.exe) --vissim=&#60;VISSIM_FILE&#62;
              --output-file=MySUMOFile.net.xml</title>
            </example>

            <para>During import, different actions must be done which may
            yield in some loss of data and may be watched in part by setting
            the verbose option. The additional warnings are described in a
            further document.</para>
          </sect4>

          <sect4>
            <title>Importing VISUM-networks</title>

            <para>Visum is a macroscopic simulation developed by ptv. As the
            network description does not possess any information about the
            number of lanes, we have to generate it from the street&#39;s
            flow. The computation is done by diving the flow through a fix
            value, 2000 by default. This yields in a realistic network but
            fails on &#39;feeder roads&#39; where vehicles are emitted. Some
            further parameter allows to fix the problem.</para>

            <para>An usage example could be this one:</para>

            <example>
              <title>netconvert(.exe) --vissim=&#60;VISSIM_FILE&#62;
              --output-file=MySUMOFile.net.xml</title>
            </example>
          </sect4>
        </sect3>

        <sect3>
          <title>Automatic network generation</title>

          <para>SUMO-NETCONVERT allows building of easy networks. In
          dependence to what is wished, three types of networks can be built.
          All of them are very sophisticated, but may be used as examples. You
          are also greatly invited to extend the concepts. Available types
          are: grid-networks, spider-networks and random-networks.</para>

          <sect4>
            <title>Grid-like networks</title>

            <para>To be described...</para>
          </sect4>

          <sect4>
            <title>Spider-net-like networks</title>

            <para>To be described...</para>
          </sect4>

          <sect4>
            <title>Random networks</title>

            <para>To be described...</para>
          </sect4>
        </sect3>

        <sect3>
          <title>General comments on import of networks without traffic light
          logics</title>

          <para>Some of the supported network formats - Visum, Vissim and
          Artemis, do supply information about the logic of the traffic
          lights. The others do not. Due to this, we have to compute the
          traffic lights by our own. This is working, but one has to remind
          one thing: dead times are necessary to avoid collisions of vehicles
          which do not manage to break as they are too near to the traffic
          light when it switches to red. This time may be computed, and is,
          but is highly dependend to the maximum deceleration possibility of
          the vehicles used. As this parameter is not known to the network
          builder at all - the vehicle types are supported to the simulation
          only - we added a parameter that does allow specifying it:</para>

          <para>--min-decel (-D) DOUBLE</para>
        </sect3>
      </sect2>

      <sect2>
        <title>Routes Generation</title>

        <para>After having your network converted into the SUMO-format, you
        could take a look at it using the gui-version of the simulation , but
        no cars would be driving around. You still need some kind of
        description about the vehicles. A vehicle consists of three parts: the
        vehicle itself, its type and the route. We will describe this in
        detail later as most of the things to generate these descriptions may
        be done without knowing this.</para>

        <para>If you are importing data from other simulation packages, they
        have own representations of vehicle movements you can use. In case of
        using ArcView-data or if you do not have the vehicle movement data,
        you have to generate the movements by your own. We will now describe,
        how to import vehicle movements from other simulations and how to
        build own movement descriptions.</para>

        <para>Before doing this, we want to explain why you possibly need two
        programs to do it: Within the real life single vehicles are using a
        route the driver knows which may be any list of streets the vehicle
        passes. This is quite simple but the amount of data needed to describe
        this is very large. Due to this, vehicle movements are often given as
        the amount of vehicles moving from one point to another point within
        the network. A point in this sense may be a position on the street,
        but mostly it is something like a district or another area. Given such
        information, you have to generate single trips from this so-called
        OD-matrix (Origin/Destination-matrix) using the SUMO-OD2TRIP-tool.</para>

        <figure>
          <title>Building trips from the OD-matrix</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./gfx/simsteps-od2trips.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>As trip definitions mostly contain the places the vehicle starts
        and ends his trip at, but not which edges have to be passed, they have
        to be fed into SUMO-ROUTER. This tool computes the list of edges the
        vehicle passes and saves them into a route file.</para>

        <figure>
          <title>Building routes from trips</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="./gfx/simsteps-router.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>If you are preparing a simulation by your own and not import an
        existing one, you can directly use routes. As supplying information
        about roads and junctions is insufficient to generate districts, this
        is even the only possible way in most cases. Information about how to
        import routes from existing simulations is listed later.</para>

        <sect3>
          <title>Building own routes from scratch</title>

          <para>You have either the possibility to generate completely random
          routes or to exactly describe what you want and pass this
          information to SUMO-ROUTER, which then completes this description by
          necessary information. The results may be then used within the
          simulation.</para>

          <sect4>
            <title>Generating random routes</title>

            <para>Random routes are the most easiest, but also the most
            inaccurate way to feed your network with vehicle movements. Using
            the following call:</para>

            <example>
              <title>router(.exe) --net=&#60;SUMO_NET&#62; -R &#60;FLOAT&#62;
              --output-file=MySUMORoutes.rou.xml -b &#60;UINT&#62; -e
              &#60;UINT&#62;</title>
            </example>

            <para>Generates random routes for the time interval given by
            -b(egin) and -e(nd). In each time step as many vehicles will be
            emitted into the network as given by the value of -R
            (--random-per-second). You can also supply values which smaller
            than one. In this case, a single vehicle will be emitted each 1/-R
            step. Example: -R 0.25 generates a route description, which, when
            loaded, forces the simulation to emit a single vehicle each fourth
            time step.</para>

            <para>It is also possible to use this parameter in combination of
            other route definitions, for example supplying some fix routes and
            additionally generate random routes.</para>

            <para><inlinegraphic fileref="./gfx/attention_small.gif"
            format="GIF" /> Random routes are not the best way to generate
            routes. Take a look at the network displayed below. This network
            has two rural and many minor roads. Random routes are by now
            spread all over the network and each road is chosen to be the
            starting or the ending without respecting his function. Due to
            this, the network is filled over with cars, coming from and
            approaching directions, the normal traffic is not taking - the
            normal traffic would concentrate on rural roads. This can be
            solved using definitions of routes. We will discuss this in the
            second subchapter.</para>

            <para><inlinegraphic fileref="./gfx/attention_small.gif"
            format="GIF" /> There is also another problem with random routes:
            By definition, in 50% of the cases, the route starts in the
            opposite direction of the destination - on the wrong side of the
            road. This yields in a large amount of vehicles that want to turn
            back using the first possibility. This is of course also not
            common in the real world, especially not in areas as the one shown
            before. To avoid this, we remove the first and the last edge from
            the route per default.</para>
          </sect4>

          <sect4>
            <title>Generating routes by description</title>

            <para>Trip definitions that can be laid into the network may be
            supplied to the router using an XML-file. The syntax of a single
            route is: <sgmltag>&#60;tripdef id=&#34;&#60;ID&#62;&#34;
            depart=&#34;&#60;TIME&#62;&#34;
            from=&#34;&#60;ORIGIN_EDGE_ID&#62;&#34;
            to=&#34;&#60;DESTINATION_EDGE_ID&#62;&#34;
            [type=&#34;&#60;VEHICLE_TYPE&#62;&#34;]
            [period=&#34;&#60;INT&#62;&#34;
            [repno=&#34;&#60;INT&#62;&#34;]]/&#62;</sgmltag>. You at least
            have to supply the edge the trip starts at (origin), the edge the
            trip ends at (destination) and the departure time. If the type is
            not given, a default (&#34;SUMO_DEFAULT_TYPE&#34;) will be used
            and stored within the routes-file. If the attribute
            &#34;period&#34; is given, not only one vehicle will use the
            route, but every n seconds (where n is the number defined in
            period), a vehicle using this route will be emitted. The number of
            vehicles to emit using this route may be additionally constrained
            using &#34;repno&#34;. Otherwise, it is unlimited.</para>

            <para>Let&#39;s review a trip&#39;s parameter:</para>

            <itemizedlist>
              <listitem>
                <para>id: A string holding the id of the route</para>
              </listitem>

              <listitem>
                <para>depart: The time the route starts at</para>
              </listitem>

              <listitem>
                <para>from: The name of the edge the route starts at; the edge
                must be a part of the used network</para>
              </listitem>

              <listitem>
                <para>to: The name of an the edge the route ends at; the edge
                must be a part of the used network</para>
              </listitem>

              <listitem>
                <para>type: The name of the type the vehicle has</para>
              </listitem>

              <listitem>
                <para>period: The time after which another vehicle with the
                same route shall be emitted</para>
              </listitem>

              <listitem>
                <para>repno: The number of vehicles to emit which share the
                same route</para>
              </listitem>
            </itemizedlist>

            <para>This file is supplied to ROUTER using the option
            &#34;--trip-defs&#34; or &#34;-t&#34;:</para>

            <example>
              <title>router(.exe) --trip-defs=&#60;TRIP_DEFS&#62;
              --net=&#60;SUMO_NET&#62; --output-file=MySUMORoutes.rou.xml -b
              &#60;UINT&#62; -e &#60;UINT&#62;</title>
            </example>
          </sect4>
        </sect3>

        <sect3>
          <title>Importing Artemis-routes</title>

          <para>Although originally ARTEMIS-routes are stored within an
          OD-matrix, the import within SUMO is done using the SUMO-ROUTER
          program.</para>

          <para>This is basically done this way:</para>

          <example>
            <title>router(.exe) --artemis=&#60;ARTEMIS_FOLDER&#62;
            --net=&#60;SUMO_NET&#62; --output-file=MySUMORoutes.rou.xml -b
            &#60;UINT&#62; -e &#60;UINT&#62;</title>
          </example>

          <para><inlinegraphic fileref="./gfx/attention_small.gif"
          format="GIF" /> Remind that you have to specify the begin and the
          end of the simulation. This is quite inconsequent, as our mechanisms
          would allow import of repeatable routes, too. This is just not yet
          implemented.</para>

          <para>Known problems:</para>

          <itemizedlist>
            <listitem>
              <para>Only the a0-Flow is being imported</para>
            </listitem>

            <listitem>
              <para>Only one time-period is imported</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3>
          <title>Importing FastLane-routes</title>

          <para>One of the main concepts of FastLane is the Dynamic User
          Assignment by Christian Gawron. As this mechanism is based on single
          vehicle routes, those are explicitly given for a FastLane
          simulation. The router module has only to convert from the FastLane-
          into the SUMO-representation. Do this using the following command:</para>

          <example>
            <title>router(.exe) --cell=&#60;CELL_FILE_NAME(NO_EXTENSION)&#62;
            --net=&#60;SUMO_NET&#62; --output-file=MySUMORoutes.rou.xml -b
            &#60;UINT&#62; -e &#60;UINT&#62;</title>
          </example>

          <para>If you are familiar with FastLane, you may have noticed that
          you have only to supply one file name while FastLane uses two to
          describe the routes: one *.driver and one *.rinfo file. As both
          files do have the same name and only the extension differs, you have
          to give the name without the extension. So if your files have the
          names &#34;foo.driver&#34; and &#34;foo.rinfo&#34;, write
          &#34;--cell=foo&#34;.</para>

          <para>FastLanes stores routes within a very large file what makes
          the process quite slow. If you want to speed it up for the future,
          you can tell SUMO-ROUTER to save some temporary files using
          &#34;--save-cell-rindex&#34;. A further file named
          &#34;foo.rindex&#34; will be generated. It speeds up the processing
          by a factor of ten or so.</para>

          <para>As FastLane is portable, you may encounter files generated on
          a Windows-machine. Those files give some strange warnings, something
          that should not happen if you supply the right net. To avoid them,
          use the &#34;--intel-cell&#34; switch to tell SUMO-ROUTER it has to
          turn the byte order.</para>

          <para>You can also decide whether the best, not the last route a
          driver took shall be used: set the switch &#34;--no-last-cell&#34;
          for this.</para>
        </sect3>

        <sect3>
          <title>Importing VISSIM-routes</title>

          <para>To be described...</para>
        </sect3>

        <sect3>
          <title>Importing VISUM-routes</title>

          <para>To be described...</para>
        </sect3>
      </sect2>

      <sect2>
        <title>Performing the Simulation</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Further Structures</title>

        <para></para>

        <sect3>
          <title>Detectors</title>

          <para></para>
        </sect3>

        <sect3>
          <title>Emitter</title>

          <para></para>
        </sect3>

        <sect3>
          <title>Lanestate changer</title>

          <para></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Command Line Options</title>

      <sect2>
        <title>SUMO Command Line Arguments</title>

        <sect3>
          <title>Input options</title>

          <para><itemizedlist><listitem><para>MANDATORY: [ --net-files | --net
          | -n ] &#60;FILE&#62;</para><para>The network file to use.</para><caution><para><inlinegraphic
          fileref="./gfx/attention_small.gif" format="GIF" /> the name
          &#34;net-files&#34; is ambigous: only one network file can be loaded
          by now.</para></caution></listitem><listitem><para>OPTIONAL: [
          --route-files | --routes | -r ] &#60;FILE&#62;</para><para>The file
          with routes that shall be used</para></listitem><listitem><para>OPTIONAL:
          [ --additional-files | --additional | -a ] &#60;FILE&#62;</para><para>Additional
          files to load. You may specify detectors or emitters within these
          files to avoid manipulation of the network files themselves.</para></listitem><listitem><para>OPTIONAL:
          [ --configuration-file | --configuration | -c ] &#60;FILE&#62;</para><para>Specifies
          whether a configuration file shall be loaded</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Output options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --output-file |
          --output | -o ] &#60;FILE&#62;</para><para>Defines the file to write
          the &#34;raw&#34; output into; No raw output is generated if the
          file is not given.</para><caution><para><inlinegraphic
          fileref="./gfx/attention_small.gif" format="GIF" /> The
          &#34;raw&#34; output is becoming very large very fast.</para></caution></listitem><listitem><para>OPTIONAL:
          --dump-basename &#60;PATH&#62;</para><para>Specifies the base name
          to save aggregated network load information under. As you may
          specify more than a single aggregation time, the complete name for
          the file is build by appending the aggregatation interval and the
          &#34;.xml&#34;-extension to the given name.</para><para>Example:
          given &#34;--dump-basename=./aggregated/run1_&#34; and
          &#34;--dump-intervals=5;15;30&#34;, the files
          &#34;./aggregated/run1_5.xml&#34;,
          &#34;./aggregated/run1_15.xml&#34; and
          &#34;./aggregated/run1_30.xml&#34; are being build.</para><para>This
          parameter does only work in combination with
          &#34;--dump-intervals&#34;, all other usage is undefined .</para></listitem><listitem><para>OPTIONAL:
          --dump-intervals &#60;UNIT&#62;[;&#60;UINT&#62;]*</para><para>Specifies
          the aggregation times to use for the load information.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Simulation timing</title>

          <para><itemizedlist><listitem><para>MANDATORY: [ --begin | -b ]
          &#60;UINT&#62;</para><para>A virtual time the simulation starts at.
          All routes, which begin before this time, are skipped.</para></listitem><listitem><para>MANDATORY:
          [ --end | -e ] &#60;UINT&#62;</para><para>A virtual time the
          simulation ends at. All further routes are not processed.</para></listitem><listitem><para>OPTIONAL:
          [ --route-steps | -s ] &#60;UNIT&#62;</para><para>Within large
          areas, loading of all routes easily could yield in problems with a
          full computer memory. Due to this, you may optionally specify a time
          the interval for which the next routes shall be loaded. If this
          value is not given or zero, all routes are loaded before the
          simulation begins.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Simulation timing</title>

          <para><itemizedlist><listitem><para>OPTIONAL: --continue-on-accident</para><para>Normally,
          when an accident occurs, the simulation is stopped. You may allow
          the simulation to continue setting this value.</para><caution><para><inlinegraphic
          fileref="./gfx/attention_small.gif" format="GIF" /> By now, the
          behaviour after an accident is not defined; this option should not
          be used, yet. (Still, no accidents occur at normal circumstances)</para></caution></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Report options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --verbose | -v ]</para><para>Prints
          some information about the process during execution.</para></listitem><listitem><para>OPTIONAL:
          [ --suppress-warnings | -W ]</para><para>No warnings will be
          prompted if this option is set.</para></listitem><listitem><para>OPTIONAL:
          [ --print-options | -p ]</para><para>Prints the current option
          settings before the execution starts.</para></listitem><listitem><para>OPTIONAL:
          [ --log-file | -L ] &#60;FILENAME&#62;</para><para>All outputs
          (messages, warnings, errors) will be written to the named file.</para></listitem><listitem><para>OPTIONAL:
          [ --help | -? ]</para><para>Prints possible options.</para></listitem></itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>SUMO-NETCONVERT Command Line Arguments</title>

        <sect3>
          <title>Input options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --xml-node-files |
          --xml-nodes | -n ] &#60;FILE&#62;</para><para>Uses the given file as
          the source of specification node positions and types.</para></listitem><listitem><para>OPTIONAL:
          [ --xml-edge-files | --xml-edges | -e] &#60;FILE&#62;</para><para>Uses
          the given file as the source of specification of roads connecting
          nodes.</para></listitem><listitem><para>OPTIONAL: [
          --xml-connection-files | --xml-connections | -c ] &#60;FILE&#62;</para><para>Uses
          the given file as the source of specification how roads are
          connected (which lanes may be reached from which lanes).</para></listitem><listitem><para>OPTIONAL:
          [ --type-file | --types | -t ] &#60;FILE&#62;</para><para>Uses the
          given file as the source of edge types.</para></listitem><listitem><para>OPTIONAL:
          [ --cell-node-file | -cell-nodes ] &#60;FILE&#62;</para><para>Parses
          nodes from the given file assuming it to be a FastLane-file that
          contains node descriptions.</para></listitem><listitem><para>OPTIONAL:
          [ --cell-edge-file | -cell-edges ] &#60;FILE&#62;</para><para>Parses
          edges from the given file assuming it to be a FastLane-file that
          contains edge descriptions.</para></listitem><listitem><para>OPTIONAL:
          [ --visum-file | --visum ] &#60;FILE&#62;</para><para>Parses all
          network information from the given file, assuming it is in
          VISUM7.5-format.</para></listitem><listitem><para>OPTIONAL: [
          --vissim-file | --vissim ] &#60;FILE&#62;</para><para>Parses all
          network information from the given file, assuming it is in VISSIM
          3.6.2 or 3.6.3 format.</para></listitem><listitem><para>OPTIONAL: [
          --artemis-input | --artemis ] &#60;PATH&#62;</para><para>Parses all
          network information from files within the given path, assuming they
          belong to an ARTMIS-network.</para></listitem><listitem><para>OPTIONAL:
          [ --arcview-input | --arcview ] &#60;FILE_NAME(NO_EXTENSION)&#62;</para><para>Parses
          the edge attributes from &#60;FILE_NAME(NO_EXTENSION)&#62;_dbf.txt
          assuming it is an export from ArcView done by shapelib. Parses the
          edge geometries from &#60;FILE_NAME(NO_EXTENSION)&#62;_shp.txt
          assuming it is an export from ArcView done by shapelib.</para></listitem><listitem><para>OPTIONAL:
          --arcview-shp &#60;FILE&#62;</para><para>Parses the edge geometries
          from &#60;FILE_NAME(NO_EXTENSION)&#62;_shp.txt assuming it is an
          export from ArcView done by shapelib.</para></listitem><listitem><para>OPTIONAL:
          --arcview-dbf &#60;FILE&#62;</para><para>Parses the edge attributes
          from &#60;FILE_NAME(NO_EXTENSION)&#62;_dbf.txt assuming it is an
          export from ArcView done by shapelib.</para></listitem><listitem><para>OPTIONAL:
          [ --configuration-file | --configuration | -c ] &#60;FILE&#62;</para><para>Specifies
          whether a configuration file shall be loaded</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Output options</title>

          <para><itemizedlist><listitem><para>MANDATORY: [ --output-file |
          --output | -o ] &#60;FILE&#62;</para><para>Defines the file to write
          the computed network into.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Import defaults</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --type | -T ]
          &#60;STRING&#62;</para><para>The name of the default type of edges.
          Default: &#34;Unknown&#34;</para></listitem><listitem><para>OPTIONAL:
          [ --lanenumber | -L ] &#60;INT&#62;</para><para>The number of lanes
          an edge has to use as default. Default: 1</para></listitem><listitem><para>OPTIONAL:
          [ --speed | -S ] &#60;DOUBLE&#62;</para><para>The maximum speed
          allowed on an edge in m/s to use as default. Default: 13.9</para></listitem><listitem><para>OPTIONAL:
          [ --priority | -P ] &#60;INT&#62;</para><para>The default priority
          of an edge. Default: 1</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Computation variables settings</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --capacity-norm | -C
          ] &#60;DOUBLE&#62;</para><para>The value to divide a given capacity
          by to gain the number of lanes. Default: 2000</para></listitem><listitem><para>OPTIONAL:
          [ --min-decel | -D ] &#60;DOUBLE&#62;</para><para>The minimum
          deceleration value for vehicles. Default: 3.0</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Processing options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: --omit-corrupt-edges</para><para>Continues
          with parsing although a corrupt edge occured. This edge is not
          inserted and a warning is printed.</para></listitem><listitem><para>OPTIONAL:
          --flip-y</para><para>Flips the y-position of nodes (and edges) along
          the y=zero-line.</para></listitem><listitem><para>OPTIONAL:
          --speed-in-km</para><para>Parses speed information stored in
          XML-edge definition files as being given in km/h (not m/s as usual)</para></listitem><listitem><para>OPTIONAL:
          --use-laneno-as-priority</para><para>Interprets the number of lanes
          as an edges priority.</para></listitem><listitem><para>OPTIONAL:
          --all-logics</para><para>Computes and saves all possible cliques and
          phases for a traffic light instead of the fastest one only.</para><caution><para><inlinegraphic
          fileref="./gfx/attention_small.gif" format="GIF" /> This process may
          be very time consuming.</para></caution></listitem><listitem><para>OPTIONAL:
          --keep-small-tyellow</para><para>If a given yellow-time is smaller
          than the computed, it is normally replaced by the computed one and a
          warning is printed. Setting this option, you force NETCONVERT to
          keep the given time yellow light shall be shown (for a certain
          signal).</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Report options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --verbose | -v ]</para><para>Prints
          some information about the process during execution.</para></listitem><listitem><para>OPTIONAL:
          [ --suppress-warnings | -W ]</para><para>No warnings will be
          prompted if this option is set.</para></listitem><listitem><para>OPTIONAL:
          [ --print-options | -p ]</para><para>Prints the current option
          settings before the execution starts.</para></listitem><listitem><para>OPTIONAL:
          [ --log-file | -L ] &#60;FILENAME&#62;</para><para>All outputs
          (messages, warnings, errors) will be written to the named file.</para></listitem><listitem><para>OPTIONAL:
          [ --help | -? ]</para><para>Prints possible options.</para></listitem></itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>SUMO-ROUTER Command Line Arguments</title>

        <sect3>
          <title>Input options</title>

          <para><itemizedlist><listitem><para>MANDATORY: [ --net-files | --net
          | -n ] &#60;FILE&#62;</para><para>Informs SUMO-ROUTER to use the
          sumo-network &#60;FILE&#62; for routing.</para><caution><para><inlinegraphic
          fileref="./gfx/attention_small.gif" format="GIF" /> The name
          &#34;net-files&#34; is ambiguous: only one network file can be
          loaded by now.</para></caution></listitem><listitem><para>OPTIONAL:
          [ --weights | -weight-files | -w ] &#60;FILE&#62;</para><para>Prints
          possible options.</para><caution><para><inlinegraphic
          fileref="./gfx/attention_small.gif" format="GIF" /> the name
          &#34;weight-files&#34; is ambigous: only one weight file can be
          loaded by now.</para></caution></listitem><listitem><para>OPTIONAL:
          [ --cell-input | --cell ] &#60;FILE_NAME(NO_EXTENSION)&#62;</para><para>Informs
          SUMO-ROUTER to process the files
          &#60;FILE_NAME(NO_EXTENSION)&#62;.driver and
          &#60;FILE_NAME(NO_EXTENSION)&#62;.rinfo as route definition files</para></listitem><listitem><para>OPTIONAL:
          [ --artemis-input | --artemis ] &#60;PATH&#62;</para><para>Builds
          routes from ARTEMIS-data stored in &#60;PATH&#62;</para></listitem><listitem><para>OPTIONAL:
          [ --sumo-input | --sumo | -s ] &#60;FILE&#62;</para><para>Builds
          routes from previous sumo-routes</para></listitem><listitem><para>OPTIONAL:
          [ --trip-defs | --trips | -t ] &#60;FILE&#62;</para><para>Informs
          SUMO-ROUTER to use the trip definitions stored in &#60;FILE&#62;.
          Such trip definitions may be the output of SUMO-OD2TRIPS or made by
          hand.</para></listitem><listitem><para>OPTIONAL: [ --alternatives |
          -a ] &#60;FILE&#62;</para><para>Uses route alternatives from file;
          See also the documentation on Christian Gawron&#39;s Dynamic User
          Assignment</para></listitem><listitem><para>OPTIONAL: [
          --configuration-file | --configuration | -c ] &#60;FILE&#62;</para><para>Specifies
          whether a configuration file shall be loaded</para></listitem><listitem><para>OPTIONAL:
          [ --random-per-second | -R ] &#60;FLOAT&#62;</para><para>Builds
          additional random routes. The float to give is the number of routes
          to build for a simulation second (may be lower than 1)</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Output options</title>

          <para><itemizedlist><listitem><para>MANDATORY: [ --output-file |
          --output | -o ] &#60;FILE&#62;</para><para>Defines the file to write
          the computed routes into.</para><para>Additionally, a second file
          containing the route alternatives named &#60;FILE&#62;.alt will be
          generated.</para></listitem><listitem><para>OPTIONAL:
          --save-cell-rindex</para><para>The index to each route within the
          FastLane-rinfo file is saved under
          &#60;FILE_NAME(NO_EXTENSION)&#62;.rindex. (Only for
          FastLane-processing)</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Simulation times settings</title>

          <para><itemizedlist><listitem><para>MANDATORY: [ --begin | -b ]
          &#60;UINT&#62;</para><para>A virtual time to specify the begin of
          route computation. Previous routes are skipped.</para></listitem><listitem><para>MANDATORY:
          [ --end | -e ] &#60;UINT&#62;</para><para>A virtual time to specify
          the end of route computation. Later routes are skipped.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Computation variables settings</title>

          <para><itemizedlist><listitem><para>OPTIONAL: --gBeta
          &#60;DOUBLE&#62;</para><para>Gawron&#39;s beta; See also the
          documentation on Christian Gawron&#39;s Dynamic User Assignment.</para><para>Only
          for processing of alternatives.</para></listitem><listitem><para>OPTIONAL:
          --gA &#60;DOUBLE&#62;</para><para>Gawron&#39;s A; See also the
          documentation on Christian Gawron&#39;s Dynamic User Assignment</para><para>Only
          for processing of alternatives.</para><para>A default value is
          supplied.</para></listitem><listitem><para>OPTIONAL: --intel-cell</para><para>Switches
          the byte order within the FastLane-.driver-files</para><para>Only
          for processing of FastLane-routes.</para></listitem><listitem><para>OPTIONAL:
          --no-last-cell</para><para>Use best, not the last cell-route.</para><para>Only
          for processing of FastLane-routes.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Processing options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: --continue-on-unbuild</para><para>Continues
          when a described connection could not be build. The default
          behaviour is to stop with an error.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Report options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --verbose | -v ]</para><para>Prints
          some information about the process during execution.</para></listitem><listitem><para>OPTIONAL:
          [ --suppress-warnings | -W ]</para><para>No warnings will be
          prompted if this option is set.</para></listitem><listitem><para>OPTIONAL:
          [ --print-options | -p ]</para><para>Prints the current option
          settings before the execution starts.</para></listitem><listitem><para>OPTIONAL:
          [ --log-file | -L ] &#60;FILENAME&#62;</para><para>All outputs
          (messages, warnings, errors) will be written to the named file.</para></listitem><listitem><para>OPTIONAL:
          [ --help | -? ]</para><para>Prints possible options.</para></listitem></itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>SUMO-OD2TRIPS Command Line Arguments</title>

        <sect3>
          <title>Input options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --net-file | -n ]
          &#60;FILE&#62;</para><para>The SUMO-network file to use (converted
          from origin)</para></listitem><listitem><para>OPTIONAL: [
          --route-file | -d ] &#60;FILE&#62;</para><para>The file containing a
          single O/D-matrix. VISSIM</para></listitem><listitem><para>To be
          completed...</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Output options</title>

          <para><itemizedlist><listitem><para>MANDATORY: [ --output-file |
          --output | -o ] &#60;FILE&#62;</para><para>Defines the file to write
          the computed trips into.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Time information</title>

          <para><itemizedlist><listitem><para>MANDATORY: [ --begin | -b ]
          &#60;UINT&#62;</para><para>A virtual time for which the computation
          is started. Previous trips are omitted.</para></listitem><listitem><para>MANDATORY:
          [ --end | -e ] &#60;UINT&#62;</para><para>A virtual time for which
          the computation is ended. Further trips are omitted.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Computation variables settings</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --scale | -s ]
          &#60;DOUBLE&#62;</para><para>A scaling value the O/D-matrix is
          scaled with. This value is not depending on values stored within the
          matrix.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Report options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --verbose | -v ]</para><para>Prints
          some information about the process during execution.</para></listitem><listitem><para>OPTIONAL:
          [ --suppress-warnings | -W ]</para><para>No warnings will be
          prompted if this option is set.</para></listitem><listitem><para>OPTIONAL:
          [ --print-options | -p ]</para><para>Prints the current option
          settings before the execution starts.</para></listitem><listitem><para>OPTIONAL:
          [ --log-file | -L ] &#60;FILENAME&#62;</para><para>All outputs
          (messages, warnings, errors) will be written to the named file.</para></listitem><listitem><para>OPTIONAL:
          [ --help | -? ]</para><para>Prints possible options.</para></listitem></itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>SUMO-GUI Command Line Arguments</title>

        <sect3>
          <title>Report options</title>

          <para><itemizedlist><listitem><para>OPTIONAL: [ --max-gl-width | -w
          ] &#60;UINT&#62;</para><para>Specifies the maximum width of an
          openGL window to use. This was implemented to avoid the allocation
          of too large window memory on smaller computers.</para></listitem><listitem><para>OPTIONAL:
          [ --max-gl-height | -h ] &#60;UINT&#62;</para><para>Specifies the
          maximum height of an openGL window to use. This was implemented to
          avoid the allocation of too large window memory on smaller
          computers.</para></listitem><listitem><para>OPTIONAL: [
          --configuration | -c ] &#60;FILENAME&#62;</para><para>If a valid
          configuration is given on the command line, it is loaded directly
          after the window shows up and starts immediately.</para></listitem><listitem><para>OPTIONAL:
          [ --quit-on-end | -Q ]</para><para>Forces the gui to shutdown (the
          window will disappear) when the simulation ends. (A message to
          confirm is still displayed)</para></listitem><listitem><para>OPTIONAL:
          [ --print-options | -p ]</para><para>Prints the current option
          settings before the execution starts.</para></listitem><listitem><para>OPTIONAL:
          [ --help | -? ]</para><para>Prints possible options.</para></listitem></itemizedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Naming Conventions</title>

      <para>To ease the usage of the supplied files, all of which are within a
      XML-derivate, we use a naming convention for the file extensions to
      allow a distinction between the contents with a single look. The list of
      used extensions is showed below. We of course highly encourage you to
      use this pattern, but if you have a better idea, let us know.</para>

      <itemizedlist>
        <listitem>
          <para>Configuration files:<itemizedlist><listitem><para>*.sumo.cfg</para><para>Configuration
          file for SUMO (both command line and GUI-version)</para></listitem><listitem><para>*.netc.cfg</para><para>Configuration
          file for the netconverter/-builder</para></listitem><listitem><para>*.router.cfg</para><para>Configuration
          file for the router</para></listitem><listitem><para>*.od2t.cfg</para><para>Configuration
          file for the O/D to trip converter</para></listitem></itemizedlist></para>
        </listitem>

        <listitem>
          <para>Data files:<itemizedlist><listitem><para>*.net.xml</para><para>sumo
          - network file</para><para>Contents:</para><para>Standard: edges
          with lanes and other attributes; junction definitions;</para><para>Optional:
          all other simulation information</para></listitem><listitem><para>*.log.xml</para><para>sumo
          - junction logics file</para><para>Contents:</para><para>Contents:
          The definitions of junction logics</para></listitem><listitem><para>*.rou.xml</para><para>sumo
          - routes file</para><para>Contents: Standard: vehicle type
          definitions, route definitions, vehicle definitions</para></listitem><listitem><para>*.add.xml</para><para>sumo
          - additional definitions file</para><para>Contents: The definitions
          of detectors to build, sources to build etc.</para></listitem><listitem><para>*.out.xml</para><para>sumo
          - output file</para><para>Contents: The &#34;raw&#34; output with
          edges, lanes and vehicles on them</para></listitem><listitem><para>*.edg.xml</para><para>sumo-netconvert
          - edges file</para><para>Contents: definitions of edges to build the
          network from</para></listitem><listitem><para>*.nod.xml</para><para>sumo-netconvert
          - nodes file</para><para>Contents: definitions of nodes to build the
          network from</para></listitem><listitem><para>*.con.xml</para><para>sumo-netconvert
          - connection file</para><para>Contents: definitions of nodes to
          build the network from</para></listitem></itemizedlist></para>
        </listitem>

        <listitem>
          <para>Other used file types<itemizedlist><listitem><para>*.inp</para><para>VISSIM
          network files</para></listitem><listitem><para>*.net</para><para>VISUM
          network files</para></listitem><listitem><para>Destinations.txt,
          Detectors.txt, Flows.txt, Generators.txt, HVdests.txt,
          Incidents.txt, IntLinks.txt, Lanes.txt, Links.txt, Nodes.txt,
          Project Vars.txt, Signal Groups.txt, Signal Phases.txt, Signals.txt</para><para>ARTEMIS
          input files</para></listitem><listitem><para>*.edg</para><para>CELL
          edge files</para></listitem><listitem><para>*.nod</para><para>CELL
          node files</para></listitem><listitem><para>*.driver</para><para>CELL
          driver files</para></listitem><listitem><para>*.rinfo</para><para>CELL
          route files</para></listitem><listitem><para>*.rindex</para><para>index
          files generated for CELL route files</para></listitem></itemizedlist></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter>
    <title>Example Scenarios</title>

    <sect1>
      <title>Example1: How to generate and simulate a virtual city</title>

      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Used Models</title>

    <sect1>
      <title>Vehicle Model: Krauß-Model</title>

      <para></para>
    </sect1>

    <sect1>
      <title>DUA: Gawron-Model</title>

      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Included Data</title>

    <sect1>
      <title>Configuration File Templates</title>

      <para>You can find the templates for each of the package&#39;s
      application&#39;s configuration files within the folder
      &#34;[SUMO]/data/cfg_templates&#34;.</para>
    </sect1>

    <sect1>
      <title>Included Examples</title>

      <sect2>
        <title>Basic Examples</title>

        <para>Some shorter networks, mainly for testing purposes are included
        and may be found within the &#34;[SUMO]/data/examples&#34; - folder.
        In respect to their shape, they are named &#34;eight...&#34;,
        &#34;cross...&#34; and &#34;box...&#34;. The coarse appearance of
        these networks is shown below.</para>

        <para>You may have noticed, that different networks are supprorted
        with the same name begin. They differ in the number of lanes the edges
        have and whether a possibly existing junction is a simple right-of-way
        or a traffic light junction. The name pattern is as follows [SHAPE]Xl
        for networks with right-of-way junctions, where X is the number of
        lanes and [SHAPE]Xltl for networks with a traffic light. [SHAPE] is
        the name of the coarse shape of the network as shown above.</para>
      </sect2>

      <sect2>
        <title>Example for A Dynamic User Assignment</title>

        <para></para>
      </sect2>

      <sect2>
        <title>I-880 Car Model Validation</title>

        <para>In the middle of 2001 we tried to prove that SUMO is capable to
        be used for car model validation. You can find the project settings
        for this approach. We apologize, that our report was not accurate. Due
        to the lack of a gui, we could only verify statistical results and
        failed to recognize strong artefacts arising from a buggy
        lane-changing implementation.</para>
      </sect2>
    </sect1>
  </chapter>

  <appendix>
    <title>Data Type Descriptions</title>

    <formalpara>
      <title>To do</title>

      <para></para>
    </formalpara>
  </appendix>

  <appendix>
    <title>Error Messages</title>

    <para>Here, only errors that should occur to normal users are reported.
    Some more possible errors exist but should only occur when the network is
    false what should not happen when it was generated by sumo-netconvert. As
    said before, we do not expect a normal user to build a network &#34;by
    hand&#34;. If you are a developer and an error occurs that is not in the
    list below, see into the developer documentation.</para>

    <itemizedlist>
      <listitem>
        <para><errorcode>No option with the name &#39;[NAME]&#39; exists.</errorcode><blockquote><para>You
        are trying to set an option on the command line that is not known to
        sumo.</para><para>You may have dispelled an option. View Appendix A
        for a list of known options and their correct spelling.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The option &#39;[NAME]&#39; is not a boolean
        attribute and so needs a value.</errorcode><blockquote><para>A
        non-boolean option has no parameter supplied. An example: you have
        typed &#34;sumo -n&#34;, but the option &#34;-n&#34; needs a value
        like &#34;-n ./nodes.xml&#34;.</para><para>Always supply a parameter
        for parametrised options.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>A value for the option &#39;[NAME]&#39; was already
        set. Possible synonyms: [SYNONYMS]</errorcode><blockquote><para>You
        are setting an option twice. An example: you have typed &#34;sumo -n
        [FILE1] --net [FILE2]&#34;. This is not possible. A list of possible
        synonyms is supported.</para><para>Set a value only once. When you are
        sure you have specified the value only once on the command line, your
        configuration file may contain two definitions for the value. A value
        may be defined as well in the configuration fine and on he command
        line but never twice in each of them.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The current parameter &#39;[NAME1]&#39; and
        the parameter &#39;[NAME2]&#39; do both need a value.</errorcode><blockquote><para>You
        are trying to use a single value for two parameters. An example:
        &#34;sumo -nj [FILE1]&#34; or &#34;sumo -nj [FILE1] [FILE2]&#34; is
        not allowed as the parameter may not be assigned to either the network
        or the junctions. Only boolean options may be coupled with other
        options.</para><para>Split the options when using parametrised
        options.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The configurations file &#39;[NAME]&#39; could not be
        found.</errorcode><blockquote><para>The name for the configuration
        file is not valid.</para><para>Even if you did not specify a
        configuration file, it is loaded as default. Use the option
        &#34;-C&#34; when you don&#39;t wish to use any configuration file.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The named junctions folder &#39;[NAME]&#39;
        does not exist.</errorcode><blockquote><para>You have specified a
        folder for your junction logics that does not exist.</para><para>You
        have to use a valid folder for your junctions.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: No simulation file (-n) specified.</errorcode><blockquote><para>You
        forgot to specify a file containing the road network to use.
        Attention! The file is not examined to be valid, this error only
        occurs when the user did not give the name of the file. When it is not
        existing or invalid, other errors are produced.</para><para>You have
        to specify a network file using &#34;-n [FILE]&#34; where [FILE] is
        the name of the network file.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The begin of the simulation (-b) is not
        specified.</errorcode><blockquote><para>You forgot to specify the
        begin of the simulation.</para><para>Use &#34;-b [TIME]&#34; to
        specify the simulation-time the simulation shall begin at where [TIME]
        is a numerical value.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The end of the simulation (-e) is not
        specified.</errorcode><blockquote><para>You forgot to specify the end
        of the simulation.</para><para>Use &#34;-e [TIME]&#34; to specify the
        simulation-time the simulation shall end at where [TIME] is a
        numerical value.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The output file &#39;[NAME]&#39; can not be
        build.</errorcode><blockquote><para>The output file can not be build.
        This may be due to trying to save the file into a folder that does not
        exist.</para><para>Use a valid name a file may be created under for
        your output. Check whether the folder you want to generate the file in
        exists.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error during XML-initialisation: [MORE TEXT]</errorcode><blockquote><para>An
        error while the initialisation of the XML-importer occurred.</para><para>In
        fact, this is an error produced by XERCES. The only explanation we
        have is that you are using an inappropriate version of XERCES.
        Remember to use a C++ - XERCES version over 1.5 and fits to your
        system (Windows, Linux, Solaris etc.)</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>An exception occured! Type: UTFDataFormatException,
        Message: invalid byte 2 (L) of a 2-byte-sequence.</errorcode><blockquote><para>Your
        network obviously uses a name that contains non-latin characters.
        Older versions of xerces seemed to work with such names, although
        it&#39;s against the XML-specifications, newer are not. You have to
        convert them within your input files (mainly within the file used to
        build the network) and rebuild the network then.</para><para>If you
        are a programme, you also may take a look at the conversion routine
        within the class <classname>StringUtils</classname> called
        <methodname>convertUmlaute</methodname> and try to patch the values to
        replace within him.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>An XML-error occurred: [MORE TEXT]</errorcode><blockquote><para>Your
        file is corrupt in a way that our XML-importer XERCES is not able to
        parse it. This may happen when you forgot to open a tag before closing
        it or when using non-ASCII characters.</para><para>This error always
        comes with a deeper explanation, so you may find the error quite easy.
        If you do not see any error, you have to look into an XML-description
        or try to load the document into A XML-development tool.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>&#34;Empty route ([NAME])&#34; or &#34;The list
        belonging to the &#39;[TYPE]&#39; with the id &#39;[NAME]&#39; must
        not but is empty&#34;</errorcode><blockquote><para>You have specified
        an empty route. This is not valid.</para><para>Remove the route or
        insert at least one edge into it.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The id of the object [TYPE] is missing in the
        description.</errorcode><blockquote><para>An object from your
        definition which type is given in [TYPE] does not have an id (name).</para><para>Insert
        ids for all used objects.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The description of the object &#39;[TYPE]&#39; with
        the id &#39;[NAME]&#39; is not complete.</errorcode><blockquote><para>At
        least one of the needed values for an object is not given. The type of
        the object is given in [TYPE], it&#39;s name in [NAME]. In the case of
        a vehicle, this could be the type, the route or the depart time. The
        missing of the id is reported by another error message.</para><para>Check
        your file for missing values.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The object [TYPE] with the id [NAME] is not known</errorcode><blockquote><para>You
        have references an object of the type [TYPE] with the name [NAME] that
        you did not define in the file. Such an error may occur when you for
        instance wish to use a vehicle of the type &#34;VW Beetle&#34; but
        have not defined a vehicle type named &#34;VW Beetle&#34;.</para><para>Insert
        a definition for TYPE with the id NAME or use a given id in your file.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Another [TYPE] with the id [NAME] exists</errorcode><blockquote><para>You
        are using an id twice for two objects of the same type.</para><para>All
        objects of a type have to have unique ids.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The list belonging to the &#39;[TYPE]&#39; with the
        id &#39;[NAME]&#39; must not but is empty</errorcode><blockquote><para>The
        information you have specified needs values, you do not havedid not
        supply.</para><para>Supply all needed information.</para></blockquote></para>
      </listitem>
    </itemizedlist>
  </appendix>

  <appendix>
    <title>Known Bugs</title>

    <para>Nothing known by now.</para>
  </appendix>

  <appendix>
    <title>Document Status</title>

    <para></para>
  </appendix>
</book>
