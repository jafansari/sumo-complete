<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<book>
  <bookinfo>
    <title>SUMO - Simulation of Urban MObility - User Documentation</title>

    <author>
      <firstname>Daniel</firstname>

      <surname>Krajzewicz</surname>

      <affiliation>
        <address><email>Daniel.Krajzewicz@dlr.de</email></address>
      </affiliation>
    </author>

    <author>
      <firstname>Christian</firstname>

      <surname>RÃ¶ssel</surname>

      <affiliation>
        <address><email>christian.roessel@dlr.de</email></address>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>
  </bookinfo>

  <toc></toc>

  <chapter id="user_chp01">
    <title>Introduction</title>

    <sect1>
      <title>What is SUMO?</title>

      <para>SUMO is a traffic simulation tool. It was primarily designed for
      urban street networks, but it may also be used for highway traffic
      simulations. In the near future it will be extended to model other
      transit modes simultaneously with ordinary car traffic.</para>
    </sect1>

    <sect1>
      <title>Why open source?</title>

      <para>Two thoughts stood behind the release of the package as open
      source. At first the fact that every traffic research organisation has
      to implement an own simulation package for its own. Some people are
      interested in traffic light optimisation, other try to find mistakes
      made during the design of a road network. Both need some kind of a
      simulation package and have to implement a framework containing input
      and output functions and other things from scratch. So the first idea
      was to give them a basic framework - containing all needed methods for a
      simulation - they can put own ideas into.</para>

      <para>The second idea is to supply a common test bed for models,
      especially car models, to the community to make them comparable. Due to
      different architectures of traffic simulations such comparisons on a
      wide scale are not possible by now.</para>
    </sect1>

    <sect1>
      <title>Features</title>

      <para><itemizedlist spacing="compact"><listitem><para>High portability
      (using standard - c++ and portable libraries only)</para></listitem><listitem><para>Collision
      free vehicle movement</para></listitem><listitem><para>Different vehicle
      types</para></listitem><listitem><para>Single-vehicle routing</para></listitem><listitem><para>Multi-lane
      streets with lane changing</para></listitem><listitem><para>Junction-based
      right-of-way rules</para></listitem><listitem><para>Hierarchy of
      junction types</para></listitem><listitem><para>A fast openGL graphical
      user interface</para></listitem><listitem><para>Dynamic routing</para></listitem><listitem><para>Manages
      networks with several 10.000 edges (streets)</para></listitem><listitem><para>Fast
      execution speed (up to 1.000.000 vehicle updates/s on a 1GHz machine)</para></listitem><listitem><para>Supports
      import of many network formats (Visum, Vissim, ArcView,
      XML-Descriptions)</para></listitem></itemizedlist></para>
    </sect1>

    <sect1>
      <title>About this document</title>

      <para>This document describes how to use each of the applications that
      come with the SUMO-package.</para>

      <para>This document is still under development and is meant to grow with
      the software. Due to this, you may find it together with the sources
      within out repository at sourceforge (<ulink
      url="http://sumo.sourceforge.net">http://sumo.sourceforge.net/</ulink>).
      It should always describe the current version.</para>

      <para>We should remark, that this document only covers the usage of the
      software and some description of the models used. Information about the
      programming side - if you want to extend the software what is really
      appreciated by us - may be found in the programmer manual.</para>

      <para>We should also remark, that the previous division of documents
      where each document described a single application is now abandoned. We
      hope to make the process of simulation easier to understand.</para>
    </sect1>

    <sect1>
      <title>Call for Help</title>

      <para>Please let us know when either the document remains at any point
      unclear or any of the applications does not behave as expected. We also
      seek for some participants and further users, not only to share the
      development tasks, but also to gain some feedback and critics or some
      usage examples.</para>

      <para>Every help is appreciated. Thank you.</para>
    </sect1>
  </chapter>

  <chapter id="user_chp02">
    <title>First Steps: Running the examples</title>

    <sect1>
      <title>Install</title>

      <para>From version 0.8 on, we want not only supply the sources, but also
      the compiled binaries at least for MS Windows and a Linux-derivate.</para>

      <para>At first, You have to decide whether you primary want to use the
      software only or also extend it. In the first case, you should download
      the binaries, appropriate to your operating system. All needed libraries
      will be included and - if necessary - a script should guide you through
      the installation process.</para>

      <para>In the latter case, please download the source distribution and
      compile it for your own. We hope to be able to support two
      distributions, one with all needed libraries included and a second
      without. The description of the building process is found within a
      separate document located <ulink
      url="http://sumo.sourceforge.net/docs/dev_build.html">here</ulink>.</para>

      <para>If you have built the package on a system not included within our
      binary distribution, please let us know and send it to us, so that we
      can include it into the pages.</para>
    </sect1>

    <sect1>
      <title>First Steps</title>

      <para>As SUMO was at first meant to be a command line tool, what means
      that no window pops up if you start it., You have to open a shell window
      first.</para>

      <para>Change into the folder you have extracted the package into, build
      the project if necessary (not needed if you have downloaded the
      binaries) and go further to the &#34;tests&#34;-folder. You will find
      two folders in here &#34;dos&#34; and &#34;unix&#34;. Choose the
      appropriate one (&#34;dos&#34; if your operating system is MSDOS or MS
      Windows, &#34;unix&#34; if it is Linux or UNIX). You will find a set of
      scripts in here that allow you a fast generation and removal of the test
      scenarios. Start &#34;buildExamples&#34; and wait until all networks
      have been built and all route descriptions are computed.</para>

      <para>After everything is build, go back to the packages folder (two
      folders up) and from there to the folder named &#34;bin&#34;. Here you
      will find the executable files, among them a file named
      &#34;gui(.exe)&#34;. Start it. After some seconds, a window will pop up.
      Use &#34;Open...&#34; as usual to open an example scenario. You can find
      the scenarios you have build by running the script in
      &#34;../data/examples/&#34;. As we are not allowed to give networks
      build from digital maps at all, only simple examples are supported.
      After the network is loaded, the main area of the window shall display
      it. Now you can start the simulation by pressing one of the control
      buttons known from other simulations or from any tape media device.</para>
    </sect1>

    <sect1>
      <title>What has happened?</title>

      <para>As briefly mentioned before, you have built some example networks
      and vehicle movements by starting the &#34;makeExamples&#34;-script. To
      allow a better handling of networks during the simulation and save
      computation time, the networks are stored in quite a complicated format,
      which has to be built from more simple representations first. The
      simulation of traffic is also quite complicated as each vehicle is an
      individual within. This requires not only a network that shall be
      simulated, but also a description of the routes the vehicles make. They
      were built, too.</para>

      <para>After both operations - which were performed for all known
      examples within the distribution - both networks and route descriptions
      are ready to be executed.</para>
    </sect1>
  </chapter>

  <chapter id="user_chp03">
    <title>Traffic Simulations and SUMO</title>

    <sect1>
      <title>Some Traffic Simulation Theory</title>

      <sect2>
        <title>Simulation types</title>

        <para>SUMO is a microscopic, space continuous and time discrete
        traffic simulation.</para>

        <para>In traffic research three or four classes of models are
        distinguished according to the level of detail of the simulation. In
        macroscopic models traffic flow is the basic entity. Microscopic
        models simulate the movement of every single vehicle on the street,
        mostly assuming that the behaviour of the vehicle depends on both, the
        vehicle&#39;s physical abilities to move and the driver&#39;s
        controlling behaviour (Krauss 1998; Janz 1998). Sub-microscopic models
        regard single vehicles like microscopic but extend them by modelling
        their substructures, which describe the engine&#39;s rotation speed in
        relation to the vehicle&#39;s speed or the driver&#39;s preferred gear
        switching actions, for instance. This allows more detailed
        computations of the emissions produced by the vehicle compared to a
        simple microscopic simulation (Diekamp 1995; Schreckenberg and Wolf
        1998; Helbig et al. 2001). However, sub-microscopic models require
        large computation times. This restrains the size of the networks to be
        simulated.</para>

        <figure>
          <title>The different simulation granularities; from left to right:
          macroscopic, microscopic, sub-microscopic (within the circle:
          mesoscopic)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/3sims.gif"
              format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Within a space-continuous simulation each vehicle has a certain
        position described by a floating-point number. In contrast,
        space-discrete simulations are a special kind of cellular automata.
        They use cells and vehicles driving on the simulated streets
        &#34;jump&#34; from one cell to another (Brockfeld et al 2001).</para>

        <figure>
          <title>The difference between a space-continuous (top) and a
          space-discrete (bottom) simulation</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/contdisc.gif"
              format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>And there is another difference between the available simulation
        packages. Almost every simulation packages uses an own model for
        vehicle movement. Almost all models are so-called
        &#34;car-following-models&#34;: the behaviour of the driver is herein
        meant to be dependent on his distance to the vehicle in front of him
        and of this vehicle&#39;s speed. Although SUMO is meant to be a test
        bed for such vehicle models, only one is implemented by now, which was
        developed by Stefan Kraus. Other obstacles such as traffic lights are
        of course considered herein, too. Please take a look into &#34;Used
        models&#34; for a more detailed description of the KrauÃ-model.</para>
      </sect2>

      <sect2>
        <title>Needed Data</title>

        <para>What data is needed to simulate traffic? At first, you need the
        network the traffic to simulate takes place on. As SUMO is meant to
        work with large networks, we mainly concentrated our work on importing
        networks and the computation of further needed values. Beside
        information about a network&#39;s roads, information about traffic
        lights is needed.</para>

        <para>Further, you need information of the traffic demand. While most
        traffic simulation use a statistical distribution which is laid over
        the network, each vehicle within SUMO knows its route. Within this
        approach, the route is a list of edges to pass. Although this approach
        is more realistic, it also induces a large amount of data needed to
        describe the vehicle movements. By now, routes are not compressed
        within SUMO and so may be several MB large. We will possibly change
        this in future.</para>
      </sect2>

      <sect2>
        <title>User Assignment</title>

        <para>It seems obvious, that each driver is trying to use to shortest
        path through the network. But when all are trying to do this, some of
        the roads - mainly the arterial roads would get congested and their
        benefit would sink. This problem is known to traffic research as the
        dynamic user assignment. Some approaches have been developed to solve
        this.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>The Workflow of preparing a Simulation</title>

      <para>As shortly described above, you basically have to the following
      steps: generation of the road network and generation of the vehicle
      movements. After this, you can perform your first simulation steps. This
      process is also visualised within the next figure.</para>

      <para>Please remark, that most of the tools are command-line tools by
      now. They do nothing if you just double-click them. Do also notice, that
      we describe the call parameter in the following chapters which may be
      also stored in so-called &#34;configuration files&#34; to allow their
      reuse. This possibility is described on a later place in the document.</para>

      <figure>
        <title>Process of simulation with SUMO; (grey and rounded: data used;
        white: program calls)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="./gfx/user/simsteps1.gif"
            format="GIF" scale="1" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect1>

    <sect1>
      <title>Main Software Paradigms</title>

      <para>Two basic design goals are approached: the software shall be fast
      and it shall be portable. Due to this, the very first versions were
      developed to be run from the command line - no graphical interface was
      supplied at first and all parameter had to be inserted by hand. Also,
      due to these goals, the software was split into several parts. Each of
      them has a certain purpose and must be run individually. This is
      something that makes SUMO different to other simulation packages where
      the dynamical user assignment is made within the simulation itself, not
      via an external application like here.</para>

      <para>The split allows an easier extension of the application&#39;s part
      as they small enough and it also allows the usage of faster data
      structures, each adjusted to the current purpose, instead of using
      complicated and ballast-loaded ones. Still, this makes the usage of SUMO
      a little bit uncomfortable in comparison to other simulation packages.
      As there are still other things to do, we are not thinking of a redesign
      towards an integrated approach by now.</para>
    </sect1>
  </chapter>

  <chapter id="user_chp04">
    <title>Network Generation</title>

    <para>As SUMO uses an own road network description, normally networks must
    be generated from an existing dataset. The only exception is that someone
    already possesses build SUMO-networks, normally having the extension
    *.net.xml. Although being readable (xml) by human beings, the format of
    the road network used by SUMO is not meant to be edited by a human being
    and will also not be described herein due to its complexity. Take a look
    into the developer documentation if you want more information about this,
    please.</para>

    <para>Having data describing the network, you may convert them into a
    network description readable by SUMO using the SUMO-NETCONVERT tool. By
    now, SUMO-NETCONVERT is capable to parse the following formats:</para>

    <para><itemizedlist spacing="compact"><listitem><para>ptv VISUM (a
    macroscopic traffic simulation package)</para></listitem><listitem><para>ptv
    VISSIM (a microscopic traffic simulation package)</para></listitem><listitem><para>ARTEMIS
    by Prof. Peter Hidas (a microscopic traffic simulation package)</para></listitem><listitem><para>CELL
    by Christian Gawron (a mesoscopic traffic simulation package)</para></listitem><listitem><para>ARCVIEW-data
    base files</para></listitem><listitem><para>XML-descriptions</para></listitem></itemizedlist></para>

    <para>In most of these cases, SUMO-NETCOVERT needs only two parameter: the
    name of the input format followed by the name of the file and the name of
    the output format. If you want to import a file generated by the VISUM
    simulation package, simply write the following:</para>

    <blockquote>
      <para>netconvert(.exe) --visum=MyVisumNet.inp
      --output-file=MySUMOFile.net.xml</para>
    </blockquote>

    <para>Please note, that SUMO-NETCONVERT has to be started from the command
    line. There is no graphical interface available, yet.</para>

    <para>The only exception to this rule occurs if you want to use
    XML-descriptions of the network and we will describe this a little bit
    more detailed, now. This is the common way to build own networks.</para>

    <para>Here, again a figure may explain what to do beside the descriptions
    given next.</para>

    <figure>
      <title>Building a network</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="./gfx/user/simsteps-netconv.gif"
          format="GIF" />
        </imageobject>
      </mediaobject>
    </figure>

    <sect1>
      <title>Building Networks from own XML-descriptions</title>

      <para>All of examples within the distribution were made by hand. For
      doing this, you need at least two files: one file for nodes and another
      one for the streets between them. Please notice that we use both names
      &#34;node&#34; and &#34;junction&#34; the same way. <caution><para>Please
      read also the chapter &#34;General comments on import of networks
      without traffic light logics&#34;</para></caution></para>

      <sect2>
        <title>Nodes description</title>

        <para>Within the nodes-files, normally named MyNodes.nod.xml, every
        node is described in a single line which looks like this:
        <sgmltag>&#60;node id=&#34;<replaceable>&#60;STRING&#62;</replaceable>&#34;
        x=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34; y=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;
        [type=&#34;<replaceable>&#60;TYPE&#62;</replaceable>&#34;]/&#62;</sgmltag>
        - the straight brackets (&#39;[&#39; and &#39;]&#39;) indicate that
        the parameter is optional. Each of these attributes has a certain
        meaning and value range:</para>

        <para><itemizedlist><listitem><para><sgmltag>id</sgmltag>: The name of
        the node; may be any character string</para></listitem><listitem><para><sgmltag>x</sgmltag>:
        The x-position of the node on the plane in m; must be a floating point
        number</para></listitem><listitem><para><sgmltag>y</sgmltag>: The
        y-position of the node on the plane in m; must be a floating point
        number</para></listitem><listitem><para><sgmltag>type</sgmltag>: An
        optional type for the node. If you leave out the type of the node, it
        is automatically guessed by SUMO-NETCOVERT but may not be the one you
        intentionally thought of. The following types are possible, any other
        string is counted as an error and will yield in a program stop:</para><itemizedlist><listitem><para><sgmltag>priority</sgmltag>:
        Vehicles have to wait until vehicles right to them have passed the
        junction. This is a very common scheme within Germany.</para></listitem><listitem><para><sgmltag>traffic_light</sgmltag>:
        The junction is controlled by a traffic light.</para></listitem></itemizedlist><para>We
        do not have implemented the american way of giving way on junctions
        that are not controlled by a traffic light. It is also not possible to
        describe the parameter of the traffic light at this level.</para></listitem></itemizedlist>
        When writing your nodes-file, please do not forget to embed your node
        definitions into an opening and a closing &#34;tag&#34;. A complete
        file should like the example below, which is the node file for the
        &#34;cross1ltl&#34; example. And you may also take a look into our
        examples using a simple text editor.</para>

        <para><sgmltag>&#60;nodes&#62; &#60;!-- The opening tag --&#62;</sgmltag></para>

        <para><sgmltag> &#60;node id=&#34;0&#34; x=&#34;0.0&#34;
        y=&#34;0.0&#34; type=&#34;traffic_light&#34;/&#62; &#60;!-- definition
        of node &#34;0&#34; --&#62;</sgmltag></para>

        <para><sgmltag> &#60;node id=&#34;1&#34; x=&#34;-500.0&#34;
        y=&#34;0.0&#34; type=&#34;priority&#34;/&#62; &#60;!-- definition of
        node &#34;1&#34; --&#62;</sgmltag></para>

        <para><sgmltag> &#60;node id=&#34;2&#34; x=&#34;+500.0&#34;
        y=&#34;0.0&#34; type=&#34;priority&#34;/&#62; &#60;!-- definition of
        node &#34;2&#34; --&#62; </sgmltag></para>

        <para><sgmltag> &#60;node id=&#34;3&#34; x=&#34;0.0&#34;
        y=&#34;-500.0&#34; type=&#34;priority&#34;/&#62; &#60;!-- definition
        of node &#34;3&#34; --&#62; </sgmltag></para>

        <para><sgmltag> &#60;node id=&#34;4&#34; x=&#34;0.0&#34;
        y=&#34;+500.0&#34; type=&#34;priority&#34;/&#62; &#60;!-- definition
        of node &#34;4&#34; --&#62; </sgmltag></para>

        <para><sgmltag>&#60;/nodes&#62; &#60;!-- The closing tag --&#62;</sgmltag></para>

        <para>As you may notice, only the first node named &#34;0&#34;, which
        is the node in the middle of the network, is a traffic light
        controlled junction. All other nodes are uncontrolled. You may also
        notice, that each of both ends of a street needs an according node.
        This is not really necessary as you may see soon, but it eases the
        understanding of the concept: every edge (road) is a connection
        between two nodes.</para>

        <para>You should also know something about the coordinate system: the
        higher a node on the screen shall be (the nearer to the top of your
        monitor), the higher his y-value must be. The more to left it shall
        be, the higher his x-value.</para>

        <figure>
          <title>Coordinate system used in SUMO</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
              fileref="./gfx/user/basic_coordinates.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>Edges description</title>

        <para>Edges are described quite the same way as nodes, but possesses
        other parameter. Within the edges file, each description of a single
        edge looks like this: <sgmltag>&#60;edge id=&#34;<replaceable>&#60;STRING&#62;</replaceable>&#34;
        (fromnode=&#34;<replaceable>&#60;NODE_ID&#62;</replaceable>&#34;
        tonode=&#34;<replaceable>&#60;NODE_ID&#62;</replaceable>&#34; |
        xfrom=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34; yfrom=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;
        xto=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34; yto=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;)
        [(type=&#34;<replaceable>&#60;STRING&#62;</replaceable>&#34; |
        nolanes=&#34;<replaceable>&#60;INT&#62;</replaceable>&#34; speed=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;
        priority=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;
        length=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;)]
        [shape=&#34;<replaceable>&#60;2D_POINT&#62; </replaceable>[
        <replaceable>&#60;2D_POINT&#62;</replaceable>]*
        <replaceable>&#60;2D_POINT&#62;</replaceable>&#34;]
        [spread_type=&#34;center&#34;]/&#62;</sgmltag>.</para>

        <para>What does it mean? Every one who knows how XML-files look like
        should have noticed brackets (&#39;(&#39; and &#39;)&#39;) and pipes
        (&#39;|&#39;) within the definition and these characters are not
        allowed within XML... What we wanted to show which parameter is
        optional. So for the definition of the origin and the destination
        node, you can either give their names using <sgmltag>fromnode=&#34;<replaceable>&#60;NODE_ID&#62;</replaceable>&#34;
        tonode=&#34;<replaceable>&#60;NODE_ID&#62;</replaceable>&#34;
        </sgmltag>or you give their positions using <sgmltag>xfrom=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;
        yfrom=&#34;<replaceable>&#60;FLOAT&#62;</replaceable> xto=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;
        yto=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;</sgmltag>. In
        the second case, a node will be build automatically at the given
        positions. Each edge is unidirectional and starts at the &#34;<sgmltag>from</sgmltag>&#34;-node
        and ends at the &#34;<sgmltag>to</sgmltag>&#34;-node. If a name of one
        of the nodes can not be dereferenced - no node with the name is found
        - an error is generated.</para>

        <para>For each edge, some further attributes should be supplied, being
        the number of lanes the edge has, the maximum speed allowed on the
        edge, the length the edge has (in meters) and a priority value. These
        values - beside the length in fact - may either be given explicitly
        for each edge using according attributes or they may reference a &#34;<sgmltag>type</sgmltag>&#34;.
        In this case, you should also write a type-file which format will be
        described within the next chapter and give each edge within your edge
        file a reference to a type within your type file using the name of the
        type to use. A type with this name should of course be within the
        generated type-file, otherwise an error is reported. You may also
        leave the edge parameter of. In this case, default-values will be used
        and the edge will have a single lane, a priority of 0 (zero) and the
        maximum allowed speed on this edge will be 13.9m/s being around
        50km/h. The length of this edge will be computed as the distance
        between the starting and the end point.</para>

        <para>As an edge may have a more complicated geometry, especially when
        it is a highway off road, you may supply the edge&#39;s shape within
        the shape tag. If the length of the edge is not given otherwise, the
        distances of the shape elements will be summed.</para>

        <para>The information <sgmltag>spread_type=&#34;center&#34; </sgmltag>forces
        NETCONVERT to spread lanes to both sides of the connection between the
        begin node and the end node or from the list of lines making up the
        shape. If not given, lanes are spread to right, as default.</para>

        <para>Let&#39;s list an edge&#39;s attributes again:</para>

        <para><itemizedlist spacing="compact"><listitem><para><sgmltag>id</sgmltag>:
        The name of the edge; may be any character string</para></listitem><listitem><para>Origin
        and destination node descriptions</para><para>Either:</para><itemizedlist><listitem><para><sgmltag>fromnode</sgmltag>:
        The name of a node within the nodes-file the edge shall start at</para></listitem><listitem><para><sgmltag>tonode</sgmltag>:
        The name of a node within the nodes-file the edge shall end at</para></listitem></itemizedlist><para>or:</para><itemizedlist><listitem><para><sgmltag>xfrom</sgmltag>:
        The x-position of the node the edge shall start at in m; must be a
        floating point number</para></listitem><listitem><para><sgmltag>yfrom</sgmltag>:
        The y-position of the node the edge shall start at in m; must be a
        floating point number</para></listitem><listitem><para><sgmltag>xto</sgmltag>:
        The x-position of the node the edge shall end at in m; must be a
        floating point number</para></listitem><listitem><para><sgmltag>yto</sgmltag>:
        The y-position of the node the edge shall end at in m; must be a
        floating point number</para></listitem></itemizedlist></listitem><listitem><para>Descriptions
        of the edge&#39;s type and atomic attributes:</para><para>Either:</para><itemizedlist><listitem><para><sgmltag>type</sgmltag>:
        The name of a type within the types-file</para></listitem></itemizedlist><para>or:</para><itemizedlist><listitem><para><sgmltag>nolanes</sgmltag>:
        The number of lanes of the edge; must be an integer value</para></listitem><listitem><para><sgmltag>speed</sgmltag>:
        The maximum speed allowed on the edge in m/s; must be a floating point
        number</para></listitem><listitem><para><sgmltag>priority</sgmltag>:
        The priority of the edge; must be an integer value</para></listitem><listitem><para><sgmltag>length</sgmltag>:
        The length of the edge in meter; must be an float value</para></listitem></itemizedlist></listitem><listitem><para>The
        edges shape:</para><itemizedlist><listitem><para><sgmltag>shape</sgmltag>:
        List of positions; each position is encoded in x,y (do not separate
        the numbers with a space!) in meters; an edge&#39;s shape definition
        must of course be at least two positions long; an example:
        shape=&#34;0,0 0,100&#34; describes a vertical edge of one hundred
        meters.</para></listitem><listitem><para><sgmltag>spread_type</sgmltag>:
        The description of how to spread the lanes; center spreads lanes to
        both directions of the shape, any other value to right.</para></listitem></itemizedlist></listitem></itemizedlist>
        The priority plays a role during the computation of the way-giving
        rules of a node. Larger values for the priority of an edge allow
        vehicles using it to pass without waiting - if no traffic light is on
        the node.</para>

        <para>Even if you supply a type, you can still override the so set
        values by supplying any of the parameter <sgmltag>nolanes</sgmltag>,
        <sgmltag>speed</sgmltag> and <sgmltag>priority</sgmltag>.</para>

        <para>Also the definitions of the edges must be embedded into an
        opening and a closing tag and for the example &#34;cross1ltl&#34; the
        whole edges-file looks like this:</para>

        <para><sgmltag>&#60;edges&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;1i&#34; fromnode=&#34;1&#34;
        tonode=&#34;0&#34; type=&#34;25&#34;/&#62; &#60;!-- incoming edge 1
        --&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;1o&#34; fromnode=&#34;0&#34;
        tonode=&#34;1&#34; type=&#34;51&#34;/&#62; &#60;!-- outgoing edge 1
        --&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;2i&#34; fromnode=&#34;2&#34;
        tonode=&#34;0&#34; type=&#34;25&#34;/&#62; &#60;!-- incoming edge 2
        --&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;2o&#34; fromnode=&#34;0&#34;
        tonode=&#34;2&#34; type=&#34;51&#34;/&#62; &#60;!-- outgoing edge 2
        --&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;3i&#34; fromnode=&#34;3&#34;
        tonode=&#34;0&#34; type=&#34;25&#34;/&#62; &#60;!-- incoming edge 3
        --&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;3o&#34; fromnode=&#34;0&#34;
        tonode=&#34;3&#34; type=&#34;51&#34;/&#62; &#60;!-- outgoing edge 3
        --&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;4i&#34; fromnode=&#34;4&#34;
        tonode=&#34;0&#34; type=&#34;25&#34;/&#62; &#60;!-- incoming edge 4
        --&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;4o&#34; fromnode=&#34;0&#34;
        tonode=&#34;4&#34; type=&#34;51&#34;/&#62; &#60;!-- outgoing edge 4
        --&#62;</sgmltag></para>

        <para><sgmltag>&#60;/edges&#62;</sgmltag></para>

        <para>As you see, we have used references to road types and to
        junctions, here.</para>

        <caution>
          <para>There are some constraints about the streets&#39; ids. They
          must not contain any of the following characters: &#39;_&#39;
          (underline - used for lane ids), &#39;[&#39; and &#39;]&#39; (used
          for enumerations), &#39; &#39; (space - used as list divider),
          &#39;*&#39; (star, used as wildcard), &#39;:&#39; (used as marker
          for internal lanes).</para>
        </caution>
      </sect2>

      <sect2>
        <title>Types description</title>

        <para>Road types are meant to be used to ease the definition of edges.
        As described above, the description of an edge should include
        information about the number of lanes, the maximum speed allowed on
        this edge and the edge&#39;s priority. To avoid the explicit
        definition of each parameter for every edge, one can use road types,
        which encapsulate parameter under a given name, the road type, which
        instead may be used on describing the edge.</para>

        <para>Due to the usage, the attributes are of course exactly the same
        as for edges themselves:</para>

        <para><itemizedlist spacing="compact"><listitem><para><sgmltag>id</sgmltag>:
        The name of the road type; may be any character string</para></listitem><listitem><para><sgmltag>nolanes</sgmltag>:
        The number of lanes of the referencing must be an integer value</para></listitem><listitem><para><sgmltag>speed</sgmltag>:
        The maximum speed allowed on the referencing edge in m/s; must be a
        floating point number</para></listitem><listitem><para><sgmltag>priority</sgmltag>:
        The priority of the referencing edge; must be an integer value</para></listitem></itemizedlist>The
        information about the nodes the edge starts and ends at is not given
        within the types&#39; descriptions. They can only be set within the
        edge&#39;s attributes.</para>

        <para>Within the previous edge input file example, two references to
        type definitions were used, &#34;25&#34; and &#34;51&#34;. You can
        find the definitions themselves within the file
        &#34;std_types.xml&#34; within the &#34;data/types&#34; - folder. They
        are:</para>

        <para><sgmltag>&#60;types&#62;</sgmltag></para>

        <para>... some other types ...</para>

        <para><sgmltag> &#60;type id=&#34;25&#34; priority=&#34;78&#34;
        nolanes=&#34;1&#34; speed=&#34;19.444&#34;/&#62;</sgmltag></para>

        <para>... some other types ...</para>

        <para><sgmltag> &#60;type id=&#34;51&#34; priority=&#34;46&#34;
        nolanes=&#34;1&#34; speed=&#34;11.111&#34;/&#62;</sgmltag></para>

        <para>... some other types ...</para>

        <para><sgmltag>&#60;/types&#62;</sgmltag></para>

        <para>This snippet has the following meaning: every incoming street
        which is every street that ends at node &#34;0&#34;, is of the type
        named &#34;25&#34;. This type sets the edge&#39;s maximum speed to
        19.444m/s being around 70km/h and the edge&#39;s priority to 78. All
        edges of this type will have one lane - unless not overwritten within
        the edge definition what is not done, here.</para>

        <para>All outgoing edges (those starting at node &#34;0&#34;) or of
        the type &#34;51&#34;, so being roads where 11.111m/s (~40km/h) is the
        maximum speed. They also have one lane and their priority is
        &#34;46&#34;.</para>
      </sect2>

      <sect2>
        <title>Connection descriptions</title>

        <para>If you have tried the version 0.7 you have possibly missed the
        possibility to specify the connections between the edges for yourself.
        This is possibly using a further file, the connections file. The
        connection file specifies which edges outgoing from a junction may be
        reached by a certain edge incoming into this junction and optionally
        also which lanes shall be used on both sides.</para>

        <para>If you only want to describe which edges may be reached from a
        certain edge, this definition could look something like this:
        <sgmltag>&#60;connection from=&#34;<replaceable>&#60;FROM_EDGE_ID&#62;</replaceable>&#34;
        to=&#34;<replaceable>&#60;T0_EDGE_ID&#62;</replaceable>&#34;/&#62;</sgmltag>.
        This tells the netconverter not only that vehicles shall be allowed to
        drive from the edge named <sgmltag><replaceable>&#60;FROM_EDGE_ID&#62;</replaceable></sgmltag>
        to the edge named <sgmltag><replaceable>&#60;TO_EDGE_ID&#62;</replaceable></sgmltag>,
        but also prohibits all movements to other edges from
        <sgmltag><replaceable>&#60;FROM_EDGE_ID&#62;</replaceable></sgmltag>,
        unless they are specified within this file. Let&#39;s repeat the
        parameters:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>from</sgmltag>: The name of the edge the vehicles
            leave</para>
          </listitem>

          <listitem>
            <para><sgmltag>to</sgmltag>: The name of the edge the vehicles may
            reach when leaving &#34;from&#34;</para>
          </listitem>
        </itemizedlist>

        <para>When using this kind of input, NETCONVERT will compute which
        lanes shall be used if any of the connected edges has more than one
        lane.</para>

        <para>If you also want to explicitly override this computation and set
        the lanes by hand, use the following: <sgmltag>&#60;connection
        from=&#34;&#60;FROM_EDGE_ID&#62;&#34;
        to=&#34;&#60;T0_EDGE_ID&#62;&#34;
        lane=&#34;&#60;INT_1&#62;:&#60;INT_2&#62;&#34;/&#62;</sgmltag>. Here,
        a connection from the edge&#39;s &#34;<sgmltag><replaceable>&#60;FROM_EDGE_ID&#62;</replaceable></sgmltag>&#34;
        lane with the number <sgmltag><replaceable>&#60;INT_1&#62;</replaceable></sgmltag>
        is build to the lane <sgmltag><replaceable>&#60;INT_2&#62;</replaceable></sgmltag>
        of the edge &#34;<sgmltag><replaceable>&#60;TO_EDGE_ID</replaceable>&#62;</sgmltag>&#34;.
        Lanes are counted from the right (outer) to the left (inner) side of
        the road beginning with 0. Again the parameter:</para>

        <para><itemizedlist spacing="compact"><listitem><para><sgmltag>from</sgmltag>:
        The name of the edge the vehicles leave</para></listitem><listitem><para><sgmltag>to</sgmltag>:
        The name of the edge the vehicles may reach when leaving
        &#34;from&#34;</para></listitem><listitem><para><sgmltag>lane</sgmltag>:
        the numbers of the connected lanes, separated with &#39;:&#39;; lanes
        are counter from right to left beginning with 0</para></listitem></itemizedlist>Warning:
        Please do not use both connection declarations for the same from-edge!
        The behaviour is not verified and tested for these settings.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Converting other input data</title>

      <para>Large maps cannot be inserted by hand. We use maps from NavTech
      stored in the ArcView database format and maps from other simulation
      suppliers such as ptv within our projects and both are too large for
      this. We will now explain how to convert such data. We will not give any
      introduction into those formats/simulations themselves or compare their
      quality, look out for other sources of information on this, but we will
      also describe what is being imported and what problems may arise during
      the conversion.</para>

      <sect2>
        <title>Importing ArcView-databases</title>

        <para>The first attempt to import ArcView-databases was to convert
        them into a textual representation first using shapelib and then to
        convert them into SUMO-networks using SUMO-NETCONVERT equipped with a
        matching importer for files generated by shapelib. This has changed in
        the late 2003 and now the binary &#34;.dbf&#34;- and
        &#34;.shp&#34;-files can be imported directly. The user may either
        give the names for both files separately using the <option>--arcview-shp=&#60;SHP_FILE&#62;</option>
        and the <option>--arcview-dbf=&#60;DBF_FILE&#62;</option> - options or
        use the <option>--arcview=&#60;FILENAME_WITHOUT_EXTENSION&#62;</option>
        option. In the second case, the extensions &#34;.dbf&#34; and
        &#34;.shp&#34; will be appended to the given name in order to get the
        real files names. So both versions do the same:</para>

        <blockquote>
          <para>netconvert(.exe) --arcview-dbf=myArcViewData.dbf
          --arcview-shp=myArcViewData.shp --output-file=MySUMOFile.net.xml</para>
        </blockquote>

        <para>and:</para>

        <blockquote>
          <para>netconvert(.exe) --arcview=myArcViewData
          --output-file=MySUMOFile.net.xml</para>
        </blockquote>

        <para><caution><para>Please remark that the possibility to import
        shapelib output files is not longer supperted using the
        <option>--arcview</option>-option.</para></caution></para>

        <para>Some remarks:</para>

        <para>Each of the maps we&#39;ve got from NavTech, being encoded in
        the ArcView database format, describes an area of a single state or
        federal state. This is much too large for our purposes, as we are
        mainly interested in urban traffic. In fact, we have not tried out
        which resources are needed to perform the simulation of a single
        German federal state with SUMO, although this should be possible at
        all.</para>

        <para>Due to this, one has at first to extract an area of interest.
        Our first approaches to do this by using postal numbers is not as
        sophisticated as firstly though to be: some interesting parts of the
        cities, above all major highways do not belong to the postal code area
        of the regarded city (Magdeburg and Munich within this test).</para>

        <para><caution><para>Due to their size, import of ArcView data may
        need a long time.</para></caution></para>

        <para><caution><para>Please read also the chapter &#34;General
        comments on import of networks without traffic light logics&#34;</para></caution></para>

        <para>Known problems:</para>

        <itemizedlist>
          <listitem>
            <para>The junctions are not assigned to proper types</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2>
        <title>Importing Artemis-simulation folders</title>

        <para>To import Artemis-network descriptions, start SUMO-NETCONVERT
        with the following parameter:</para>

        <blockquote>
          <para>netconvert(.exe) --artemis=&#60;PATH&#62;
          --output-file=MySUMOFile.net.xml</para>
        </blockquote>

        <para>This should build the network &#34;<filename>MySUMOFile.net.xml</filename>&#34;
        which contains the build network that may be used by SUMO.
        <option><replaceable>&#60;PATH&#62;</replaceable></option> is the path
        to (the name of) the folder that contains the files that make up the
        description of an ARTEMIS-simulation.</para>

        <para>Imported information:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Nodes (id, position, type)</para>
          </listitem>

          <listitem>
            <para>Links (origin, destination, id, speed, number of lanes,
            length)</para>
          </listitem>

          <listitem>
            <para>Signals</para>
          </listitem>

          <listitem>
            <para>Signal Groups (node id, group, connection, start &#38; end
            phase)</para>
          </listitem>

          <listitem>
            <para>Signal Phases (node id, start, phase, percentage)</para>
          </listitem>

          <listitem>
            <para>Segments (link, position on link, geometrical position)</para>
          </listitem>

          <listitem>
            <para>Lanes (lane number, section number, begin and end position)</para>
          </listitem>

          <listitem>
            <para>HVdests (origin and destination lane)</para>
          </listitem>
        </itemizedlist>

        <para>We have to import the HVdests to know which sources and sinks we
        have to build.</para>

        <para>Known problems:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>The connections between lanes may be not the same as in the
            input</para>
          </listitem>

          <listitem>
            <para>The positions of the lanes are not correct</para>
          </listitem>

          <listitem>
            <para>The times the traffic lights switch at may not be the same
            as within the input</para>
          </listitem>

          <listitem>
            <para>Additional source and sink links must be build</para>
          </listitem>

          <listitem>
            <para>Possible speed changes at segments are not supported</para>
          </listitem>
        </itemizedlist>

        <para>Artemis simulation description also holds definitions of the
        traffic flows to use. They are not parsed by the SUMO-NETCONVERT -
        module, but may be passed to SUMO-ROUTER to gain the according routes.</para>
      </sect2>

      <sect2>
        <title>Importing Cell/Fastlane-networks</title>

        <para>FastLane, developed at the ZAIK, is a mesoscopic traffic
        simulation. The network description consists of a file containing
        edges and a second one containing nodes. Due to this, you need to
        supply two values as input parameter and the call looks like this:</para>

        <blockquote>
          <para>netconvert(.exe) --cell-nodes=<replaceable>&#60;CELL_NODE_FILE&#62;</replaceable>
          --cell-edges=<replaceable>&#60;CELL_EDGE_FILE&#62;</replaceable>
          --output-file=<replaceable>MySUMOFile.net.xml</replaceable></para>
        </blockquote>

        <para>Of course, both files must belong to the same network.</para>

        <para>Known problems:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>All junctions are interpreted as priority-junctions</para>
          </listitem>

          <listitem>
            <para>The number of a street&#39;s lanes is not computed from the
            flows, it must be given</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2>
        <title>Importing VISSIM-networks</title>

        <para>Although Vissim is a microscopic simulation as SUMO is, it
        follows a completely different concept of modelling traffic. Due to
        this, the import is quite clumsy and may not work with all networks.
        Also, we have to insert additional edges into our networks to simulate
        the Vissim-parking places, originally being nodes, which we do not
        have.</para>

        <para>Known problems:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Works with German networks only</para>
          </listitem>

          <listitem>
            <para>All actuated traffic lights are mapped onto the same type of
            traffic light (MSActuatedTrafficLight)</para>
          </listitem>

          <listitem>
            <para>Additional source and sink links must be build</para>
          </listitem>
        </itemizedlist>

        <para>An usage example could be this one:</para>

        <blockquote>
          <para>netconvert(.exe) --vissim=<replaceable>&#60;VISSIM_FILE&#62;</replaceable>
          --output-file=<replaceable>MySUMOFile.net.xml</replaceable></para>
        </blockquote>

        <para>As Vissim-networks do not hold explicit definitions of an
        edge&#39;s speed, we have to use the vehicle flow definitions. Two
        parameter control this process. &#34;<option>--vissim-default-speed</option>&#34;
        is the definition of the speed limit to use when no information is
        available in m/s. The default value for this parameter is 50km/h. The
        second parameter &#34;<option>--vissim-speed-norm</option>&#34;
        describes the factor to multiply a described flows maximum velocity to
        gain the velocity to use.</para>

        <para>During import, different actions must be done which may yield in
        some loss of data and may be watched in part by setting the verbose
        option. The additional warnings will be described in a further
        document.</para>
      </sect2>

      <sect2>
        <title>Importing VISUM-networks</title>

        <para>Visum is a macroscopic simulation developed by ptv. As the
        network description does not possess any information about the number
        of lanes, we have to generate it from the street&#39;s flow. The
        computation is done by dividing the flow through a fix value, 2000 by
        default. This yields in a realistic network but fails on &#39;feeder
        roads&#39; where vehicles are emitted. Some further parameter allow
        fixing the problem.</para>

        <para>An usage example could be this one:</para>

        <blockquote>
          <para>netconvert(.exe) --visum=<replaceable>&#60;VISUM_FILE&#62;</replaceable>
          --output-file=<replaceable>MySUMOFile.net.xml</replaceable></para>
        </blockquote>
      </sect2>

      <sect2>
        <title>General comments on import of networks without traffic light
        logics</title>

        <para>Some of the supported network formats - Visum, Vissim and
        Artemis, supply information about the logic of the traffic lights. The
        others do not. Due to this, we have to compute the traffic lights by
        our own. This is working, but one has to remind one thing: dead times
        are necessary to avoid collisions of vehicles which do not manage to
        break as they are too near to the traffic light when it switches to
        red. This time may be computed, and is, but depends on the maximum
        deceleration possibility of the vehicles used. As this parameter is
        not known to the network builder at all - the vehicle types are
        supported to the simulation only - we added a parameter that allows
        specifying it:</para>

        <para><option>--min-decel (-D) <replaceable>&#60;DOUBLE&#62;</replaceable></option></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Automatic network generation</title>

      <para>NETGEN allows building of easy networks. In dependence to what is
      wished, three types of networks can be built. All of them are very
      sophisticated, but may be used as examples. You are also greatly invited
      to extend the concepts. Available types are: grid-networks,
      spider-networks and random-networks.</para>

      <para>Beside the parameter describing the thing to build more precise,
      you always have to supply the name of the network to generate using
      <option>--output &#60;FILENAME&#62;</option> or <option>-o
      <replaceable>&#60;FILENAME&#62;</replaceable></option> for short and
      also the type of network you want to create. So, exactly one of the
      following switches must be supported: <option>--grid-net</option>,
      <option>--spider-net</option> or <option>--random-net</option>.</para>

      <para>While the type-dependent options are described within the next
      chapters, all types share some command line options. As all networks
      possess junctions and some investigations on traffic light switching
      strategies have been made, here, you are able to set the default type of
      junctions to build using the <option>--default-junction-type</option>-option
      (or <option>-j</option> for short). The following junction types are
      allowed in accordance to the junction types currently known by the
      simulation: <option>priority</option>, <option>traffic_light</option>,
      <option>actuated</option>, <option>agentbased</option>.</para>

      <para><caution><para><option>traffic_light</option> will be mapped to
      &#34;static&#34; within the generated network.</para></caution></para>

      <para>Further, you can specify the default street type by using the same
      options as in the netconvert-application.</para>

      <sect2>
        <title>Grid-like networks</title>

        <para>You are able to describe how many junctions in x- and in
        y-direction you want to be build and how far from each other they
        should be. The parameter for the number of junctions are
        <option>--grid-x-number</option> and <option>--grid-y-number</option>,
        the ones for the distance between the junctions <option>--grid-x-length</option>
        and <option>--grid-y-length</option>. If you want to build networks
        which have the same values for both axes, use <option>--grid-number</option>
        and <option>--grid-length</option>. The lengths are given in meters.</para>

        <para>An example usage for building could be:</para>

        <figure>
          <title><command>netgen(.exe) --grid-net --grid-number=10
          --grid-length=400 --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/netgen_grid1.gif"
              format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Another one:</para>

        <figure>
          <title><command>netgen(.exe) --grid-net --grid-x-number=20
          --grid-y-number=5 --grid-y-length=40 --grid-x-length=200
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/netgen_grid2.gif"
              format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>Spider-net-like networks</title>

        <para>Spider-net networks are defined by the number of axes dividing
        them (parameter <option>--spider-arm-number</option> or
        <option>--arms</option>), the number of the circles they are made of (<option>--spider-circle-number</option>
        or <option>--circles</option>) and the distance between the circles (<option>--spider-space-rad</option>
        or <option>--radius</option>).</para>

        <para><caution><para>As the number of edges within the middle of the
        spider net may be quite large, it is often not possible to build a
        traffic light junction here. Due to this, this junction is always a
        right-of-way-junction.</para></caution></para>

        <para>Two examples of usage:</para>

        <figure>
          <title><command>netgen(.exe) --spider-net --spider-arm-number=10
          --spider-circle-number=10 --spider-space-rad=100
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
              fileref="./gfx/user/netgen_spider1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>and:</para>

        <figure>
          <title><command>netgen(.exe) --spider-net --spider-arm-number=4
          --spider-circle-number=3 --spider-space-rad=100
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
              fileref="./gfx/user/netgen_spider2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>Random networks</title>

        <para>The random network generator does just what his name says.
        Several settings may be changed:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><option>--rand-max-distance <replaceable>&#60;FLOAT&#62;</replaceable></option>:
            the maximum edge length</para>
          </listitem>

          <listitem>
            <para><option>--rand-min-distance <replaceable>&#60;FLOAT&#62;</replaceable></option>:
            the minimum edge length</para>
          </listitem>

          <listitem>
            <para><option>--rand-min-angle <replaceable>&#60;FLOAT&#62;</replaceable></option>:
            the minimum angle between two edges</para>
          </listitem>

          <listitem>
            <para><option>--rand-num-tries <replaceable>&#60;FLOAT&#62;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-connectivity <replaceable>&#60;FLOAT&#62;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist1 <replaceable>&#60;FLOAT&#62;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist2 <replaceable>&#60;FLOAT&#62;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist3 <replaceable>&#60;FLOAT&#62;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist4 <replaceable>&#60;FLOAT&#62;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist5 <replaceable>&#60;FLOAT&#62;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist6 <replaceable>&#60;FLOAT&#62;</replaceable></option>:</para>
          </listitem>
        </itemizedlist>

        <para>An example:</para>

        <figure>
          <title><command>netgen(.exe) --random-net -o MySUMOFile.net.xml
          --rand-ite rations=200 --abs-rand</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
              fileref="./gfx/user/netgen_random1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><caution><para>This generator is not yet fully developed.</para></caution></para>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="user_chp05">
    <title>Route Generation</title>

    <para>After having your network converted into the SUMO-format, you could
    take a look at it using the gui-version of the simulation, but no cars
    would be driving around. You still need some kind of description about the
    vehicles. A vehicle consists of three parts: the vehicle itself, its type
    and the route. We will describe this in detail later as most of the step
    needed to generate these descriptions may be done without knowing this.</para>

    <para>If you are importing data from other simulation packages, they bring
    own representations of vehicle movements you can use. In case of using
    ArcView- or own data or in other cases where you do not have the vehicle
    movements at all, you have to generate the movements by your own. We will
    now describe, how to import vehicle movements from other simulations and
    how to build own movement descriptions.</para>

    <para>Before doing this, we want to explain why you possibly need two
    steps to do it: Within the real life single vehicles are using a route the
    driver knows which may be a list of streets the vehicle passes. This is
    quite simple but the amount of data needed to describe this is very large.
    Due to this, vehicle movements are often given as the amount of vehicles
    moving from one point to another point within the network. A point in this
    sense may be a position on the street, but mostly it is something like a
    district or another area. Given such information, you have to generate
    single trips from this so-called OD-matrix (Origin/Destination-matrix)
    using the SUMO-OD2TRIP-tool.</para>

    <figure>
      <title>Building trips from the OD-matrix</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="./gfx/user/simsteps-od2trips.gif"
          format="GIF" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>As trip definitions mostly contain the places the vehicle starts and
    ends his trip at, but not which edges have to be passed, they have to be
    fed into SUMO-ROUTER. This tool computes the list of edges the vehicle
    passes and saves them into a route file.</para>

    <figure>
      <title>Building routes from trips</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="./gfx/user/simsteps-router.gif"
          format="GIF" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>If you are preparing a simulation by your own and not import an
    existing one, you can directly use routes. As supplying information about
    roads and junctions is insufficient to generate districts, this is even
    the only possible way in most cases. Information about how to import
    routes from existing simulations is listed later.</para>

    <para>One application that has been added to the package for 0.8 release
    was the junction turning ratio (jtr-)router. Instead of using a
    description about a vehicles starting end ending point, it uses a starting
    point only and routes the vehicle through the net by choosing a new
    direction at each junction the vehicle approaches. This approach is quite
    common within traffic modelling and may be helpful, when no flows are
    given.</para>

    <sect1>
      <title>Building own routes from scratch</title>

      <para>You have either the possibility to generate completely random
      routes or to exactly describe what you want and pass this information to
      SUMO-ROUTER, which then completes this description by necessary
      information. The results may be then used within the simulation.</para>

      <sect2>
        <title>Generating random routes</title>

        <para>Random routes are the easiest, but also the most inaccurate way
        to feed your network with vehicle movements. Using the following call:</para>

        <blockquote>
          <para>duarouter(.exe) --net=<replaceable>&#60;SUMO_NET&#62;</replaceable>
          -R <replaceable>&#60;FLOAT&#62;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable>
          -b <replaceable>&#60;UINT&#62;</replaceable> -e
          <replaceable>&#60;UINT&#62;</replaceable></para>
        </blockquote>

        <para>or the same for the jtr-router:</para>

        <blockquote>
          <para>jtrrouter(.exe) --net=<replaceable>&#60;SUMO_NET&#62;</replaceable>
          -R <replaceable>&#60;FLOAT&#62;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable>
          -b <replaceable>&#60;UINT&#62;</replaceable> -e
          <replaceable>&#60;UINT&#62;</replaceable></para>
        </blockquote>

        <para>generates random routes for the time interval given by -b(egin)
        and -e(nd). In each time step as many vehicles will be emitted into
        the network as given by the value of <option>-R</option> (<option>--random-per-second</option>).
        You can also supply values smaller than one. In this case, a single
        vehicle will be emitted each 1/<option><replaceable>&#60;-R&#62;</replaceable></option>
        step. Example: <option>-R 0.25</option> generates a route description,
        which, when loaded, forces the simulation to emit a single vehicle
        each fourth time step.</para>

        <para>It is also possible to use this parameter in combination with
        other route definitions, for example supplying some fix routes and
        additionally generate random routes.</para>

        <para>Random routes are not the best way to generate routes. Take a
        look at the network displayed below. This network has two rural and
        many minor roads. Random routes are by now spread all over the network
        and each road is chosen to be the starting or the ending without
        respecting his function. Due to this, the network is filled over with
        cars, coming from and approaching directions, the normal traffic is
        not taking - the normal traffic would concentrate on rural roads. This
        can be solved using definitions of routes. We will discuss this in the
        second subchapter.</para>

        <figure>
          <title>A network where the usage of random routes causes an improper
          behaviour due to the mixture of rural and minor roads</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/ivf.gif"
              format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>There is also another problem with random routes: By definition,
        in 50% of the cases, the route starts in the opposite direction of the
        destination - on the wrong side of the road. This yields in a large
        amount of vehicles that want to turn back using the first possibility.
        This is of course also not common in the real world, especially not in
        areas as the one shown before. To avoid this, we remove the first and
        the last edge from the route per default.</para>
      </sect2>

      <sect2>
        <title>Generation of own, explicit routes using Trip Definitions</title>

        <para>There are two possibilities to describe own routes. The first
        one id the usage of trip definitions, the second one the usage of flow
        descriptions. Trip definitions describe the movement of a single
        vehicle giving the departure time, and both the origin and the
        destination via their edge-id. Flow descriptions use these values to,
        but instead of describing only one vehicle, the description is used
        for a defined number of vehicles to be emitted within a described
        interval. Due to this, instead of the departure time, the period&#39;s
        begin and end times must be supplied and the number of vehicles to
        emit within this interval.</para>

        <para>We will describe both applications less briefly, now.</para>

        <para>Trip definitions that can be laid into the network may be
        supplied to the router using an XML-file. The syntax of a single route
        is: <sgmltag>&#60;tripdef id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
        depart=&#34;<replaceable>&#60;TIME&#62;</replaceable>&#34; from=&#34;<replaceable>&#60;ORIGIN_EDGE_ID&#62;</replaceable>&#34;
        to=&#34;<replaceable>&#60;DESTINATION_EDGE_ID&#62;</replaceable>&#34;
        [type=&#34;<replaceable>&#60;VEHICLE_TYPE&#62;</replaceable>&#34;]
        [period=&#34;<replaceable>&#60;INT&#62;</replaceable>&#34; repno=&#34;<replaceable>&#60;INT&#62;</replaceable>&#34;]/&#62;</sgmltag>.
        You have to supply the edge the trip starts at (origin), the edge the
        trip ends at (destination) and the departure time at least. If the
        type is not given, a default (&#34;SUMO_DEFAULT_TYPE&#34;) will be
        used and stored within the routes-file. If the attribute
        <sgmltag>period</sgmltag> is given, not only one vehicle will use the
        route, but every n seconds (where n is the number defined in period),
        a vehicle using this route will be emitted. The number of vehicles to
        emit using this route may be additionally constrained using
        <sgmltag>repno</sgmltag>. Otherwise, it is unlimited.</para>

        <para>Let&#39;s review a trip&#39;s parameter:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>id</sgmltag>: A string holding the id of the route</para>
          </listitem>

          <listitem>
            <para><sgmltag>depart</sgmltag>: The time the route starts at</para>
          </listitem>

          <listitem>
            <para><sgmltag>from</sgmltag>: The name of the edge the route
            starts at; the edge must be a part of the used network</para>
          </listitem>

          <listitem>
            <para><sgmltag>to</sgmltag>: The name of an the edge the route
            ends at; the edge must be a part of the used network</para>
          </listitem>

          <listitem>
            <para><sgmltag>type</sgmltag>: The name of the type the vehicle
            has</para>
          </listitem>

          <listitem>
            <para><sgmltag>period</sgmltag>: The time after which another
            vehicle with the same route shall be emitted</para>
          </listitem>

          <listitem>
            <para><sgmltag>repno</sgmltag>: The number of vehicles to emit
            which share the same route</para>
          </listitem>
        </itemizedlist>

        <para>This file is supplied to ROUTER using the option &#34;<option>--trip-defs</option>&#34;
        or &#34;<option>-t</option>&#34;:</para>

        <blockquote>
          <para>duarouter(.exe) --trip-defs=<replaceable>&#60;TRIP_DEFS&#62;</replaceable>
          --net=<replaceable>&#60;SUMO_NET&#62;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable>
          -b <replaceable>&#60;UINT&#62;</replaceable> -e
          <replaceable>&#60;UINT&#62;</replaceable></para>
        </blockquote>

        <para>Flow amounts share most of the parameter with trip definitions.
        The syntax is: <sgmltag>&#60;flow id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
        from=&#34;<replaceable>&#60;ORIGIN_EDGE_ID&#62;</replaceable>&#34;
        to=&#34;<replaceable>&#60;DESTINATION_EDGE_ID&#62;</replaceable>&#34;
        begin=&#34;<replaceable>&#60;INTERVAL_BEGIN&#62;</replaceable>&#34;
        end=&#34;<replaceable>&#60;INTERVAL_END&#62;</replaceable>&#34;
        no=&#34;<replaceable>&#60;VEHICLES_TO_EMIT&#62;</replaceable>&#34;
        [type=&#34;<replaceable>&#60;VEHICLE_TYPE&#62;</replaceable>&#34;]/&#62;</sgmltag>.
        Notice the following differences: the vehicle does not take a certain
        departure time as not only one vehicle is described by this parameter,
        but a set of, given within the attribute &#34;<sgmltag>no</sgmltag>&#34;
        (short for number). The departure times are spread uniformly within
        the time interval described by <sgmltag><replaceable>&#60;INTERVAL_BEGIN&#62;</replaceable></sgmltag>
        and <sgmltag><replaceable>&#60;INTERVAL_END&#62;</replaceable></sgmltag>.
        All these three attributes must be integer values. The values &#34;<sgmltag>period</sgmltag>&#34;
        and &#34;<sgmltag>repno</sgmltag>&#34; are not used herein. Flow
        definitions can also be embedded into an interval tag. In this case
        one can (but does not have to) leave the tags &#34;<sgmltag>begin</sgmltag>&#34;
        and &#34;<sgmltag>end</sgmltag>&#34; out. So the following two
        snipples mean the same:</para>

        <para>a) <sgmltag>&#60;flow id=&#34;0&#34; from=&#34;edge0&#34;
        to=&#34;edge1&#34; begin=&#34;0&#34; end=&#34;3600&#34;
        no=&#34;100&#34;/&#62;</sgmltag></para>

        <para>b) <sgmltag>&#60;interval begin=&#34;0&#34;
        end=&#34;3600&#34;&#62;</sgmltag></para>

        <para><sgmltag> &#60;flow id=&#34;0&#34; from=&#34;edge0&#34;
        to=&#34;edge1&#34; no=&#34;100&#34;/&#62;</sgmltag></para>

        <para><sgmltag> &#60;/interval&#62;</sgmltag></para>

        <para>As we have to read in the flow definitions completely into the
        memory - something we do not have to do necessarily with trips, an
        extra parameter (<option>-f</option> or <option>--flow-defs</option>)
        is used to make them known by the router:</para>

        <blockquote>
          <para>duarouter(.exe) --flow-defs=<replaceable>&#60;FLOW_DEFS&#62;</replaceable>
          --net=<replaceable>&#60;SUMO_NET&#62;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable>
          -b <replaceable>&#60;UINT&#62;</replaceable> -e
          <replaceable>&#60;UINT&#62;</replaceable></para>
        </blockquote>

        <para><inlinegraphic fileref="./gfx/user/bulb.gif" format="GIF" />
        Remind that you can not insert flow descriptions into a trip
        definitions file. The opposite (some trip definitions within a flow
        descriptions file) is possible. You also can give both files at the
        input file, for example: <command>duarouter(.exe) --flow-defs=<replaceable>&#60;FLOW_DEFS&#62;</replaceable>
        --trip-defs=<replaceable>&#60;TRIP_DEFS&#62;</replaceable> --net=<replaceable>&#60;SUMO_NET&#62;</replaceable>
        --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b
        <replaceable>&#60;UINT&#62;</replaceable> -e
        <replaceable>&#60;UINT&#62;</replaceable></command>.</para>
      </sect2>

      <sect2>
        <title>Using the Junction Turning Ratio - Router</title>

        <para>The following parameter must be supplied to the jtr-router: the
        network to route the vehicles through, the description of the turning
        ratios for the junctions (defaults may be used for this, too), and the
        descriptions of the flow.</para>

        <para>A call may look like this:</para>

        <blockquote>
          <para>jtrrouter(.exe) --flow-defs=<replaceable>&#60;FLOW_DEFS&#62;</replaceable>
          --turns=<replaceable>&#60;TURN_DEFINITIONS&#62;</replaceable> --net=<replaceable>&#60;SUMO_NET&#62;</replaceable>
          --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b
          <replaceable>&#60;UINT&#62;</replaceable> -e
          <replaceable>&#60;UINT&#62;</replaceable></para>
        </blockquote>

        <para>The definitions of the flow - may they be trip definitions or
        amount definitions - look like the ones for the dua-router with just a
        single difference: as the it is not known where the vehicle will leave
        the network as the route it uses is randomly computed, the destination
        parameter has no meaning for jtr-routing and so may be left off. A
        vehicle leaves the network as soon as it comes to a sink edge. As not
        all networks have sink edges set explicitly, one can support a list of
        edges to be declared as sinks using <option>--sinks
        <replaceable>&#60;EDGE_IDS&#62;</replaceable></option>.
        <option><replaceable>&#60;EDGE_IDS&#62;</replaceable></option> is in
        this case a list of edge ids separated using a &#39;;&#39;.</para>

        <para>To describe the turn definitions, one has to build a further
        file. Within this file, for each interval and each edge the list of
        percentages to use a certain follower is to be given. An example:</para>

        <para><sgmltag>&#60;turn-defs&#62;</sgmltag></para>

        <para><sgmltag> &#60;interval begin=&#34;0&#34;
        end=&#34;3600&#34;&#62;</sgmltag></para>

        <para><sgmltag> &#60;fromedge id=&#34;myEdge0&#34;&#62;</sgmltag></para>

        <para><sgmltag> &#60;toedge id=&#34;myEdge1&#34;
        perc=&#34;0.2&#34;/&#62;</sgmltag></para>

        <para><sgmltag> &#60;toedge id=&#34;myEdge2&#34;
        perc=&#34;0.7&#34;/&#62;</sgmltag></para>

        <para><sgmltag> &#60;toedge id=&#34;myEdge3&#34;
        perc=&#34;0.1&#34;/&#62;</sgmltag></para>

        <para><sgmltag> &#60;/fromedge&#62;</sgmltag></para>

        <para>... any other edges ...</para>

        <para><sgmltag> &#60;/interval&#62;</sgmltag></para>

        <para>... some further intervals ...</para>

        <para><sgmltag>&#60;/turn-defs&#62;</sgmltag></para>

        <para>The snippet defines that vehicles coming at the end of edge
        &#34;myEdge0&#34; within the time interval between 0s and 3600s will
        choose the edge &#34;myEdge1&#34; with a probability of 20%,
        &#34;myEdge2&#34; with a probability of 70% and &#34;myEdge3&#34; with
        a probability of 10%. The specification of such information is of
        course quite extensive and so the jtr-router is also able to read the
        turning ratios from a cvs file. The same information as above may be
        coded the following way:</para>

        <para>interval;begin;end;from;to;split;</para>

        <para>;0;3600;myEdge0;myEdge1;0.2;</para>

        <para>;0;3600;myEdge0;myEdge2;0.7;</para>

        <para>;0;3600;myEdge0;myEdge3;0.1;</para>

        <para><caution><para>Do not forget to give the order of the attributes
        in the first line of the file.</para></caution></para>

        <para>Another possibility to save time on preparing the description is
        to use default values. The parameter <option>--turn-defaults</option>
        (<option>-T</option>) <option><replaceable>&#60;TURN_DEFAULTS&#62;</replaceable></option>
        can be used to describe the default ratios that will be used for all
        junctions for all time steps. <option><replaceable>&#60;TURN_DEFAULTS&#62;</replaceable></option>
        is a list of doubles, separated by a &#39;;&#39;. To achieve the same
        behaviour as in the example above, use <option>--turn-defaults=20;70;10</option>.
        The values will be applied to an edge&#39;s following edges beginning
        at the right edge (20%) and ending at the leftmost edge (10%). As the
        number of possible followers changes for different edges, the values
        are resampled to directional ratios for edges which number of
        following edges differs from the list of edges given within the
        turning defaults. Given <option>--turn-defaults=20;70;10</option> a
        vehicle using an edge that has two followers would use the follower to
        the right with 55% probability, the one to the left with 45%.</para>

        <para>As theoretically a route may get infinitely long when a vehicle
        is forced to take always the same direction, it is possible to limit
        the route&#39;s size using <option>max-edges-factor</option>. This
        factor, multiplied with the number of the used network&#39;s edges is
        the maximum number of edges a route may have. With the default of 2.0,
        a route may contain twice as many edges as the network has. We assume
        that for each network this number has to be chosen again.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Importing Routes</title>

      <sect2>
        <title>Importing Artemis-routes</title>

        <para>Although originally ARTEMIS-routes are stored within an
        OD-matrix, the import within SUMO is done using the SUMO-ROUTER
        program.</para>

        <para>This is basically done this way:</para>

        <blockquote>
          <para>dua-router(.exe) --artemis=<replaceable>&#60;ARTEMIS_FOLDER&#62;</replaceable>
          --net=<replaceable>&#60;SUMO_NET&#62;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable>
          -b <replaceable>&#60;UINT&#62;</replaceable> -e
          <replaceable>&#60;UINT&#62;</replaceable></para>
        </blockquote>

        <para>Remind that you have to specify the begin and the end of the
        simulation. This is quite inconsequent, as our mechanisms would allow
        import of repeatable routes, too. This is just not yet implemented.</para>

        <para>Known problems:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Only the a0-Flow is being imported</para>
          </listitem>

          <listitem>
            <para>Only one time-period is imported</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2>
        <title>Importing FastLane-routes</title>

        <para>One of the main concepts of FastLane is the Dynamic User
        Assignment by Christian Gawron. As this mechanism is based on single
        vehicle routes, those are explicitly given for a FastLane simulation.
        The router module has only to convert routes from the FastLane- into
        the SUMO-representation. Do this using the following command:</para>

        <blockquote>
          <para>dua-router(.exe) --cell=<replaceable>&#60;CELL_FILE_NAME(NO_EXTENSION)&#62;</replaceable>
          --net=<replaceable>&#60;SUMO_NET&#62;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable>
          -b <replaceable>&#60;UINT&#62;</replaceable> -e
          <replaceable>&#60;UINT&#62;</replaceable></para>
        </blockquote>

        <para>If you are familiar with FastLane, you may have noticed that you
        have only to supply one file name while FastLane uses two files to
        describe the routes: one &#34;*.driver&#34; and one &#34;*.rinfo&#34;
        file. As both files have the same name and only the extension differs,
        you have to give the name without the extension. So if your files have
        the names &#34;<filename>foo.drive</filename>r&#34; and &#34;<filename>foo.rinfo</filename>&#34;,
        write <option>--cell=foo</option>.</para>

        <para>FastLanes stores routes within a very large file what makes the
        process quite slow. If you want to speed it up for the future, you can
        tell SUMO-ROUTER to save some temporary files using <option>--save-cell-rindex</option>.
        A further file named &#34;<replaceable>&#60;CELL_FILE_NAME&#62;</replaceable>.rindex&#34;
        will be generated. It speeds up the processing by a factor of ten or
        so.</para>

        <para>As FastLane is portable, you may encounter files generated on a
        Windows-machine. Those files give some strange warnings, something
        that should not happen if you supply the right net. To avoid them, use
        the <option>--intel-cell</option> switch to tell SUMO-ROUTER it has to
        turn the byte order.</para>

        <para>You can also decide whether the best, not the last route a
        driver took shall be used: set the switch <option>--no-last-cell</option>
        for this.</para>
      </sect2>

      <sect2>
        <title>Importing VISSIM und VISUM-routes</title>

        <para>While VISSIM holds the possibility to describe vehicle-based
        routes, too, our package contain only the second of VISSIM&#39;s route
        specification abilities, it shares with VISUM. This representation of
        vehicle movements is stored as origin-destination matrices which have
        to be translated into single vehicle movements first. This is done
        using the OD2TRIPS module. One has to pass the SUMO-network to use
        using the <option>--net-file</option> (<option>-n</option>) - option
        and the name of the output file using <option>--output-file</option> (<option>-o</option>).
        The generated output contains the single vehicle trips build from the
        OD-matrix. Also, one has to supply the file the
        origin/destination-matrix is described in. This is either a file with
        an &#34;.fma&#34; extension (other table types supported by
        VISSIM/VISUM are not supported) which holds a single OD-matrix or the
        VISSIM-simulation file itself (*.inp) which holds the names of the
        OD-files to use. The option that lets OD2TRIPS know about the file is
        <option>--od-file</option>. In the second case, the path to the
        matrices has to be supplied using the <option>--od-path</option> -
        option, too.</para>

        <para>Additionally, the first and the last time step to process may be
        given. If not given, the values stored within the parsed descriptions
        will be used. A further scaling factor may be used, too, which will be
        applied on the read streams. An example for parsing an OD-description
        that uses multiple matrices may be:</para>

        <blockquote>
          <para>od2trips(.exe) --od-file=<replaceable>VISSIM/test.inp</replaceable>
          --od-path=<replaceable>VISSIM/</replaceable> --n=<replaceable>MySUMONet.net.xml</replaceable>
          --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable></para>
        </blockquote>

        <para>After obtaining single vehicle trips using this approach they
        should be parsed into full route descriptions using router as
        described within the chapter &#34;Generation of own, explicit
        routes&#34;.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Dynamic User Assignment</title>

      <para>... to be described ...</para>
    </sect1>

    <sect1>
      <title>Additional Weights</title>

      <para>From version 0.8.0.1 on, SUMO is capable to load additional
      weights for edges. The idea behind this is to virtually increase the
      costs for an edge in order to make it less attractive to pass.
      Additional weights are used by the DUA-Router only and are supplied
      using the <option>--supplementary-weights <replaceable>&#60;FILE&#62;</replaceable></option>
      (or <option>--add <replaceable>&#60;FILE&#62;</replaceable></option> or
      <option>-S <replaceable>&#60;FILE&#62;</replaceable></option>) - option.
      A file containing additional weights looks like this:</para>

      <para><sgmltag>&#60;supplementary-weights&#62;</sgmltag></para>

      <para><sgmltag> &#60;interval begin=&#34;60&#34; end=&#34;119&#34;&#62;</sgmltag></para>

      <para><sgmltag> &#60;weight edge-id=&#34;1fi&#34; absolut=&#34;42&#34;
      mult=&#34;2.5&#34; add=&#34;-21&#34;/&#62;</sgmltag></para>

      <para><sgmltag> &#60;weight edge-id=&#34;2o&#34; mult=&#34;13&#34;/&#62;</sgmltag></para>

      <para><sgmltag>... further weights ...</sgmltag></para>

      <para><sgmltag> &#60;/interval&#62;</sgmltag></para>

      <para><sgmltag> &#60;interval begin=&#34;120&#34; end=&#34;179&#34;&#62;</sgmltag></para>

      <para><sgmltag> &#60;weight edge-id=&#34;1fi&#34; absolut=&#34;48&#34;
      mult=&#34;2.5&#34;/&#62;</sgmltag></para>

      <para><sgmltag> &#60;weight edge-id=&#34;2o&#34; add=&#34;7&#34;/&#62;</sgmltag></para>

      <para><sgmltag>... further weights ...</sgmltag></para>

      <para><sgmltag> &#60;/interval&#62;</sgmltag></para>

      <para><sgmltag>... further intervals ...</sgmltag></para>

      <para><sgmltag>&#60;/supplementary-weights&#62;</sgmltag></para>

      <caution>
        <para>The option name may be changed in the near future...</para>
      </caution>

      <caution>
        <para>The attribute &#34;absolut&#34; is misspelled and will be
        changed in the near future.</para>
      </caution>

      <para>When additional weights are supplied, the DUA-Router first looks
      whether an additional, absolute value has been provide for the currently
      watched edge (value of the &#34;<sgmltag>absolut</sgmltag>&#34;-attribute
      for the current edge and time). If so, this value will be used. If not,
      either the edge&#39;s loaded weight (if available for the current time
      step) or the default value (length/vallowed) will be changed first by
      applying the loaded factor (value of the &#34;<sgmltag>mult</sgmltag>&#34;-attribute
      for the current edge and time) and than by the loaded addend (value of
      the &#34;<sgmltag>add</sgmltag>&#34;-attribute for the current edge and
      time).</para>
    </sect1>
  </chapter>

  <chapter id="user_chp06">
    <title>Performing the Simulation</title>

    <para>Having the network description and the routes you have everything to
    perform a simulation. The fastest way to get results - their different
    types will be described within the following sub-chapters - is to use the
    SUMO - command line simulation. This command line tool does not generate
    any graphical output as the SUMO-GUI does, but is much faster in
    execution.</para>

    <para>To start a simulation, you have to supply the following information:</para>

    <itemizedlist spacing="normal">
      <listitem>
        <para>The file that contains the network</para>

        <para>Use the <option>--net-file</option> (or <option>-n</option>)
        <option><replaceable>&#60;FILE&#62;</replaceable></option> option to
        pass the simulation the name of the network to use. The network must
        be one build using SUMO-NETCONVERT or SUMO-NETGEN.</para>
      </listitem>

      <listitem>
        <para>The routes to use</para>

        <para>Use the <option>--route-files</option> (or <option>-r</option>)
        <option><replaceable>&#60;FILE&#62;</replaceable>[;<replaceable>&#60;FILE&#62;</replaceable>]*</option>
        option to specify which files shall be used to read routes from. In
        this case, the name is not ambigous - multiple files can be used.</para>
      </listitem>

      <listitem>
        <para>The simulation time the simulation begins at</para>

        <para>This is the first time step of the simulation, the simulation
        has to perform. Be aware, that this time should fit to the time your
        routes start.</para>
      </listitem>

      <listitem>
        <para>The simulation time the simulation begins at</para>

        <para>This is the last step of the simulation. When this time step is
        reached, the simulation will end.</para>
      </listitem>
    </itemizedlist>

    <para>All these values must be given in order to perform a simulation.
    Still, no output is generated. The next subchapters describe the different
    possibilities to generate simulation output and give an in-depth overview
    of further features the simulation module has.</para>

    <sect1>
      <title>Output Generation</title>

      <para>Due to its scientific purpose, SUMO tasks lie beyond simple
      visualisation of traffic. The results of a simulation must be available
      and one must be able to process them and furthermore possibilities to
      influence the simulation are necessary to make it more variable in use.
      Detectors, artifacts used to gain more or less processed results from
      the simulation and some further structures used are described in the
      next subchapters.</para>

      <para>To supply the definitions of these structures to the simulation,
      we use an additional file normally and pass it to &#34;SUMO&#34; using
      the <option>--additional-files</option> (<option>-a</option>) - option.
      The file may contain all the definitions about additional structures
      such as detectors, emitters etc. in random order.</para>

      <sect2>
        <title>Detectors</title>

        <para>The results are obtained from the simulation using simulated
        detectors. You will find detectors one knows from the real world such
        as induct loops, but also some virtual ones that allow gaining values
        one can work with more easily.</para>

        <para>Basically, the main distinction between detectors SUMO offers is
        their dimension. The next list shows all available detector types,
        some of which are still under development. The type names &#34;E*&#34;
        have their origin in the German word &#34;Erfassungsbereich&#34;
        meaning &#34;detection area&#34;.</para>

        <itemizedlist>
          <listitem>
            <para>E1: Induct loops</para>

            <para>Induct loops have a position only and no dimensions. They
            are meant to be a slice plane through a single lane and measure
            only the vehicles passing them.</para>
          </listitem>

          <listitem>
            <para>E2: Areal, lane-based detectors</para>

            <para>These detectors describe a part of a lane or alternatively a
            part of the network made up of consecutive lanes (a begin lane and
            his predecessors). The measured values are derived from the
            movements over the whole part of the network the detector is lying
            at.</para>
          </listitem>

          <listitem>
            <para>E23: Route-dependent Origin/Destination detectors</para>

            <para>... not yet implemented ...</para>
          </listitem>

          <listitem>
            <para>E3: Multi-Origin/Multi-Destination detectors</para>

            <para>E3-detectors measure vehicles passing a set of entry and an
            according set of exit points. Each of these points is a position
            on a lane. Measured are values that may be derived from the
            movements of vehicles between any of the entry and any of the exit
            points.</para>
          </listitem>

          <listitem>
            <para>E41: Destination based detectors</para>

            <para>... not yet implemented ...</para>
          </listitem>

          <listitem>
            <para>E42: Edgebased detectors</para>

            <para>... not yet implemented ...</para>
          </listitem>
        </itemizedlist>

        <para>We will not replicate the exact computation of the
        detector&#39;s values. A document describing this should be found on
        our pages within the <ulink
        url="http://sumo.sourceforge.net/documentation.html">documentation</ulink>
        part. The next subchapters hold the information about how to set
        detectors onto a network only.</para>

        <para>To ease the usage and for backward compatibility, all detectors
        may be defined in two ways. The first one is by using the following
        notation: <sgmltag>&#60;detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
        type=&#34;<replaceable>&#60;TYPE&#62;</replaceable>&#34; ...further
        attributes.../&#62;</sgmltag>. Herein, the detector type is determined
        by the type-attribute which is &#34;induct_loop&#34; as default. The
        second possibility is: : <sgmltag>&#60;<replaceable>XX</replaceable>-detector
        id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34; ...further
        attributes.../&#62;</sgmltag> where the tag name already defines the
        detector to build. Possible values for <sgmltag><replaceable>XX
        </replaceable></sgmltag>within the tag name and attributes needed to
        describe each detector are described in the following subchapters.</para>

        <sect3>
          <title>E1-Detectors (Induct Loops)</title>

          <para>An induct loop is described the following way:</para>

          <para>a) <sgmltag>&#60;detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
          type=&#34;[induct_loop|E1]&#34; lane=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
          pos=&#34;<replaceable>&#60;POSITION_ON_LANE&#62;</replaceable>&#34;
          freq=&#34;<replaceable>&#60;AGGREGATION_TIME&#62;</replaceable>&#34;
          [style=&#34;xml&#34;] file=&#34;<replaceable>&#60;OUTPUT_FILE&#62;</replaceable>&#34;/&#62;</sgmltag></para>

          <para>or :</para>

          <para>b) <sgmltag>&#60;e1-detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
          lane=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
          pos=&#34;<replaceable>&#60;POSITION_ON_LANE&#62;</replaceable>&#34;
          freq=&#34;<replaceable>&#60;AGGREGATION_TIME&#62;</replaceable>&#34;
          [style=&#34;xml&#34;] file=&#34;<replaceable>&#60;OUTPUT_FILE&#62;</replaceable>&#34;/&#62;</sgmltag></para>

          <para>The id is any string that let&#39;s you know which detector is
          meant. The type indicates that a induct loop shall be build, here.
          The attributes &#34;<sgmltag>lane</sgmltag>&#34; and &#34;<sgmltag>pos</sgmltag>&#34;
          describe on which lane and at which position on him the detector
          shall lay. As induct loop detectors may aggregate the values they
          collect, the freq-attribute describes this period. The
          style-parameter is obsolete by now as the earlier possibility to use
          either &#34;xml&#34; or &#34;cvs&#34;-output is now not supported,
          the values are stored in xml-files only. The file attribute tells
          the simulation to which file the detector shall write his results
          into. The file will be generated, does not have to exist earlier and
          will be overwritten if existing without any warning.</para>

          <para><caution><para>The folder the output file shall be generated
          in must exist.</para></caution></para>

          <para>Let&#39;s review the attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              detector</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: Always &#34;induct_loop&#34; or
              &#34;E1&#34; for this type of detectors (&#34;induct_loop&#34;
              is the default value)</para>
            </listitem>

            <listitem>
              <para><sgmltag>lane</sgmltag>: The id of the lane the detector
              shall be laid on. The lane must be a part of the network used.</para>
            </listitem>

            <listitem>
              <para><sgmltag>pos</sgmltag>: The position on the lane the
              detector shall be laid on in meters. The position must be a
              value between -1*lane&#39;s length and the lane&#39;s length. In
              the case of a negative value, the position will be computed
              backward from the lane&#39;s end (the position the vehicles
              drive towards).</para>
            </listitem>

            <listitem>
              <para><sgmltag>freq</sgmltag>: The aggregation period the values
              the detector collects shall be summed up.</para>
            </listitem>

            <listitem>
              <para><sgmltag>style</sgmltag>: Obsolete/deprecated; Always
              &#34;xml&#34; by now</para>
            </listitem>

            <listitem>
              <para><sgmltag>file</sgmltag>: The path to the output file. The
              path may be relative.</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3>
          <title>E2-Detectors (Areal, lane-based Detectors)</title>

          <para>An induct loop is described the following way:</para>

          <para>a) <sgmltag>&#60;detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
          type=&#34;[areal|lane_based|E2]&#34; lane=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
          pos=&#34;<replaceable>&#60;POSITION_ON_LANE&#62;</replaceable>&#34;
          length=&#34;<replaceable>&#60;DETECTOR_LENGTH&#62;</replaceable>&#34;
          freq=&#34;<replaceable>&#60;AGGREGATION_TIME&#62;</replaceable>&#34;
          [style=&#34;xml&#34;] file=&#34;<replaceable>&#60;OUTPUT_FILE&#62;</replaceable>&#34;
          [measures=&#34;<replaceable>&#60;MEASURES&#62;</replaceable>&#34;]
          [time_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [speed_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [jam_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [keep_for=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]/&#62;</sgmltag></para>

          <para>or:</para>

          <para>b) <sgmltag>&#60;e2-detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
          lane=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
          pos=&#34;<replaceable>&#60;POSITION_ON_LANE&#62;</replaceable>&#34;
          length=&#34;<replaceable>&#60;DETECTOR_LENGTH&#62;</replaceable>&#34;
          freq=&#34;<replaceable>&#60;AGGREGATION_TIME&#62;</replaceable>&#34;
          [style=&#34;xml&#34;] file=&#34;<replaceable>&#60;OUTPUT_FILE&#62;</replaceable>&#34;
          [measures=&#34;<replaceable>&#60;MEASURES&#62;</replaceable>&#34;]
          [time_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [speed_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [jam_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [keep_for=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]/&#62;</sgmltag></para>

          <para>Most of the attributes have the same meaning as for induct
          loops. As an areal detector has a certain length, this length must
          be supplied as a further parameter. It may also be a negative number
          which lets the detector be extended upstream to the given beginning
          position. The type must be set to either &#34;<sgmltag>areal</sgmltag>&#34;,
          &#34;<sgmltag>lane_based</sgmltag>&#34; or &#34;<sgmltag>E2</sgmltag>&#34;
          to let the simulation know what&#39;s desired to build. The optional
          parameter &#34;cont&#34; let&#39;s the detector continue over the
          current lane onto this lane&#39;s predecessors when the
          detector&#39;s length plus his position is larger than the place
          available on the lane. The attribute &#34;<sgmltag>measures</sgmltag>&#34;
          describes which values the detector shall compute. The optional
          values are described below.</para>

          <para><caution><para>The folder the output file shall be generated
          in must exist.</para></caution></para>

          <para><caution><para>For detectors that span over more than a single
          edge, only the attribute
          QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_VEHICLES is defined all
          other may return strange values.</para></caution></para>

          <para>But there is also a further possibility to use E2-detectors.
          If you place them in front of a traffic light, you can use the
          traffic light to describe the intervals (aggregation) time instead
          of giving a fixed aggregation time. In this case, output will be
          generated every time the traffic light switches. To use this
          feature, simply replace the freq-attribute within the description of
          your detector by the id of the traffic light that should steer it
          (use the attribute &#34;<sgmltag>tl</sgmltag>&#34; to specify the
          id) :</para>

          <para>a) <sgmltag>&#60;detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
          type=&#34;[areal|lane_based|E2]&#34; lane=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
          pos=&#34;<replaceable>&#60;POSITION_ON_LANE&#62;</replaceable>&#34;
          length=&#34;<replaceable>&#60;DETECTOR_LENGTH&#62;</replaceable>&#34;
          tl=&#34;<replaceable>&#60;TL-ID&#62;</replaceable>&#34; freq=&#34;<replaceable>&#60;AGGREGATION_TIME&#62;</replaceable>&#34;
          [style=&#34;xml&#34;] file=&#34;<replaceable>&#60;OUTPUT_FILE&#62;</replaceable>&#34;
          [measures=&#34;<replaceable>&#60;MEASURES&#62;</replaceable>&#34;]
          [time_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [speed_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [jam_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [keep_for=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]/&#62;</sgmltag></para>

          <para>or:</para>

          <para>b) <sgmltag>&#60;e2-detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
          lane=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
          pos=&#34;<replaceable>&#60;POSITION_ON_LANE&#62;</replaceable>&#34;
          length=&#34;<replaceable>&#60;DETECTOR_LENGTH&#62;</replaceable>&#34;
          tl=&#34;<replaceable>&#60;TL-ID&#62;</replaceable>&#34; freq=&#34;<replaceable>&#60;AGGREGATION_TIME&#62;</replaceable>&#34;
          [style=&#34;xml&#34;] file=&#34;<replaceable>&#60;OUTPUT_FILE&#62;</replaceable>&#34;
          [measures=&#34;<replaceable>&#60;MEASURES&#62;</replaceable>&#34;]
          [time_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [speed_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [jam_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
          [keep_for=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]/&#62;</sgmltag></para>

          <para>A further feature allows you to output values not for all
          switches of the traffic light the detector is attached to, but only
          when the light turns red for the assigned link (connection between
          the incoming and the outgoing lane). This should allow you to
          measure the maximum jam length in front of a red traffic light for
          this link. To switch on this feature, you have to add the name of
          the following lane:<sgmltag> to=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;</sgmltag>.
          The incoming lane is already described by the &#34;<sgmltag>lane</sgmltag>&#34;-attribute.</para>

          <para>E2-detectors may compute many different measures and the user
          has the possibility to describe which measures he actually wants to
          be generated. The &#34;measures&#34;-attribute must contain the
          measures divided by a &#39; &#39; (blank) in the case he does not
          want to compute all parameters. Computing all parameters is the
          default case but may also be explicitly set using &#39;<sgmltag>measures=&#34;ALL&#34;</sgmltag>&#39;
          . The available measures are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>DENSITY: The density on the detector in vehicles/hour
              averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>MAX_JAM_LENGTH_IN_VEHICLES: Every timestep, the maximum
              number of consecutivly jamming vehicles is detected. These
              values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>MAX_JAM_LENGTH_IN_METERS: Every timestep, the maximum
              length demand of consecutivly jamming vehicles in meters is
              detected. These values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>JAM_LENGTH_SUM_IN_VEHICLES: Every timestep, the sum of the
              lengths of all jams on the detector is measured (in vehicles).
              These values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>JAM_LENGTH_SUM_IN_METERS: Every timestep, the sum of the
              lengths of all jams on the detector is measured (in meters).
              These values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_VEHICLES: This
              detector uses a MAX_JAM_LENGTH_IN_VEHICLES one as a helper.
              Every timestep, the &#34;maximum-jam-length&#34; (in vehicles)
              from MAX_JAM_LENGTH_IN_VEHICLES will be compared to the maximum
              of &#34;maximum-jam-lengths&#34; that occured since the last
              reset. If the new value is larger, the maximum of
              &#34;maximum-jam-lengths&#34; is updated. Between two resets,
              this detector records a monoton growing set of
              &#34;maximum-jam-lengths&#34;. These values are averaged over
              the requested interval. The reset is performed by a traffic
              light.</para>
            </listitem>

            <listitem>
              <para>QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_METERS: As
              QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_VEHICLES, but in meters,
              not in vehicles.</para>
            </listitem>

            <listitem>
              <para>N_VEHICLES: Every timestep, the number of vehicles that
              populate the detector is recorded. These values are averaged
              over the requested interval.</para>
            </listitem>

            <listitem>
              <para>OCCUPANCY_DEGREE: Every timestep the length of the
              vehicles populating the detector is summed up. We divide this
              length by the detectorlength to get a value out of [0,1]. These
              values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>SPACE_MEAN_SPEED: Every timestep, the mean-speed of the
              vehicles on the detector is calculated. These values are
              averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>CURRENT_HALTING_DURATION_SUM_PER_VEHICLE: Every timestep,
              the halting-time of the vehicles on the detector is summed up
              and then averaged over the number of vehicles. These values are
              averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>N_STARTED_HALTS: A vehicle on the detector that just
              started halting, will report the time when this event took place
              to the detector. All events during the requested interval are
              summed up.</para>
            </listitem>

            <listitem>
              <para>HALTING_DURATION_SUM: A vehicle that starts moving after a
              halt will report it&#39;s halting-duration (in seconds) and the
              time when this event took place to the detector. The
              halting-durations of all events during the requested interval
              are summed up.</para>
            </listitem>

            <listitem>
              <para>HALTING_DURATION_MEAN: Every vehicle sums up it&#39;s
              halting-durations (in seconds) during it&#39;s stay on the
              detector. When a vehicle leaves the detector, it&#39;s
              halting-duration-sum is stored by the detector. These values are
              averaged over the requested interval.Only vehicles that moved
              through the entire detector contribute.</para>
            </listitem>

            <listitem>
              <para>APPROACHING_VEHICLES_STATES: This detector is a special
              kind of E2 detector. It doesn&#39;t return a single value but a
              container of vehicle states. Here, a vehicle state is a tuple
              consisting of the distance from the vehicle front to the
              detector end and the vehicle&#39;s speed. There is no averaging
              or summing up but current output is provided. This detector is
              intended for internal use, e.g. as input to
              traffic-light-controls.</para>
            </listitem>
          </itemizedlist>

          <para>Again, the explicit list of available attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              detector</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: Always &#34;lane_based&#34; or
              &#34;E2&#34; for this type of detectors (&#34;induct_loop&#34;
              is the default value)</para>
            </listitem>

            <listitem>
              <para><sgmltag>lane</sgmltag>: The id of the lane the detector
              shall be laid on. The lane must be a part of the network used.</para>
            </listitem>

            <listitem>
              <para><sgmltag>pos</sgmltag>: The position on the lane the
              detector shall be laid on in meters. See information about the
              same attribute within the detector loop description for further
              information.</para>
            </listitem>

            <listitem>
              <para><sgmltag>length</sgmltag>: The length of the detector in
              meters. If the detector grows over the lane&#39;s end (begin in
              fact), it is either cut off at the lane&#39;s length if the
              &#34;<sgmltag>cont</sgmltag>&#34;-attribute is false or not
              given or is continued on the predeceding lanes in the case the
              &#34;<sgmltag>cont</sgmltag>&#34;-attribute is set to true.</para>
            </listitem>

            <listitem>
              <para><sgmltag>freq</sgmltag>: The aggregation period the values
              the detector collects shall be summed up.</para>
            </listitem>

            <listitem>
              <para><sgmltag>file</sgmltag>: The path to the output file. The
              path may be relative.</para>
            </listitem>

            <listitem>
              <para><sgmltag>measures</sgmltag>: Should contain the list of
              measures to compute (see above) or &#34;ALL&#34; to compute all
              measures.</para>
            </listitem>
          </itemizedlist>

          <para>And the optional ones:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>style</sgmltag>: Obsolete/deprecated; Always xml
              by now</para>
            </listitem>

            <listitem>
              <para>cont: Holds the information whether detectors longer than
              a lane shall be cut off or continued (set it to true for the
              second case) default: false (detector lies on one lane only).</para>
            </listitem>

            <listitem>
              <para><sgmltag>time_treshold</sgmltag>: The time-based threshold
              that describes how much time has to pass until a vehicle is
              recognized as halting (in s, default: 1s).</para>
            </listitem>

            <listitem>
              <para><sgmltag>speed_treshold</sgmltag>: The speed-based
              threshold that describes how slow a vehicle has to be to be
              recognized as halting (in m/s, default: 5/3.6m/s).</para>
            </listitem>

            <listitem>
              <para><sgmltag>jam_treshold</sgmltag>: The minimum distance to
              the next standing vehicle in order to make this vehicle count as
              a participant to the jam (in m, default: 10m).</para>
            </listitem>

            <listitem>
              <para><sgmltag>keep_for</sgmltag>: Information for how long the
              memory of the detector has to be (in s, default: 1800s).</para>
            </listitem>

            <listitem>
              <para><sgmltag>measures</sgmltag>: Should contain the list of
              measures to compute (see above) or &#34;ALL&#34; to compute all
              measures (default: ALL).</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3>
          <title>E23-Detectors (Route-dependent Origin/Destination Detectors)</title>

          <para>... to be implemented ...</para>
        </sect3>

        <sect3>
          <title>E3-Detectors (Multi-Origin/Multi-Destination Detectors)</title>

          <para>The descriptions of E3-detectors have to include the set of
          entry- and the set of exit-cross-sections. Due to this, it is not
          possible to use a single tag to specify a detector. Instead, the
          description consists of the following parts:</para>

          <orderedlist>
            <listitem>
              <para>A beginning tag that describes some global attributes of
              the detector just as the descriptions of e1- and e2-detectors
              do. The format is either:</para>

              <para>a) <sgmltag>&#60;detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
              type=&#34;[multi_od|E3]&#34; file=&#34;<replaceable>&#60;OUTPUT_FILE&#62;</replaceable>&#34;
              freq=&#34;<replaceable>&#60;AGGREGATION_TIME&#62;</replaceable>&#34;
              [measures=&#34;<replaceable>&#60;MEASURES&#62;</replaceable>&#34;]
              [time_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
              [speed_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
              [keep_for=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]&#62;</sgmltag></para>

              <para>or:</para>

              <para>b) <sgmltag>&#60;e3-detector id=&#34;<replaceable>&#60;ID&#62;</replaceable>&#34;
              file=&#34;<replaceable>&#60;OUTPUT_FILE&#62;</replaceable>&#34;
              freq=&#34;<replaceable>&#60;AGGREGATION_TIME&#62;</replaceable>&#34;
              [measures=&#34;<replaceable>&#60;MEASURES&#62;</replaceable>&#34;]
              [time_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
              [speed_treshold=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]
              [keep_for=&#34;<replaceable>&#60;FLOAT&#62;</replaceable>&#34;]&#62;</sgmltag></para>

              <para>As one can see, no information about the detector&#39;s
              position is stored herein. They are stored in embedded tags
              instead (2. and 3.)</para>
            </listitem>

            <listitem>
              <para>A set of tags that describe the detector&#39;s entry
              points in the form:</para>

              <para><sgmltag>&#60;det_entry lane=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
              pos=&#34;<replaceable>&#60;POSITION_ON_LANE&#62;</replaceable>&#34;/&#62;</sgmltag></para>
            </listitem>

            <listitem>
              <para>A set of tags that describe the detector&#39;s exit points
              in the form:</para>

              <para><sgmltag>&#60;det_exit lane=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
              pos=&#34;<replaceable>&#60;POSITION_ON_LANE&#62;</replaceable>&#34;/&#62;</sgmltag></para>
            </listitem>

            <listitem>
              <para>A closing tag that must match the opening tag (1.):</para>

              <para>a) <sgmltag>&#60;/detector&#62;</sgmltag></para>

              <para>or</para>

              <para>b) <sgmltag>&#60;/e3-detector&#62;</sgmltag></para>
            </listitem>
          </orderedlist>

          <para>The following example</para>

          <para><sgmltag>&#60;e3-detector id=&#34;e3_1&#34; freq=&#34;300&#34;
          file=&#34;./output/e3_1.xml&#34;&#62;</sgmltag></para>

          <para><sgmltag> &#60;det_entry lane=&#34;myEdge0_0&#34;
          pos=&#34;0&#34;/&#62;</sgmltag></para>

          <para><sgmltag> &#60;det_entry lane=&#34;myEdge0_1&#34;
          pos=&#34;0&#34;/&#62;</sgmltag></para>

          <para><sgmltag> &#60;det_entry lane=&#34;myEdge2_0&#34;
          pos=&#34;0&#34;/&#62;</sgmltag></para>

          <para><sgmltag> &#60;det_entry lane=&#34;myEdge2_1&#34;
          pos=&#34;0&#34;/&#62;</sgmltag></para>

          <para><sgmltag>&#60;/e3-detector&#62;</sgmltag></para>

          <para>will build an e3-detector starting at either lane 0 or 1 of
          the edge called &#34;myEdge0&#34; and end at the same lane of
          &#34;myEdge2&#34;. All values will be computed as the default-value
          for measures is used and aggregated over a time of 300s. They will
          be written into the file &#34;<filename>e3_1.xm</filename>l&#34;
          lying in the subfolder of the folder the configuration was read
          in/the program has been started within.</para>

          <para>Most of the values have been discussed in the previous
          subchapters. The only thing that differs from e1/e2-detectors are
          the measures e3-detectors are able to compute. Possible values are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>MEAN_TRAVELTIME: A vehicle that entered the detector
              through an entry-cross-section and leaves it through a
              leave-cross-section will store it&#39;s traveltime (in seconds)
              and the leaving-time into the detector. These traveltimes of the
              vehicles that left during the requested interval are averaged.</para>
            </listitem>

            <listitem>
              <para>MEAN_NUMBER_OF_HALTINGS_PER_VEHICLE: A vehicle that
              entered the detector through an entry-cross-section and leaves
              it through a leave-cross-section will store it&#39;s number of
              haltings and the leaving-time into the detector. The
              halting-values of the vehicles that left during the requested
              interval are averaged.</para>
            </listitem>

            <listitem>
              <para>NUMBER_OF_VEHICLES: A vehicle that entered the detector
              through an entry-cross-section and leaves it through a
              leave-cross-section will store it&#39;s leaving-time into the
              detector. The vehicles that left the detector during the
              requested interval will be summed up.</para>
            </listitem>
          </itemizedlist>

          <para>As for e2-detectors, you can use the value &#34;ALL&#34; for
          the attribute measures to compute all values. This is also this
          attributes default value.</para>
        </sect3>

        <sect3>
          <title>E41-Detectors (Destination based Detectors)</title>

          <para>... to be implemented ...</para>
        </sect3>

        <sect3>
          <title>E42-Detectors (Edgebased Detectors)</title>

          <para>... to be implemented ...</para>
        </sect3>
      </sect2>

      <sect2>
        <title>Network State Dump</title>

        <para>In the hope that every user wants to know different things and
        is able to write a tool that parses this information from a not
        aggregated output, the network dump was the first output capability
        we&#39;ve implemented. In fact, no one uses it so far. We will
        describe how to generate this output and his format before we discuss
        his disadvantages.</para>

        <para>To force SUMO to build a file that contains the network dump,
        extend your command line (or configuration) parameter by
        <option>--output</option> (<option>-o</option>) <option><replaceable>&#60;FILE&#62;</replaceable></option>.
        <option><replaceable>&#60;FILE&#62;</replaceable></option> is hereby
        the name of the file the output will be written to. Any other file
        with this name will be overwritten, the destination folder must exist.</para>

        <para>The network dump is a xml-file containing for each time step
        every edge of the network with every lane of this edge with all
        vehicles on this lane. For each vehicle, his name, speed and position
        on his lane are written. A network dump-file looks like this:</para>

        <para><sgmltag>&#60;timestep id=&#34;<replaceable>&#60;TIME_STEP&#62;</replaceable>&#34;&#62;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;<replaceable>&#60;EDGE_ID&#62;</replaceable>&#34;&#62;</sgmltag></para>

        <para><sgmltag> &#60;lane id=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;&#62;</sgmltag></para>

        <para><sgmltag> &#60;vehicle id=&#34;<replaceable>&#60;VEHICLE_ID&#62;</replaceable>&#34;
        pos=&#34;<replaceable>&#60;VEH_POSITION&#62;</replaceable>&#34;
        speed=&#34;<replaceable>&#60;VEH_SPEED&#62;</replaceable>&#34;/&#62;</sgmltag></para>

        <para><sgmltag> ... more vehicles if any on this lane ...</sgmltag></para>

        <para><sgmltag> &#60;/lane&#62;</sgmltag></para>

        <para><sgmltag> ... more lanes if the edge possesses more ...</sgmltag></para>

        <para><sgmltag> &#60;/edge&#62;</sgmltag></para>

        <para><sgmltag> ... more edges ....</sgmltag></para>

        <para><sgmltag>&#60;/timestep&#62;</sgmltag></para>

        <para><sgmltag>... the next timestep ...</sgmltag></para>

        <para>Well, this output is very verbose. His main disadvantage is the
        size of the generated file. It&#39;s very easy to generate files that
        are several GB large within some minutes. This implicates the next
        problem with this output: no one can handle it. It would be of course
        possible to write some nice tools that parse the file (using a
        SAX-parser) and generate some meaningful information, but we do not
        know anyone who has made this. As a third problem one could state that
        the simulation&#39;s execution speed of course breaks down when such
        an amount of data must be written.</para>
      </sect2>

      <sect2>
        <title>Aggregated Lane States</title>

        <para>This information is far more feasible than the network dump. For
        each lane, his attributes, aggregated over a freely specifiable time
        interval are generated and written. To force SUMO to generate lane
        state dumps, you have to use two command line options: a)
        <option>--dump-basename <replaceable>&#60;PATH_AND_FILE_PREFIX&#62;</replaceable></option>
        describes where to write the dumps to and how the begin of the name
        is. b) <option>--dump-intervals <replaceable>&#60;INTERVAL&#62;</replaceable>[;<replaceable>&#60;INTERVAL&#62;</replaceable>]*</option>
        describes over what time the values shall be collected and aggregated
        (&#34;interval length&#34;). Each aggregation interval is written into
        an own, single file. The file name is made up from the base name and
        the aggregation interval: &#60;FILENAME&#62; =
        &#60;PATH_AND_FILE_PREFIX&#62;_&#60;INTERVAL&#62;.xml. An example:
        <option>--dump-basename=./output/lanedump --dump-intervals=300;600</option>
        will build two files: <filename>./output/lanedump_300.xml</filename>
        and <filename>./output/lanedump_600.xml</filename>.</para>

        <para>The lane state dump is a xml-file containing the aggregated
        values for each lane of an edge for each interval:</para>

        <para><sgmltag>&#60;netstats&#62;</sgmltag></para>

        <para><sgmltag> &#60;interval begin=&#34;<replaceable>&#60;INTERVAL_BEGIN&#62;</replaceable>&#34;
        end=&#34;<replaceable>&#60;INTERVAL_END&#62;</replaceable>&#34;</sgmltag></para>

        <para><sgmltag> &#60;edge id=&#34;<replaceable>&#60;EDGE_ID&#62;</replaceable>&#34;&#62;</sgmltag></para>

        <para><sgmltag> &#60;lane id=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
        traveltime=&#34;&#60;<replaceable>MEAN_TRAVEL_TIME&#62;</replaceable>&#34;
        speed=&#34;<replaceable>&#60;MEAN_SPEED&#62;</replaceable>&#34;
        speedsquare=&#34;<replaceable>&#60;SPEED_SQUARE&#62;</replaceable>&#34;
        density=&#34;<replaceable>&#60;MEAN_DENSITY&#62;</replaceable>&#34;
        noVehContrib=&#34;<replaceable>&#60;VEHICLE_NUMBER#1&#62;</replaceable>&#34;
        noVehEntire=&#34;<replaceable>&#60;VEHICLE_NUMBER#2&#62;</replaceable>&#34;
        noVehEntered=&#34;<replaceable>&#60;VEHICLE_NUMBER#3&#62;</replaceable>&#34;
        noVehLeft=&#34;<replaceable>&#60;VEHICLE_NUMBER#4&#62;</replaceable>&#34;
        /&#62;</sgmltag></para>

        <para><sgmltag> ... more lanes if the edge possesses more ...</sgmltag></para>

        <para><sgmltag> &#60;/edge&#62;</sgmltag></para>

        <para><sgmltag> ... more edges ....</sgmltag></para>

        <para><sgmltag> &#60;/interval&#62;</sgmltag></para>

        <para><sgmltag> ... further intervals ...</sgmltag></para>

        <para><sgmltag>&#60;/netstats&#62;</sgmltag></para>

        <para>It should be obvious, that <sgmltag><replaceable>&#60;INTERVAL_END&#62;</replaceable></sgmltag>
        is <sgmltag><replaceable>&#60;INTERVAL_BEGIN&#62;</replaceable></sgmltag>
        plus the interval length. The values written for each lane are:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>traveltime</sgmltag>:</para>

            <para>The mean travel time the vehicles needed to pass the lane.
            Only vehicles that pass the whole lane are regarded. Measure: s</para>
          </listitem>

          <listitem>
            <para><sgmltag>speed</sgmltag>:</para>

            <para>The mean speed the vehicles had when passing the lane. Only
            vehicles that pass the whole lane are regarded. Measure: m/s</para>
          </listitem>

          <listitem>
            <para><sgmltag>speedsquare</sgmltag>:</para>

            <para>Squared speed (?). Measure: m^2/s^2</para>
          </listitem>

          <listitem>
            <para><sgmltag>density</sgmltag>:</para>

            <para>The mean density on the lane during the interval. Only
            vehicles that pass the whole lane are regarded. Measure: veh/h</para>
          </listitem>

          <listitem>
            <para><sgmltag>noVehContrib</sgmltag>:</para>

            <para>The number of vehicles that were on the lane during the
            interval. All vehicles are regarded. Measure: n (veh)</para>
          </listitem>

          <listitem>
            <para><sgmltag>noVehEntire</sgmltag>:</para>

            <para>The number of vehicles that have passed the lane completely.
            Measure: n (veh)</para>
          </listitem>

          <listitem>
            <para><sgmltag>noVehEntered</sgmltag>:</para>

            <para>The number of vehicles that have entered the lane during the
            interval. Measure: n (veh)</para>
          </listitem>

          <listitem>
            <para><sgmltag>noVehLeft</sgmltag>:</para>

            <para>The number of vehicles that have left the lane during the
            interval. Measure: n (veh)</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2>
        <title>Vehicle Emission States &#38; Trip Durations</title>

        <para>This output contains the simulation-wide number of vehicles that
        are loaded, emitted, running, waiting to be emitted, have reached
        their destination and how long they needed to finish the route. The
        last value is normalised over all vehicles that have reached their
        destination so far. The information containing all those values is
        computed for each time step and the output file looks like following:</para>

        <para><sgmltag>&#60;emissions&#62;</sgmltag></para>

        <para><sgmltag> &#60;emission-state time=&#34;<replaceable>&#60;SIMULATION_TIME&#62;</replaceable>&#34;
        loaded=&#34;<replaceable>&#60;LOADED_VEHICLE_NUMBER&#62;</replaceable>&#34;
        emitted=&#34;<replaceable>&#60;EMITTED_VEHICLE_NUMBER&#62;</replaceable>&#34;
        running=&#34;<replaceable>&#60;RUNNING_VEHICLE_NUMBER&#62;</replaceable>&#34;
        waiting=&#34;<replaceable>&#60;NUMBER_OF_VEHICLES_WAITING_FOR_EMISSION&#62;</replaceable>&#34;
        ended=&#34;<replaceable>&#60;ENDED_VEHICLE_NUMBER&#62;</replaceable>&#34;
        meanTravelTime=&#34;<replaceable>&#60;MEAN_TRAVEL_TIME&#62;</replaceable>&#34;/&#62;</sgmltag></para>

        <para><sgmltag> ... further time steps ...</sgmltag></para>

        <para><sgmltag>&#60;/emissions&#62;</sgmltag></para>

        <para>You can force the simulation to generate this output using
        <option>--emissions-output <replaceable>&#60;FILENAME&#62;</replaceable></option>
        or <option>--emissions <replaceable>&#60;FILENAME&#62;</replaceable></option>.</para>
      </sect2>

      <sect2>
        <title>Trip Information</title>

        <para>This output contains the information about each vehicle&#39;s
        departure time, the time the vehicle wanted to start at (which may be
        lower than the real departure time) and the time the vehicle has
        arrived. Such an information is generated for each vehicle as soon as
        the vehicle has arrived its destination and is removed from the
        network. The format is as following:</para>

        <para><sgmltag>&#60;tripinfos&#62;</sgmltag></para>

        <para><sgmltag> &#60;tripinfo id=&#34;<replaceable>&#60;VEHICLE_ID&#62;</replaceable>&#34;
        start=&#34;<replaceable>&#60;DEPARTURE_TIME&#62;</replaceable>&#34;
        wished=&#34;<replaceable>&#60;WISHED_DEPARTURE_TIME&#62;</replaceable>&#34;
        end=&#34;<replaceable>&#60;ARRIVAL_TIME&#62;</replaceable>&#34;/&#62;</sgmltag></para>

        <para><sgmltag>&#60;/tripinfos&#62;</sgmltag></para>

        <para>The simulation is forced to generate this output using:
        <option>--tripinfo-output <replaceable>&#60;FILENAME&#62;</replaceable></option>
        or <option>--tripinfo <replaceable>&#60;FILENAME&#62;</replaceable></option>.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Vehicles Handling Revisited</title>

      <para>... to be described ...</para>

      <sect2>
        <title>Emitter</title>

        <para>... to be described ...</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Traffic Management and Theoretical Structures</title>

      <para>... to be described ...</para>

      <sect2>
        <title>Traffic Light Types and their Usage</title>

        <para>... to be described ...</para>
      </sect2>

      <sect2>
        <title>Variable Speed Signs (VSS)</title>

        <para>One of the trigger objects that may be specified within an
        additional file allows the simulation of variable speed signs. The
        syntax for such an object is: <sgmltag>&#60;trigger id=&#34;<replaceable>&#60;VSS_ID&#62;</replaceable>&#34;
        objecttype=&#34;lane&#34; objectid=&#34;<replaceable>&#60;LANE_ID&#62;</replaceable>&#34;
        attr=&#34;speed&#34; file=&#34;<replaceable>&#60;DEF_FILE&#62;</replaceable>&#34;/&#62;</sgmltag>.
        This trigger is typed to be a vss by the combination of the values of
        the attributes <sgmltag>objecttype=&#34;lane&#34;</sgmltag> and
        <sgmltag>attr=&#34;speed&#34;</sgmltag>. Although no other
        combinations are implemented so far, this combination forces the
        simulation to change the attribute &#34;speed&#34; of a
        &#34;lane&#34;-object, exactly what vss do. Of course, the vehicles
        themselves do not override this maximum velocity what does not exactly
        represent the reality.</para>

        <para>You may have noticed that a file name must be supplied, called
        <sgmltag>DEF_FILE</sgmltag> within the schema above. This file must
        contain the information about when a certain speed shall be set onto
        the lane. This file has the following format:</para>

        <para><sgmltag>&#60;vss&#62;</sgmltag></para>

        <para><sgmltag> &#60;step time=&#34;<replaceable>&#60;TIME&#62;</replaceable>&#34;
        speed=&#34;<replaceable>&#60;SPEED&#62;</replaceable>&#34;/&#62;</sgmltag></para>

        <para><sgmltag> &#60;step time=&#34;<replaceable>&#60;TIME&#62;</replaceable>&#34;
        speed=&#34;<replaceable>&#60;SPEED&#62;</replaceable>&#34;/&#62;</sgmltag></para>

        <para><sgmltag> ... further entries ...</sgmltag></para>

        <para><sgmltag> &#60;step time=&#34;<replaceable>&#60;TIME&#62;</replaceable>&#34;
        speed=&#34;<replaceable>&#60;SPEED&#62;</replaceable>&#34;/&#62;</sgmltag></para>

        <para><sgmltag>&#60;/vss&#62;</sgmltag></para>

        <para>Each <sgmltag>step</sgmltag> is a combination of the
        <sgmltag>time</sgmltag> the next new speed shall be set and the
        <sgmltag>speed</sgmltag> to set itself.</para>

        <para>A small example for usage of vss&#39; within SUMO may be found
        in <filename>&#34;data/examples/management/var_speed_signs/example1&#34;</filename>.</para>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="user_chp07">
    <title>Simulation-GUI</title>

    <para>The simulation-GUI (graphical user interface) is just a wrapper
    around the command line simulation. The normal procedure is to start the
    gui-version like any other Window-based application (double-click on it)
    and to load a simulation&#39;s description specified using a
    &#34;normal&#34; configuration-file as used by the simulation&#39;s
    command line version. After loading it - what may dure a longer time if
    the network is large or the simulation is forced to load many routes at
    once - the network shall appear. Your application should then look like
    displayed below (with your own network, of course).</para>

    <figure>
      <title>The GUI-Window with a loaded simulation (violet: names of the
      controls as used below)</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="./gfx/user/simcontrols.gif"
          format="GIF" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>You can now start your simulation using the &#34;play&#34;-button
    and/or manoeuvre within the network pressing one of the mouse buttons and
    moving the mouse. When moving the mouse within the window with the left
    button pressed, you&#39;ll move the network to the direction you move the
    mouse. When the mouse is moved with the right button pressed, you change
    the scale the network is displayed in, zooming into and out of the
    network.</para>

    <para>We will now discuss the different possibilities to use the graphical
    user interface more deeply.</para>

    <sect1>
      <title>Main Window Interface</title>

      <sect2>
        <title>Menu Bar</title>

        <sect3>
          <title>File-Menu</title>

          <para><itemizedlist spacing="compact"><listitem><para>Open
          Simulation...</para><para>Opens a file dialog that lets you choose a
          SUMO-configuration file that describes a complete simulation. The
          simulation described within this file will be loaded. Remark that
          you have to describe the simulation in full - no further extension
          is possible.</para><para>You can of course load a simulation if
          another one is already loaded. In this case, the previous simulation
          will be closed.</para></listitem><listitem><para>Reload Simulation
          <inlinegraphic fileref="./gfx/user/reload.gif" format="GIF" /></para><para>Reloads
          the previously opened simulation.</para></listitem><listitem><para>Close</para><para>Closes
          the loaded simulation.</para></listitem><listitem><para>[RECENT
          FILES]</para><para>if you have opened at least one file before, it
          will be displayed within this list. The list may contain up to ten
          files read previously.</para></listitem><listitem><para>Clear Recent
          Files</para><para>Clears the list of recent files.</para></listitem><listitem><para>Quit</para><para>Quits
          the application.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Edit-Menu</title>

          <para><itemizedlist spacing="compact"><listitem><para>Edit Chosen...</para><para>Opens
          a dialog that lets you load/save and edit the list of chosen items.</para></listitem><listitem><para>Edit
          Additional Weights...</para><para>This menu enables you to edit
          additional weights for edges. These additional weight descriptions
          may be saved into a file and read by the dua-router and his
          variants.</para></listitem><listitem><para>Edit Breakpoints...</para><para>This
          menu enables you to edit, load and save breakpoints. By now, the
          simulation will stop at one of the given brekpoints (simulation time
          steps) and can be then continued by pressing the
          &#34;play&#34;-button (<inlinegraphic fileref="./gfx/user/play.gif"
          format="GIF" />).</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Settings-Menu</title>

          <para><itemizedlist spacing="compact"><listitem><para>Application
          Settings...</para><para>By now, one can only set whether the
          application shall be closed automatically when the loaded simulation
          ends.</para></listitem><listitem><para>Simulation Settings...</para><para>Displays
          the settings as read from the configuration file. This item is only
          accessible if a simulation has been loaded.</para><caution><para>Under
          current development. (Better do not use it)</para></caution></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Windows-Menu</title>

          <para><itemizedlist spacing="compact"><listitem><para>Show Status
          Line</para><para>By pressing this menu item, you can switch the
          status line off and on.</para></listitem><listitem><para>Show
          Message Window</para><para>By pressing this menu item, you can
          switch the message window off and on.</para></listitem><listitem><para>Show
          Tool Bar</para><para>By pressing this menu item, you can switch the
          toolbar off and on.</para></listitem><listitem><para>Tile
          Horizontally</para><para>Reorders the position of windows.</para></listitem><listitem><para>Tile
          Vertically</para><para>Reorders the position of windows.</para></listitem><listitem><para>Cascade</para><para>Reorders
          the position of windows.</para></listitem><listitem><para>Close</para><para>Closes
          the uppermost window.</para></listitem><listitem><para>Clear Message
          Window</para><para>Deletes all contents from the message window.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Help-Menu</title>

          <para><itemizedlist spacing="compact"><listitem><para>About</para><para>Shows
          a small window with some information about SUMO.</para></listitem></itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>Tool Bar</title>

        <sect3>
          <title>File Operations</title>

          <para><itemizedlist spacing="compact"><listitem><para>Open Button</para><para>Opens
          a file dialog that lets you choose a SUMO-configuration file that
          describes a complete simulation. The simulation described within
          this file will be loaded. Remark that you have to describe the
          simulation in full - no further extension is possible.</para><para>You
          can of course load a simulation if another one is already loaded. In
          this case, the previous simulation will be closed.</para></listitem><listitem><para>Reload
          Button <inlinegraphic fileref="./gfx/user/reload.gif" format="GIF" /></para><para>Reloads
          the previously opened simulation.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Simulation Operations</title>

          <para><itemizedlist spacing="compact"><listitem><para>Play Button
          <inlinegraphic fileref="./gfx/user/play.gif" format="GIF" /></para><para>Starts
          the simulation. If a loaded simulation was not started before, it
          will begin with the step described by the b(egin)-parameter within
          the loaded configuration file. If the simulation was started and
          stopped, it will continue.</para><caution><para>It is not possible
          to restart a simulation, you have to reload it.</para></caution></listitem><listitem><para>Stop
          Button <inlinegraphic fileref="./gfx/user/stop.gif" format="GIF" /></para><para>Stops
          a running application. A stopped application can be continued using
          the play-button (see above).</para></listitem><listitem><para>Single
          Step Button <inlinegraphic fileref="./gfx/user/step.gif"
          format="GIF" /></para><para>Performs a single simulation step.</para></listitem><listitem><para>Current
          Step Field</para><para>After the loaded simulation has been started,
          the information about the current time step is displayed herein.</para></listitem><listitem><para>Simulation
          Speed Control</para><para>The value you can change using this
          control is the time the application waits between two simulation
          steps. The higher the value, the slower the simulation will run.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>Window Operations</title>

          <para><itemizedlist spacing="compact"><listitem><para>New
          Microscopic View - Button <inlinegraphic
          fileref="./gfx/user/new_window.gif" format="GIF" /></para><para>Opens
          a new window which displays the streets and vehicles moving on them.</para></listitem><listitem><para>New
          Lane-Aggregated View - Button <inlinegraphic
          fileref="./gfx/user/new_window.gif" format="GIF" /></para><para>Opens
          a new window which displays the streets and vehicles moving on them.</para></listitem></itemizedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Simulation Window Interfaces</title>

      <para>SUMO-GUI provides different views on the simulation. The
      microscopic view shows the vehicles running just the way as the
      simulation performs his work. Aggregated views show the situation on the
      streets by coloring lanes by an aggregated value. Vehicles are not shown
      within the aggregated view.</para>

      <caution>
        <para>Aggregated views need additional simulation time and memory. For
        larer netweorks it seems wise to switch them off using the menu-bar
        option <menuchoice><guimenu>Settings-&#62;Application
        Settings-&#62;Allow aggregated Views</guimenu></menuchoice></para>
      </caution>

      <sect2>
        <title>Common Controls</title>

        <sect3>
          <title>Tracking Settings</title>

          <para><itemizedlist spacing="compact"><listitem><para>Locate
          Junction - Button <inlinegraphic
          fileref="./gfx/user/locate_junction.gif" format="GIF" /></para><para>Opens
          a window that allows to choose a junction name from the set of
          junctions the network consists of. Pressing ok with a chosen
          junction zooms the view to this junction.</para></listitem><listitem><para>Locate
          Edge - Button <inlinegraphic fileref="./gfx/user/locate_edge.gif"
          format="GIF" /></para><para>Opens a window that allows to choose an
          edge name from the set of junctions the network consists of.
          Pressing ok with a chosen edge zooms the view to this edge.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>View Settings</title>

          <para><itemizedlist spacing="compact"><listitem><para>Recenter View
          - Button <inlinegraphic fileref="./gfx/user/recenter_view.gif"
          format="GIF" /></para><para>You can use this button to reset the
          view to show the whole network. After pressing this button, the view
          will be the same as after loading the simulation: The zoom factor
          will be reset to a value that lets the window display the whole
          simulation area and the middle of the loaded network will be place
          into the middle of the view.</para></listitem><listitem><para>Show
          Legend - Button <inlinegraphic fileref="./gfx/user/show_legend.gif"
          format="GIF" /></para><para>Switches the legend (only the scale) on
          and off.</para></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>View Settings</title>

          <para><itemizedlist spacing="compact"><listitem><para>Change Lane
          Colouring Scheme - Button <inlinegraphic
          fileref="./gfx/user/colour_lane.gif" format="GIF" /></para><para>The
          combobox allows you to choose how the view shall determine a
          displayed lane&#39;s colour. The following coluring schemes are
          avaliable for lanes:</para><itemizedlist spacing="compact"><listitem><para>black:
          All lanes are black</para></listitem><listitem><para>by purpose:
          normal lanes are coloured black, sources green, sinks red and
          internal lanes blue</para></listitem><listitem><para>by speed: The
          lanes are coloured by the speed allowed on them, blue for fast
          lanes, red for slow</para></listitem></itemizedlist></listitem><listitem><para>Show
          Grid - Button <inlinegraphic fileref="./gfx/user/show_grid.gif"
          format="GIF" /></para><para>Turns the visualisation f the grid the
          network is mapped onto on/off. This is rather a debugging feature.</para></listitem><listitem><para>Show
          Tool Tips - Button <inlinegraphic
          fileref="./gfx/user/show_tooltips.gif" format="GIF" /></para><para>If
          this button is activated, the id for the object the mouse pointer is
          over will be displayed.</para></listitem><listitem><para>Show Full
          Geometry - Button <inlinegraphic
          fileref="./gfx/user/show_geometry.gif" format="GIF" /></para><para>Switches
          between full and simple - geometry. The picture beyond shows the
          difference between full and simple geometry mode.</para><figure><title>The
          difference between simple (left) and full (right) geometry mode</title><mediaobject><imageobject><imagedata
          align="center" fileref="./gfx/user/simple_vs_full_geom.gif"
          format="GIF" /></imageobject></mediaobject></figure></listitem></itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>Additional Microscopic View Controls</title>

        <sect3>
          <title>Tracking Settings</title>

          <para><itemizedlist spacing="compact"><listitem><para>Locate Vehicle
          - Button <inlinegraphic fileref="./gfx/user/locate_vehicle.gif"
          format="GIF" /></para><para>Opens a window that allows to choose a
          vehicle name from the set of vehicle currently driving within the
          simulation. Pressing ok with a chosen vehicle zooms the view to this
          vehicle.</para><caution><para>Under current development. (Better do
          not use it, may terminate the application with an error)</para></caution></listitem></itemizedlist></para>
        </sect3>

        <sect3>
          <title>View Settings</title>

          <para><itemizedlist spacing="compact"><listitem><para>Change Vehicle
          Colouring Scheme - Button <inlinegraphic
          fileref="./gfx/user/colour_vehicle.gif" format="GIF" /></para><para>The
          combobox allows you to choose how the view shall determine a
          displayed vehicle&#39;s colour. The following coluring schemes are
          avaliable for vehicles:</para><itemizedlist spacing="compact"><listitem><para>by
          speed: The vehicle colour change continuously from blue to red with
          decreasing speed</para></listitem><listitem><para>specified: The
          loaded vehicle colours are used</para></listitem><listitem><para>by
          type: The vehicles are coloured as defined within the vehicle&#39;s
          type definition</para></listitem><listitem><para>by route: The
          vehicles are coloured as defined within the vehicle&#39;s route
          definition</para></listitem><listitem><para>random#1: Vehicles are
          coloured randomly (each vehicle has a certain colour)</para></listitem><listitem><para>random#2:
          Vehicles are coloured randomly (each vehicle has a certain colour);
          Quite the same as &#34;random#1&#34;, but a different method is used
          to compute the random colour</para></listitem><listitem><para>lanechange#1:
          ... to be described ...</para></listitem><listitem><para>lanechange#2:
          ... to be described ...</para></listitem><listitem><para>lanechange#3:
          ... to be described ...</para></listitem><listitem><para>waiting#1:
          ... to be described ...</para></listitem></itemizedlist></listitem><listitem><para>Change
          Lane Colouring Scheme - Button <inlinegraphic
          fileref="./gfx/user/colour_lane.gif" format="GIF" /></para><para>The
          combobox allows you to choose how the view shall determine a
          displayed lane&#39;s colour. The following coluring schemes are
          avaliable for lanes:</para><itemizedlist spacing="compact"><listitem><para>black:
          All lanes are black</para></listitem><listitem><para>by purpose:
          normal lanes are coloured black, sources green, sinks red and
          internal lanes blue</para></listitem><listitem><para>by speed: The
          lanes are coloured by the speed allowed on them, blue for fast
          lanes, red for slow</para></listitem><listitem><para>by selection:
          Selected lanes are coloures blueish, the other black</para></listitem></itemizedlist></listitem></itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>Additional Aggregated View Controls</title>

        <sect3>
          <title>View Settings</title>

          <para><itemizedlist spacing="compact"><listitem><para>Change Lane
          Colouring Scheme - Button <inlinegraphic
          fileref="./gfx/user/colour_lane.gif" format="GIF" /></para><para>The
          combobox allows you to choose how the view shall determine a
          displayed lane&#39;s colour. The following coluring schemes are
          avaliable for lanes:</para><itemizedlist spacing="compact"><listitem><para>by
          density: The lanes are coloured by the mean density of vehicles over
          them</para></listitem><listitem><para>by mean speed: The lanes are
          coloured by the mean speed of vehicles passing them, blue for fast
          lanes, red for slow</para></listitem><listitem><para>by mean halts:
          <caution><para>... not working, yet. ...</para></caution></para></listitem><listitem><para>black:
          All lanes are black</para></listitem><listitem><para>by purpose:
          normal lanes are coloured black, sources green, sinks red and
          internal lanes blue</para></listitem><listitem><para>by speed: The
          lanes are coloured by the speed allowed on them, blue for fast
          lanes, red for slow</para></listitem><listitem><para>by selection:
          Selected lanes are coloures blueish, the other black</para></listitem></itemizedlist></listitem><listitem><para>Remembering-factor
          dialer</para><para>This dialer enables you to change the
          &#34;memory&#34; of the aggregated view.</para></listitem></itemizedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Interacting with Objects</title>

      <sect2>
        <title>Display an Object&#39;s Name</title>

        <para>Each view has the possibility to display tool tips. If enabled
        using the &#34;<guibutton>Show Tool Tips</guibutton>&#34;-Button (<inlinegraphic
        fileref="./gfx/user/show_tooltips.gif" format="GIF" />) the name of an
        object will pop up in a yellow windows if the cursor is over the
        object. A second click on the &#34;<guibutton>Show Tool Tips</guibutton>&#34;-Button
        disables this feature.</para>

        <caution>
          <para>This feature does slow down the visualisation. Use should use
          this carefully and disable if not needed.</para>
        </caution>
      </sect2>

      <sect2>
        <title>Object Popup Menus</title>

        <para>If the cursor is over an object you can press down the right
        mouse button and after ahlf a second a popup menu will be shown that
        allows you some further interaction with the object. Normally, the
        following functions are available:</para>

        <para><itemizedlist spacing="compact"><listitem><para><guimenuitem>Center</guimenuitem>
        <inlinegraphic fileref="./gfx/user/recenter_view.gif" format="GIF" /></para><para>Changes
        the view in a manner that the current object lies within the the
        view&#39;s center.</para></listitem><listitem><para><guimenuitem>Add
        To Selected</guimenuitem> <inlinegraphic
        fileref="./gfx/user/show_grid.gif" format="GIF" /></para><para>Adds
        the object to the list of selected objects.</para></listitem><listitem><para><guimenuitem>Remove
        from Selected</guimenuitem> <inlinegraphic
        fileref="./gfx/user/show_tooltips.gif" format="GIF" /></para><para>Removes
        the object from the list of selected objects.</para></listitem><listitem><para><guimenuitem>Show
        Parameter </guimenuitem><inlinegraphic
        fileref="./gfx/user/show_geometry.gif" format="GIF" /></para><para>Opens
        a window in which the object&#39;s fixed and dynamic parameter are
        displayed.</para></listitem></itemizedlist></para>

        <para>Further, some objects allow an interaction, that means to change
        some of the object&#39;s parameter. You can access this using the
        command:</para>

        <para><itemizedlist spacing="compact"><listitem><para><guimenuitem>Manipulate</guimenuitem>
        <inlinegraphic fileref="./gfx/user/manip.gif" format="GIF" /></para></listitem></itemizedlist></para>
      </sect2>

      <sect2>
        <title>Object Selection</title>

        <para>From version 0.8. you are able to add every object that has a
        name (as shown if turning Tool Tips on) into a list of selected
        objects. You can select an object by holding the <keysym>Alt</keysym>-key
        and pressing the left mouse button when the mouse is over the object.
        Doing the same a second time will deselect the object again. You may
        wonder whether an object is selected or not. Use the lane colouring
        &#34;<guilabel>by selection</guilabel>&#34; from &#34;<guimenuitem>Change
        Lane Colouring Scheme</guimenuitem>&#34;. When this colouring scheme
        is used, selected lanes are shown blueish, the other black.</para>

        <para>The menu entry <menuchoice><guimenu>Edit-&#62;Edit Chosen...</guimenu></menuchoice>
        allows you to edit the list of selected objects by deselected ones you
        don&#39;t need. It also allows you to save the list of selected
        objects. The resulting file contains the names of the selected objects
        predeccesed by the object&#39;s type, one per line.</para>

        <caution>
          <para><guibutton>Load</guibutton> is not implemented, yet.</para>
        </caution>

        <caution>
          <para>The handling of selected items is not yet designed cmopletely.
          Parts of the gui&#39;s behavior may change in the next time.</para>
        </caution>
      </sect2>

      <sect2>
        <title>Parameter Windows</title>

        <para>If you choose the option &#34;<guimenuitem>Show Parameter</guimenuitem>&#34;
        from an object&#39;s popup menu, a window like the one displayed below
        will appear:</para>

        <figure>
          <title>A sample Parameter Window (for an induct loop in this case)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
              fileref="./gfx/user/parameter_window.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>This window conatins some of each object&#39;s parameter,
        including the parameter&#39;s name, its current value and the
        information is static (marked with a <inlinegraphic
        fileref="./gfx/user/no.gif" format="GIF" />) or dynamic (marked with a
        <inlinegraphic fileref="./gfx/user/ok.gif" format="GIF" />) within a
        simulation run.</para>

        <para>Pressing the right mouse button when being over a line marked as
        dynamic will show a small popup window with only a single command:
        &#34;<guimenuitem>Open in new Tracker</guimenuitem>&#34;. Choosing
        this option will allow you to open another window where this
        parameter&#39;s values will be shown as a time line over the
        simulation run.</para>

        <figure>
          <title>A sample Parameter Window (for the number of vehicles within
          a simulation in this case)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
              fileref="./gfx/user/tracker_example.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>You can change the aggregation time of the tracked values within
        this window using the combobox in this window&#39;s menu.</para>

        <figure>
          <title>A sample usage of the aggregation option (for an induct loop
          in this case, for aggregation times of 1s, 1min, 5min (from left to
          right))</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/tracker_agg.gif"
              format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>TL-Tracker Windows</title>

        <para>If you position your mouse over one of the red, green or yellow
        traffic light-bars that show the state of the traffic light and press
        the right mouse button for at least one second, the appearing pop-up
        includes a menu entry &#34;<guimenuitem>Show Phases</guimenuitem>&#34;.
        Choosing this menu item will show up a diagram that shows the states
        of the tl chronologically. Each pixel in x-direction shows the state
        of the tls of one second. The display contains the tl-states from the
        time the tracker has been opened, no scrolling aorund is supported.</para>

        <figure>
          <title>A sample usage of the tls-tracker</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/tlstracker.gif"
              format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="user_chp08">
    <title>Tips, Tricks &#38; Tools</title>

    <para>We want to supply some additional information that did not fit into
    the descriptions within the previous chapters. The next chapters are
    possibly the most interesting ones of this document as they describe some
    possibilities to ease the work.</para>

    <para>We will now discuss the different possibilities to use the graphical
    user interface more deeply.</para>

    <sect1>
      <title>Using Configuration Files</title>

      <para>Most simulations have to be executed more than only one time.
      Furthermore, some experiments require the execution of similar, slightly
      different settings, for example the same network with a different route
      set. To avoid the retyping of all the parameter at the input line, all
      of the main applications can be fed with a configuration file. This
      configuration file contains the values the user normally would give to
      the program at the command line. For example, instead of typing</para>

      <blockquote>
        <para>dua-router(.exe) --cell=<replaceable>myCellFile</replaceable>
        --net=<replaceable>mySUMONet.net.xml</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable>
        -b <replaceable>0</replaceable> -e <replaceable>3600</replaceable></para>
      </blockquote>

      <para>you can start the router with a configuration file only:</para>

      <blockquote>
        <para>dua-router(.exe) -c=<replaceable>myConfig.rou.cfg</replaceable></para>
      </blockquote>

      <para>The <option>-c <replaceable>&#60;FILE&#62;</replaceable></option>
      - option may be passed to all of the package&#39;s main applications.</para>

      <para>Of course, you have to build the configuration file &#34;<filename>myConfig.rou.cfg</filename>&#34;
      first. You can find templates for configuration files within the
      data/cfg_templates - folder and all examples coming with the release
      contain configuration files, too.</para>

      <para>A configuration file is a simple XML-file in which each of the
      command line parameter is represented as a XML-element with the
      parameter&#39;s value being given as text between the begin and end tag
      of this parameter. So if you want to set a parameter &#34;foo&#34; to
      the value &#34;bar&#34; within your configuration file, write
      <sgmltag>&#60;foo&#62;bar&#60;foo/&#62;</sgmltag> into the configuration
      file. Do not forget that each XML-file has to have a root element, so
      that the whole configuration file would look like this:</para>

      <para><sgmltag>&#60;configuration&#62;</sgmltag></para>

      <para><sgmltag> &#60;foo&#62;bar&#60;foo/&#62;</sgmltag></para>

      <para><sgmltag>&#60;/configuration&#62;</sgmltag></para>

      <para>Between the starting at the ending tag, any type of values may be
      set, use a &#39;x&#39; to mark boolean values as set. If a parameter
      allows a set of values (normally separated by a &#39;;&#39;), you have
      to use a single element and embed these value into it as you would on
      command line. A different approach will maybe be invented in future.</para>
    </sect1>

    <sect1>
      <title>Using generated XML-Files</title>

      <para>All but imported files used by SUMO use XML as format. This makes
      their usage not as straightforward as plain CSV-file, for example, but
      with some additional tools, these files are far more flexible and
      powerful. Some tools can be found within the tools/-folder coming with
      the release.</para>
    </sect1>
  </chapter>

  <appendix id="user_apa">
    <title>Naming Conventions</title>

    <para>To ease the usage of the supplied files, all of which are within a
    XML-derivate, we use a naming convention for the file extensions to allow
    a distinction between the contents with a single look. The list of used
    extensions is showed below. We of course highly encourage you to use this
    pattern, but if you have a better idea, let us know.</para>

    <itemizedlist>
      <listitem>
        <para>Configuration files:<itemizedlist spacing="compact"><listitem><para>*.sumo.cfg</para><para>Configuration
        file for SUMO (both command line and GUI-version)</para></listitem><listitem><para>*.netc.cfg</para><para>Configuration
        file for the netconverter/-builder</para></listitem><listitem><para>*.dua.cfg</para><para>Configuration
        file for the dua-router</para></listitem><listitem><para>*.jtr.cfg</para><para>Configuration
        file for the jtr-router</para></listitem><listitem><para>*.od2t.cfg</para><para>Configuration
        file for the O/D to trip converter</para></listitem></itemizedlist></para>
      </listitem>

      <listitem>
        <para>Data files:<itemizedlist spacing="compact"><listitem><para>*.net.xml</para><para>sumo
        - network file</para><para>Contents:</para><para>Standard: edges with
        lanes and other attributes; junction definitions;</para><para>Optional:
        all other simulation information</para></listitem><listitem><para>*.log.xml</para><para>sumo
        - junction logics file</para><para>Contents:</para><para>Contents: The
        definitions of junction logics</para></listitem><listitem><para>*.rou.xml</para><para>sumo
        - routes file</para><para>Contents: Standard: vehicle type
        definitions, route definitions, vehicle definitions</para></listitem><listitem><para>*.add.xml</para><para>sumo
        - additional definitions file</para><para>Contents: The definitions of
        detectors to build, sources to build etc.</para></listitem><listitem><para>*.out.xml</para><para>sumo
        - output file</para><para>Contents: The &#34;raw&#34; output with
        edges, lanes and vehicles on them</para></listitem><listitem><para>*.edg.xml</para><para>sumo-netconvert
        - edges file</para><para>Contents: definitions of edges to build the
        network from</para></listitem><listitem><para>*.nod.xml</para><para>sumo-netconvert
        - nodes file</para><para>Contents: definitions of nodes to build the
        network from</para></listitem><listitem><para>*.con.xml</para><para>sumo-netconvert
        - connection file</para><para>Contents: definitions of nodes to build
        the network from</para></listitem></itemizedlist></para>
      </listitem>

      <listitem>
        <para>Other used file types<itemizedlist spacing="compact"><listitem><para>*.inp</para><para>VISSIM
        network files</para></listitem><listitem><para>*.net</para><para>VISUM
        network files</para></listitem><listitem><para>Destinations.txt,
        Detectors.txt, Flows.txt, Generators.txt, HVdests.txt, Incidents.txt,
        IntLinks.txt, Lanes.txt, Links.txt, Nodes.txt, Project Vars.txt,
        Signal Groups.txt, Signal Phases.txt, Signals.txt</para><para>ARTEMIS
        input files</para></listitem><listitem><para>*.edg</para><para>CELL
        edge files</para></listitem><listitem><para>*.nod</para><para>CELL
        node files</para></listitem><listitem><para>*.driver</para><para>CELL
        driver files</para></listitem><listitem><para>*.rinfo</para><para>CELL
        route files</para></listitem><listitem><para>*.rindex</para><para>index
        files generated for CELL route files</para></listitem></itemizedlist></para>
      </listitem>
    </itemizedlist>
  </appendix>

  <appendix id="user_apb">
    <title>Included Data</title>

    <sect1>
      <title>Configuration File Templates</title>

      <para>You can find the templates for each of the package&#39;s
      application&#39;s configuration files within the folder
      &#34;[SUMO]/data/cfg_templates&#34;.</para>
    </sect1>

    <sect1>
      <title>Included Examples</title>

      <sect2>
        <title>Basic Examples</title>

        <para>Some shorter networks, mainly for testing purposes are included
        and may be found within the <filename>&#34;[SUMO]/data/examples&#34;</filename>
        - folder. In respect to their shape, they are named
        <filename>&#34;eight...&#34;</filename>, <filename>&#34;cross...&#34;</filename>
        and <filename>&#34;box...&#34;</filename>. The coarse appearance of
        these networks is shown below.</para>

        <para>You may have noticed, that different networks are supported with
        the same name begin. They differ in the number of lanes the edges have
        and whether a possibly existing junction is a simple right-of-way or a
        traffic light junction. The name pattern is as follows [SHAPE]<varname>X</varname>l
        for networks with right-of-way junctions, where <varname>X</varname>
        is the number of lanes and [SHAPE]<varname>X</varname>ltl for networks
        with a traffic light. [SHAPE] is the name of the coarse shape of the
        network as shown above.</para>
      </sect2>
    </sect1>
  </appendix>

  <appendix id="user_apc">
    <title>Error Messages</title>

    <para>Here, only errors that should occur to normal users are reported.
    Some more errors exist but should occur only if the network is invalid
    what should not happen when using networks generated by sumo-netconvert or
    sumo-netgen. As said before, we do not expect a normal user to build a
    network &#34;by hand&#34;. If you are a developer and an error occurs that
    is not in the list below, take a look into the developer documentation.</para>

    <caution>
      <para>This list is not up-to-date. We have to rework it. Please contact
      us if an unlisted error occures.</para>
    </caution>

    <itemizedlist spacing="compact">
      <listitem>
        <para><errorcode>No option with the name &#39;[NAME]&#39; exists.</errorcode><blockquote><para>You
        are trying to set an option on the command line that is not known to
        sumo.</para><para>You may have dispelled an option. View Appendix A
        for a list of known options and their correct spelling.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The option &#39;[NAME]&#39; is not a boolean
        attribute and so needs a value.</errorcode><blockquote><para>A
        non-boolean option has no parameter supplied. An example: you have
        typed &#34;sumo -n&#34;, but the option &#34;-n&#34; needs a value
        like &#34;-n ./nodes.xml&#34;.</para><para>Always supply a parameter
        for parameterised options.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>A value for the option &#39;[NAME]&#39; was already
        set. Possible synonyms: [SYNONYMS]</errorcode><blockquote><para>You
        are setting an option twice. An example: you have typed &#34;sumo -n
        [FILE1] --net [FILE2]&#34;. This is not possible. A list of possible
        synonyms is supported.</para><para>Set a value only once. When you are
        sure you have specified the value only once on the command line, your
        configuration file may contain two definitions for the value. A value
        may be defined as well in the configuration file as on the command
        line but never twice in each of them.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The current parameter &#39;[NAME1]&#39; and
        the parameter &#39;[NAME2]&#39; do both need a value.</errorcode><blockquote><para>You
        are trying to use a single value for two parameters. An example:
        &#34;sumo -nj [FILE1]&#34; or &#34;sumo -nj [FILE1] [FILE2]&#34; is
        not allowed as the parameter may not be assigned to either the network
        or the junctions. Only boolean options may be coupled with other
        options.</para><para>Split the options when using parameterised
        options.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The configurations file &#39;[NAME]&#39; could not be
        found.</errorcode><blockquote><para>The name for the configuration
        file is not valid.</para><para>Even if you did not specify a
        configuration file, it is loaded as default. Use the option
        &#34;-C&#34; when you don&#39;t wish to use any configuration file.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The named junctions folder &#39;[NAME]&#39;
        does not exist.</errorcode><blockquote><para>You have specified a
        folder for your junction logics that does not exist.</para><para>You
        have to use a valid folder for your junctions.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: No simulation file (-n) specified.</errorcode><blockquote><para>You
        forgot to specify a file containing the road network to use.
        Attention! The file is not examined to be valid, this error only
        occurs when the user did not give the name of the file. When it does
        not exist or is invalid, other errors are produced.</para><para>You
        have to specify a network file using &#34;-n [FILE]&#34; where [FILE]
        is the name of the network file.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The begin of the simulation (-b) is not
        specified.</errorcode><blockquote><para>You forgot to specify the
        begin of the simulation.</para><para>Use &#34;-b [TIME]&#34; to
        specify the simulation-time the simulation shall begin at where [TIME]
        is a numerical value.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The end of the simulation (-e) is not
        specified.</errorcode><blockquote><para>You forgot to specify the end
        of the simulation.</para><para>Use &#34;-e [TIME]&#34; to specify the
        simulation-time the simulation shall end at where [TIME] is a
        numerical value.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The output file &#39;[NAME]&#39; can not be
        build.</errorcode><blockquote><para>The output file can not be build.
        This may be due to trying to save the file into a folder that does not
        exist.</para><para>Use a valid name a file may be created under for
        your output. Check whether the folder you want to generate the file in
        exists.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error during XML-initialisation: [MORE TEXT]</errorcode><blockquote><para>An
        error while the initialisation of the XML-importer occurred.</para><para>In
        fact, this is an error produced by XERCES. The only explanation we
        have is that you are using an inappropriate version of XERCES.
        Remember to use a C++ - XERCES version over 1.5 and fits to your
        system (Windows, Linux, Solaris etc.)</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>An exception occured! Type: UTFDataFormatException,
        Message: invalid byte 2 (L) of a 2-byte-sequence.</errorcode><blockquote><para>Your
        network obviously uses a name that contains non-latin characters.
        Older versions of xerces seemed to work with such names, although
        it&#39;s against the XML-specifications, newer are not. You have to
        convert them within your input files (mainly within the file used to
        build the network) and rebuild the network then.</para><para>If you
        are a programme, you also may take a look at the conversion routine
        within the class <classname>StringUtils</classname> called
        <methodname>convertUmlaute</methodname> and try to patch the values to
        replace within him.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>An XML-error occurred: [MORE TEXT]</errorcode><blockquote><para>Your
        file is corrupt in a way that our XML-importer XERCES is not able to
        parse it. This may happen when you forgot to open a tag before closing
        it or when using non-ASCII characters.</para><para>This error always
        comes with a deeper explanation, so you may find the error quite easy.
        If you do not see any error, you have to look into an XML-description
        or try to load the document into A XML-development tool.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>&#34;Empty route ([NAME])&#34; or &#34;The list
        belonging to the &#39;[TYPE]&#39; with the id &#39;[NAME]&#39; must
        not but is empty&#34;</errorcode><blockquote><para>You have specified
        an empty route. This is not valid.</para><para>Remove the route or
        insert at least one edge into it.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The id of the object [TYPE] is missing in the
        description.</errorcode><blockquote><para>An object from your
        definition which type is given in [TYPE] does not have an id (name).</para><para>Insert
        ids for all used objects.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The description of the object &#39;[TYPE]&#39; with
        the id &#39;[NAME]&#39; is not complete.</errorcode><blockquote><para>At
        least one of the needed values for an object is not given. The type of
        the object is given in [TYPE], it&#39;s name in [NAME]. In the case of
        a vehicle, this could be the type, the route or the depart time. The
        missing of the id is reported by another error message.</para><para>Check
        your file for missing values.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The object [TYPE] with the id [NAME] is not known</errorcode><blockquote><para>You
        have references an object of the type [TYPE] with the name [NAME] that
        you did not define in the file. Such an error may occur when you for
        instance wish to use a vehicle of the type &#34;VW Beetle&#34; but
        have not defined a vehicle type named &#34;VW Beetle&#34;.</para><para>Insert
        a definition for TYPE with the id NAME or use a given id in your file.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Another [TYPE] with the id [NAME] exists</errorcode><blockquote><para>You
        are using an id twice for two objects of the same type.</para><para>All
        objects of a type have to have unique ids.</para></blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The list belonging to the &#39;[TYPE]&#39; with the
        id &#39;[NAME]&#39; must not but is empty</errorcode><blockquote><para>The
        information you have specified needs values, you did not supply.</para><para>Supply
        all needed information.</para></blockquote></para>
      </listitem>
    </itemizedlist>
  </appendix>
</book>