<?xml version="1.0" encoding="UTF-8"?>
<book>
  <bookinfo>
    <title>SUMO - More on...</title>

    <author>
      <firstname>Daniel</firstname>

      <surname>Krajzewicz</surname>

      <affiliation>
        <address><email>Daniel.Krajzewicz@dlr.de</email></address>
      </affiliation>
    </author>

    <author>
      <firstname>Danilot</firstname>

      <surname>Tete Boyom</surname>
    </author>

    <releaseinfo>$Revision$</releaseinfo>
  </bookinfo>

  <toc></toc>

  <chapter id="more_dua">
    <title>More on... Dynamic User Assignment</title>

    <para>This chapter is meant to be an add-on to the <ulink
    url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml">user
    documentation</ulink>. We will not discuss how to perform the DUA using
    SUMO, herein, this is described within chapter "<ulink
    url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-dua">Dynamic
    User Assignment</ulink>" of the <ulink
    url="http://sumo.sourceforge.net/docs/userdocs.shtml">user
    documentation</ulink>. What we would like to do instead is to talk some
    deeper aspects using a examples.</para>

    <para><emphasis>Audience:</emphasis> users</para>

    <sect1>
      <title>DUA on the City of Magdeburg from the INVENT Project</title>

      <sect2>
        <title>Prerequisites</title>

        <para>The next picture shows the network we have used within the
        project "INVENT". It was given to us as an VISUM network. As
        VISUM-routes normally start at explicite feeding edges, we could
        reduce the network by removing geometry nodes. The routes were given
        as OD-matrices in a ptv-Format. They define the flows for the time
        betwee 5am and 12pm. After converting the matrices using
        <application>OD2TRIPS</application> into trips we were able to begin
        with the DUA. The assignment was made using the
        <filename>iterate.pl</filename> - script described here (tbd).</para>

        <figure>
          <title>The network of City of Magdeburg used within INVENT as shown
          by SUMO</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/more/magdeburg_sumo.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>Evaluations of the DUA</title>

        <para>The DUA has been run 40 times in order to check the behaviour of
        the algorithm. As output, we generated the vehicle emissions (see
        chapter tbd), vehicle trip duration (see chapter tbd) and edge-based
        dumps (see chapter TBD), the latest with aggregation times of 150s,
        300s and 900s.</para>

        <para>We will now examine the data generated, starting with the
        vehicle emissions file.</para>

        <sect3>
          <title>Development of Vehicle Emissions</title>

          <para>The vehicle emissions file (see chapter tbd) gives information
          about how many vehicles were loaded/runnning and have started/ended
          for each time stemp. Additionally, the time the simulation needed to
          compute the step is written.</para>

          <sect4>
            <title>Running Vehicles</title>

            <para>The next picture shows the development of the number of
            vehicles within the simulation over the dua iteration process.
            Every 5th iteration is shown. The plot was done using the
            following gnuplot command after converting the xml-output into
            files readable by gnuplot:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "veh"
gnuplot&gt; plot "emissions_0.txt" u 1:4 w l, "emissions_5.txt" u 1:4 w l, \
   "emissions_10.txt" u 1:4 w l, "emissions_15.txt" u 1:4 w l, \
   "emissions_20.txt" u 1:4 w l, "emissions_25.txt" u 1:4 w l, \
   "emissions_30.txt" u 1:4 w l, "emissions_35.txt" u 1:4 w l</screen>

            <figure>
              <title>Development of running vehicles over time and dua
              iteration step (iteration step number is increased by 5)
              (tbd)</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="./gfx/more/veh_time1.gif"
                             format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>Lets review what we see:</para>

            <orderedlist>
              <listitem>
                <para>The number of running vehicles decreases with each
                step</para>

                <para>What we see here in fact is exactly the reason for using
                a dynamic user assignment. The large number of vehicles within
                the first iterations indicates that new vehicles are inserted
                into the network while the previously inserted have not yet
                left. The reason why previously inserted vehicles are still in
                the net is that they got stocked in jams. And the jams occured
                because all vehicles are trying to use the same route.</para>
              </listitem>

              <listitem>
                <para>Not every following iteration step is better than the
                previous</para>

                <para>It may be supposes that this may only be due to the
                dynamic changes within the simulation. That means, that both
                small changes within the routes' distribution and the
                stochasticity in the microscopic model may yield in a larger
                jam which breaks down the network's capacity. Nevertheless, it
                is also possible that the microscopic model is not flexible
                enough not to cause the network to be free of jams and
                grid-locks as the reality is.</para>
              </listitem>
            </orderedlist>

            <para>Now let's recheck the last steps (step 30-39) using:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "veh"
gnuplot&gt; plot "emissions_30.txt" u 1:4 w l, "emissions_31.txt" u 1:4 w l, \
   "emissions_32.txt" u 1:4 w l, "emissions_33.txt" u 1:4 w l, \
   "emissions_34.txt" u 1:4 w l, "emissions_35.txt" u 1:4 w l, \
   "emissions_36.txt" u 1:4 w l, "emissions_37.txt" u 1:4 w l, \
   "emissions_38.txt" u 1:4 w l, "emissions_39.txt" u 1:4 w l</screen>

            <figure>
              <title>Development of running vehicles over time in steps 30-39
              (tbd)</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="./gfx/more/veh_time2.gif"
                             format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>If we remove those "broken" assignments, we can see that the
            development is almost closed at step 30 and only a small advantage
            can is done:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "veh"
gnuplot&gt; plot "emissions_30.txt" u 1:4 w l, "emissions_31.txt" u 1:4 w l, \
   "emissions_32.txt" u 1:4 w l, "emissions_33.txt" u 1:4 w l, \
   "emissions_36.txt" u 1:4 w l, "emissions_37.txt" u 1:4 w l, \
   "emissions_38.txt" u 1:4 w l, "emissions_39.txt" u 1:4 w l</screen>

            <figure>
              <title>Development of running vehicles over time in steps 30-39,
              step 34 and 35 excluded (tbd)</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="./gfx/more/veh_time3.gif"
                             format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>It is not clear whether it is necessary to try the really
            optimal approach. One can assume that in reality, some drivers are
            still passing major roads they know without asking about a shorter
            possibility. As the next picture shows, the dua of step !!! is
            fitting very well to the data we got from detectors within
            Magdeburg.</para>

            <para>One can state, that the dua is finished if the vehicles
            running in a simulation step is not changing over some iteration
            step dramatically. A real function or algorithm for evaluating
            this but is still missing.</para>
          </sect4>

          <sect4>
            <title>Ended Vehicles</title>

            <para>Almost the same information can be gained using the
            information about the number of vehicles that have left the
            simulation stored within the emissions file. As one may see within
            the next picture, the number of vehicles which have left the
            simulation is increasing with the iteration step. This of course
            has the same reasons as described within the previous chapter: the
            vehicles get stocked in the simulation due to jams.</para>

            <figure>
              <title>Development of ended vehicles over time and dua iteration
              step (iteration step number is increased by 5) (tbd)</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center"
                             fileref="./gfx/more/ended_time1.gif" format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>This picture was done using:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "ended"
gnuplot&gt; plot "emissions_0.txt" u 1:6 w l, "emissions_5.txt" u 1:6 w l, \
   "emissions_10.txt" u 1:6 w l, "emissions_15.txt" u 1:6 w l, \
   "emissions_20.txt" u 1:6 w l, "emissions_25.txt" u 1:6 w l, \
   "emissions_30.txt" u 1:6 w l, "emissions_35.txt" u 1:6 w l</screen>
          </sect4>

          <sect4>
            <title>Waiting Vehicles and the Mean Waiting Time</title>

            <para>That vehicles are stocked may be also visualised using the
            number of waiting vehicles. Vehicles are declared as waiting if
            they can not be emitted into the network, because their departure
            edge is full. The next picture shows the development of this value
            during the simulations and the dua-steps.</para>

            <figure>
              <title>Development of waiting vehicles over time and dua
              iteration step (iteration step number is increased by 5)
              (tbd)</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center"
                             fileref="./gfx/more/waiting_time1.gif"
                             format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>This picture was done using:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "waiting"
gnuplot&gt; plot "emissions_0.txt" u 1:5 w l, "emissions_5.txt" u 1:5 w l, \
   "emissions_10.txt" u 1:5 w l, "emissions_15.txt" u 1:5 w l, \
   "emissions_20.txt" u 1:5 w l, "emissions_25.txt" u 1:5 w l, \
   "emissions_30.txt" u 1:5 w l, "emissions_35.txt" u 1:5 w l</screen>

            <para>This is also visible when evaluating the mean waiting
            time:</para>

            <figure>
              <title>Development of the mean waiting time over time and dua
              iteration step (iteration step number is increased by 5)
              (tbd)</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center"
                             fileref="./gfx/more/meanwaitingtime_time1.gif"
                             format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>This picture was done using:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "mean waiting time"
gnuplot&gt; plot "emissions_0.txt" u 1:7 w l, "emissions_5.txt" u 1:7 w l, \
   "emissions_10.txt" u 1:7 w l, "emissions_15.txt" u 1:7 w l, \
   "emissions_20.txt" u 1:7 w l, "emissions_25.txt" u 1:7 w l, \
   "emissions_30.txt" u 1:7 w l, "emissions_35.txt" u 1:7 w l</screen>
          </sect4>

          <sect4>
            <title>Mean Travel Time</title>

            <para>The next picture shows how dramatically the dua changes the
            mean travel time.</para>

            <figure>
              <title>Development of the mean travel time over time and dua
              iteration step (iteration step number is increased by 5)
              (tbd)</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center"
                             fileref="./gfx/more/meantraveltime_time1.gif"
                             format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>This picture was done using:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "mean travel time"
gnuplot&gt; plot "emissions_0.txt" u 1:8 w l, "emissions_5.txt" u 1:8 w l, \
   "emissions_10.txt" u 1:8 w l, "emissions_15.txt" u 1:8 w l, \
   "emissions_20.txt" u 1:8 w l, "emissions_25.txt" u 1:8 w l, \
   "emissions_30.txt" u 1:8 w l, "emissions_35.txt" u 1:8 w l</screen>

            <para>... and for the last 10 steps:</para>

            <figure>
              <title>Development of the mean travel time over time and dua
              iteration step for the last iteration steps</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center"
                             fileref="./gfx/more/meantraveltime_time2.gif"
                             format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>This picture was done using:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "mean travel time"
gnuplot&gt; plot "emissions_30.txt" u 1:8 w l, "emissions_31.txt" u 1:8 w l, \
   "emissions_32.txt" u 1:8 w l, "emissions_33.txt" u 1:8 w l, \
   "emissions_34.txt" u 1:8 w l, "emissions_35.txt" u 1:8 w l, \
   "emissions_36.txt" u 1:8 w l, "emissions_37.txt" u 1:8 w l, \
   "emissions_38.txt" u 1:8 w l, "emissions_39.txt" u 1:8 w l</screen>

            <para>... and for those last steps where no vehicle
            blocked:</para>

            <figure>
              <title>Development of the mean travel time over time and dua
              iteration step for the last and valid iteration steps</title>

              <mediaobject>
                <imageobject>
                  <imagedata align="center"
                             fileref="./gfx/more/meantraveltime_time3.gif"
                             format="GIF" />
                </imageobject>
              </mediaobject>
            </figure>

            <para>using:</para>

            <screen>gnuplot&gt; set xlabel "t"
gnuplot&gt; set ylabel "mean travel time"
gnuplot&gt; plot "emissions_30.txt" u 1:8 w l, "emissions_31.txt" u 1:8 w l, \
   "emissions_32.txt" u 1:8 w l, "emissions_33.txt" u 1:8 w l, \
   "emissions_36.txt" u 1:8 w l, "emissions_37.txt" u 1:8 w l, \
   "emissions_38.txt" u 1:8 w l, "emissions_39.txt" u 1:8 w l</screen>

            <para>One may see that for the last steps of the last iterations,
            the mean travel time differs only by 30s. This is really not that
            important...</para>
          </sect4>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Tools</title>

      <sect2>
        <title>iterate.pl</title>

        <para>tbd</para>
      </sect2>
    </sect1>
  </chapter>
</book>