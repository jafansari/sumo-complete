<?xml version="1.0" encoding="UTF-8"?>
<book>
  <bookinfo>
    <title id="more_arcview">SUMO - More on... Parsing ArcView Files</title>

    <author>
      <firstname>Daniel</firstname>

      <surname>Krajzewicz</surname>

      <affiliation>
        <address><email>Daniel.Krajzewicz@dlr.de</email></address>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>
  </bookinfo>

  <toc></toc>

  <chapter id="more_arcview-intro">
    <title>Introduction</title>

    <sect1>
      <title>Document Information</title>

      <para>This document is a part of <emphasis>SUMO</emphasis> -
      <emphasis>S</emphasis>imulation of <emphasis>U</emphasis>rban
      <emphasis>MO</emphasis>bility. SUMO is an open source microscopic road
      traffic simulation. It can be found under <ulink
      url="http://sumo.sourceforge.net/">http://sumo.sourceforge.net/</ulink>.</para>

      <para>This document fits to version 0.9.4 We will try to keep it
      up-to-date with the next versions.</para>
    </sect1>

    <sect1>
      <title>Document Scope</title>

      <para>Several people had problems when trying to import streets from
      ArcView databases. The reason of this problem is that the original
      importer was meant to import networks from ArcView databases which use
      the scheme NavTeq-networks are stored in. During the time, we had to
      recognize that this scheme is used only very seldom. In the real world,
      every network supplier uses an own scheme and when importing networks
      from ArcView-databases, the user has to give some additional information
      about it.</para>

      <para>This documentation shows how to use the importer to import
      networks from other suppliers than NavTeq by example.</para>
    </sect1>

    <sect1>
      <title>Audience</title>

      <para>This document contains information for <emphasis>users</emphasis>
      who want to import ArcView-based maps.</para>
    </sect1>

    <sect1>
      <title>Document Structure</title>

      <para>The document describes the usage of the ArcView importer by giving
      examples. Each of the next chapter describes one example.</para>
    </sect1>
  </chapter>

  <chapter>
    <title id="more_arcview-frida">Importing the Network of Osnabrück from the
    Frida-project</title>

    <sect1>
      <title>Data Availability</title>

      <para>The network is available at the <ulink
      url="http://frida.intevation.org/">Frida-homepage</ulink> and is
      licensed under the GPL.</para>
    </sect1>

    <sect1>
      <title>Conversion</title>

      <para>Our main interest are of course the street networks within the
      package. The following files describe them:
      <filename>strassen.dbf</filename>, <filename>strassen.shp</filename>,
      <filename>strassen.shx</filename> ("strassen" is the german word for
      "streets"). When opening "<filename>strassen.dbf</filename>" we have to
      realize that there is only a few information stored herein - neither the
      node names are given nor the street attributes. Instead, the street
      attributes seem to be stored in an additional database and are
      references by type names (column "strTypID" - strassen_typ_id =
      street_type_id). Also, the names of this database's columns have other
      names than expected.</para>

      <para>Ok, let's solve these problems one after another.</para>

      <itemizedlist>
        <listitem>
          <para>Another field naming</para>

          <para>The only problem with this is that we can not extract street
          names properly. Still, within FRIDA, the edges are numbered. We have
          extended <application>NETCONVERT</application> by the possibility to
          use any information as node name and will use the shape id as
          name.</para>

          <para>The call has to be extended by: <option>--arcview.street-id
          strShapeID</option></para>
        </listitem>

        <listitem>
          <para>Missing node names</para>

          <para><application>NETCONVERT</application> can deal with networks
          which do not have node names; a small extension to
          <application>NETCONVERT</application> (available in version 0.9.4)
          solves the problem - now nodes are built when edges begin/end at the
          same position.</para>
        </listitem>

        <listitem>
          <para>Parsing street attributes from a type file</para>

          <para>The possibility to describe edges using attributes was already
          available in <application>NETCONVERT</application>; to use types in
          combination with ArcView-files, only a small extension was necessary
          (available in version 0.9.4). Still, the types have to be translated
          into XML. The generated file looks like this:</para>

          <programlisting><sgmltag>&lt;types&gt;</sgmltag>
   <sgmltag>&lt;!-- "noch nicht attributiert" (= not yet attributed) --&gt;</sgmltag>
   <sgmltag>&lt;type id="0"  priority="1" nolanes="1" speed="13.89"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Autobahn" (highway) --&gt;</sgmltag>
   <sgmltag>&lt;type id="1"  priority="5" nolanes="3" speed="41.67"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Bundesstrasse" (motorway) --&gt;</sgmltag>
   <sgmltag>&lt;type id="2"  priority="4" nolanes="1" speed="22.22"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Hauptstrasse" (main (city) road) --&gt;</sgmltag>
   <sgmltag>&lt;type id="3"  priority="3" nolanes="2" speed="13.89"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Nebenstrasse" (lower priorised (city) road) --&gt;</sgmltag>
   <sgmltag>&lt;type id="4"  priority="2" nolanes="1" speed="13.89"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Weg" (path) --&gt;</sgmltag>
   <sgmltag>&lt;type id="5"  priority="1" nolanes="1" speed="5"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Zone 30" (lower street with a speed limit of 30km/h) --&gt;</sgmltag>
   <sgmltag>&lt;type id="6"  priority="2" nolanes="1" speed="8.33"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Spielstrasse" (lower street where children may play (10km/h)) --&gt;</sgmltag>
   <sgmltag>&lt;type id="7"  priority="1" nolanes="1" speed="1.39"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Fussgaengerzone" (pedestrains zone) --&gt;</sgmltag>
   <sgmltag>&lt;type id="8"  priority="0" nolanes="1" speed="0.1"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "gesperrte Strasse" (closed street) --&gt;</sgmltag>
   <sgmltag>&lt;type id="9"  priority="0" nolanes="1" speed="0.1"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "sonstige Strasse" (something else) --&gt;</sgmltag>
   <sgmltag>&lt;type id="10" priority="0" nolanes="1" speed="0.1"/&gt;</sgmltag>
   <sgmltag>&lt;!-- "Fussweg" (way for pedestrians) --&gt;</sgmltag>
   <sgmltag>&lt;type id="11" priority="0" nolanes="1" speed="0.1"/&gt;</sgmltag>
<sgmltag>&lt;/types&gt;</sgmltag></programlisting>

          <para>The call has to be extended by: <option>-t
          frida.typ.xml</option> <option>--arcview.type-id
          strTypID</option></para>
        </listitem>
      </itemizedlist>

      <para>After having applied all those changes, the network was buildable,
      but looked quite messy. After having played with geocoordinate
      projections, this was fixed. So the call (so far) looks like
      this:</para>

      <screen>netconvert --arcview strassen -o frida.net.xml --arcview.street-id strShapeID \
   -t frida.typ.xml --arcview.type-id strTypID</screen>

      <para>The network looks as shown below:</para>

      <figure>
        <title>The converted Frida-network of Osnabrück (using allowed speed
        for coloring)</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="./gfx/more/frida_by_speed.gif" width="500" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Looking a bit deeper at the network, we had to realise two further
      problems. At first, highway on- and off-ramps are marked as "highway".
      this yields in a network where on- and offramps have the same number of
      lanes as the highways themselves. And it's definitely not fitting to
      reality, as the next picture shows:</para>

      <figure>
        <title>Detail view showing problems with (unidirectional) highway
        on-/off-ramps</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="./gfx/more/uni_highway_ramp.gif" width="500" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Furthermore, all streets are unidirectional - even highways. This
      makes the network not usable for traffic simulations when left in the
      orignal state. Trying to convert the network with
      <option>--arcview.all-bidi</option>, that means trying to insert edges
      bidirectional, makes the city usable, but the highways are even worse,
      now, because also the on-/off-ramps are bidirectional, then...</para>

      <figure>
        <title>Detail view showing problems with (bidirectional) highway
        on-/off-ramps</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="./gfx/more/bidi_highway_ramp.gif" width="500" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect1>

    <sect1>
      <title>Demand</title>

      <para>There is no demand available for Osnabrück - at least none we know
      about.</para>
    </sect1>

    <sect1>
      <title>Conlusion</title>

      <para>Using the current features we are able to parse the network from
      the Frida-project but we can not state it is completely usable for
      traffic simulations. At least areas around highways lack are not
      realistic, because on-/offramps lack an explicite declaration and are
      due to this as wide as the highways themselfes and furthermore, all
      streets within the network are coded in just one direction.</para>

      <para>Still, if one wants to simulate only the inner city traffic, the
      error made when inserting edges bidirectional should be small enough to
      get a working, realistic network at no cost.</para>
    </sect1>

    <sect1>
      <title>Data</title>

      <para>You can download the converted networks from the <ulink
      url="http://sumo.sourceforge.net/downloads/add_data.shtml#frida">additional
      data</ulink> page.</para>
    </sect1>
  </chapter>
</book>