/***************************************************************************
                          MSLaneChanger.icc  -  Handles lane-changes within 
                          the edge's lanes.
                             -------------------
    begin                : Fri, 01 Feb 2002
    copyright            : (C) 2002 by Christian Roessel
    email                : roessel@zpr.uni-koeln.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

// $Log$
// Revision 1.2  2002/10/28 12:57:19  dkrajzew
// more secure check in overlapWithHopped
//
// Revision 1.1  2002/10/16 14:48:26  dkrajzew
// ROOT/sumo moved to ROOT/src
//
// Revision 1.1  2002/05/29 17:09:21  croessel
// Initial commit.
//

/**************** INCLUDE HEADER FILES HERE ********************************/



/**************** DO NOT INCLUDE ANYTHING AFTER THIS POINT *****************/
#ifdef DISABLE_INLINE
#define inline
#endif

/**************** DEFINE INLINE FUNCTIONS HERE *****************************/

inline
bool 
MSLaneChanger::vehInChanger()
{
    // If there is at least one valid vehicle under the veh's in myChanger
    // return true.
    for ( ChangerIt ce = myChanger.begin(); ce != myChanger.end(); ++ce ) {

        if ( veh( ce ) != 0 ) {

            return true;
        }
    }
    return false;
}

//-------------------------------------------------------------------------//

inline
MSVehicle* 
MSLaneChanger::veh( ChangerIt ce )
{
    // If ce has a valid vehicle, return it. Otherwise return 0.
    if ( ce->veh != ce->lane->myVehicles.end() ) {

        return *( ce->veh );
    }
    return 0;
}

//-------------------------------------------------------------------------//

inline
bool 
MSLaneChanger::candiOnAllowed( ChangerIt target )
{
    assert( veh( myCandi ) != 0 );
    return veh( myCandi )->onAllowed( target->lane );
}

//-------------------------------------------------------------------------//

inline
bool
MSLaneChanger::overlapWithHopped( ChangerIt target )
{
	MSVehicle *v1 = target->hoppedVeh;
	MSVehicle *v2 = veh( myCandi );
    if ( v1!=0 && v2!=0 ) {
		return MSVehicle::overlap( v1, v2 );
    }
    return false;
}

//-------------------------------------------------------------------------//

#ifdef DISABLE_INLINE
#undef inline
#endif

// Local Variables:
// mode:C++
// End:
