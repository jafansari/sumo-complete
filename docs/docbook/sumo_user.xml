<?xml version="1.0" encoding="UTF-8"?>
<book>
  <bookinfo>
    <title>SUMO - Simulation of Urban MObility - User Documentation</title>

    <author>
      <firstname>Daniel</firstname>

      <surname>Krajzewicz</surname>

      <affiliation>
        <address><email>Daniel.Krajzewicz@dlr.de</email></address>
      </affiliation>
    </author>

    <author>
      <firstname>Christian</firstname>

      <surname>RÃ¶ssel</surname>

      <affiliation>
        <address><email>christian.roessel@dlr.de</email></address>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>
  </bookinfo>

  <toc></toc>

  <chapter id="user_chp01">
    <title>Introduction</title>

    <sect1 id="user_chp01-sumo">
      <title>What is SUMO?</title>

      <para>SUMO is a traffic simulation tool. It was primarily designed for
      urban street networks, but it may also be used for highway traffic
      simulations. In the near future it will be extended to model other
      transit modes simultaneously with ordinary car traffic.</para>
    </sect1>

    <sect1 id="user_chp01-opensource">
      <title>Why open source?</title>

      <para>Two thoughts stood behind the release of the package as open
      source. At first the fact that every traffic research organisation is
      forced to implement an own simulation package; some people are
      interested in traffic light optimisation, other try to find mistakes
      made during the design of a road network. Both need some kind of a
      simulation package and have to implement a framework containing input
      and output functions and other things from scratch. So the first idea
      was to give them a basic framework - containing all needed methods for a
      simulation - they can put own ideas into. The second idea is to supply a
      common test bed for models, especially car models, to the community to
      make them comparable. Due to different architectures of traffic
      simulations such comparisons on a wide scale are not possible by
      now.</para>
    </sect1>

    <sect1 id="user_chp01-features">
      <title>Features</title>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>High portability (using standard - c++ and portable
            libraries only)</para>
          </listitem>

          <listitem>
            <para>Collision free vehicle movement</para>
          </listitem>

          <listitem>
            <para>Different vehicle types</para>
          </listitem>

          <listitem>
            <para>Single-vehicle routing</para>
          </listitem>

          <listitem>
            <para>Multi-lane streets with lane changing</para>
          </listitem>

          <listitem>
            <para>Junction-based right-of-way rules</para>
          </listitem>

          <listitem>
            <para>Hierarchy of junction types</para>
          </listitem>

          <listitem>
            <para>A fast openGL graphical user interface</para>
          </listitem>

          <listitem>
            <para>Dynamic routing</para>
          </listitem>

          <listitem>
            <para>Manages networks with several 10.000 edges (streets)</para>
          </listitem>

          <listitem>
            <para>Fast execution speed (up to 100.000 vehicle updates/s on a
            1GHz machine)</para>
          </listitem>

          <listitem>
            <para>Supports import of many network formats (Visum, Vissim,
            ArcView, XML-Descriptions)</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1 id="user_chp01-about_document">
      <title>About this Document</title>

      <para>This document describes how to use each of the applications that
      come with the SUMO-package. We should remark, that this document only
      covers the usage of the software and some descriptions of the used
      models. Information about the applications' interna may be found in the
      <ulink url="http://sumo.sourceforge.net/docs/devdocs.shtml">developer
      documentation</ulink>.</para>

      <sect2 id="user_chp01-about_document-applications">
        <title>Described Applications</title>

        <table>
          <title>Applications described within this document</title>

          <tgroup cols="5">
            <thead>
              <row>
                <entry>Application</entry>

                <entry>Application Name (Windows)</entry>

                <entry>Application Name (Linux/UNIX)</entry>

                <entry>Description</entry>

                <entry>Described in Chapter</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><application>NETCONVERT</application></entry>

                <entry>netconvert.exe</entry>

                <entry>sumo-netconvert</entry>

                <entry>A network converter/importer</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml">Chapter
                4</ulink></entry>
              </row>

              <row>
                <entry><application>NETGEN</application></entry>

                <entry>netgen.exe</entry>

                <entry>sumo-netgen</entry>

                <entry>A generator of abstract networks</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml">Chapter
                4</ulink></entry>
              </row>

              <row>
                <entry><application>DUAROUTER</application></entry>

                <entry>duarouter.exe</entry>

                <entry>sumo-durarouter</entry>

                <entry>A router for dynamic user assignment</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml">Chapter
                5</ulink></entry>
              </row>

              <row>
                <entry><application>JTRROUTER</application></entry>

                <entry>jtrrouter.exe</entry>

                <entry>sumo-jtrrouter</entry>

                <entry>A router using junction turning ratios</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml">Chapter
                5</ulink></entry>
              </row>

              <row>
                <entry><application>SUMO</application></entry>

                <entry>sumo.exe</entry>

                <entry>sumo</entry>

                <entry>The microscopic simulation</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml">Chapter
                6</ulink></entry>
              </row>

              <row>
                <entry><application>GUISIM</application></entry>

                <entry>guisim.exe</entry>

                <entry>sumo-guisim</entry>

                <entry>The gui-version of the microscopic simulation</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp07.shtml">Chapter
                7</ulink></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Please remark that you may also find the applications
        "<application>NETEDIT</application>" and
        "<application>GIANT</application>" within the source distribution.
        Both are not supported, not working properly and will be not
        discussed, herein.</para>
      </sect2>

      <sect2 id="user_chp01-about_document-notation">
        <title>Notation</title>

        <para>This document uses coloring to differ between different type of
        information. If you encounter something like this:</para>

        <screen>netconvert --visum=MyVisumNet.inp --output-file=MySUMONet.net.xml</screen>

        <para>you should know that this is a call on the command line. There
        may be also a '\' at the end of a line. This indicates that you have
        to continue typing without pressing return (ignoring both the '\' and
        the following newline). The following example means exactly the same
        as the one above:</para>

        <screen>netconvert --visum=MyVisumNet.inp \
   --output-file=MySUMONet.net.xml</screen>

        <para>Command line option names are normally coloured <option>this
        way</option>. Their values if optional <option><replaceable>&lt;LIKE
        THIS&gt;</replaceable></option>. XML-elements and attributes are shown
        are coloured <sgmltag>like this</sgmltag>. Their values if optional
        <sgmltag><replaceable>&lt;LIKE THIS&gt;</replaceable></sgmltag>.
        Complete examples of XML-Files are shown like the following:</para>

        <programlisting><sgmltag>&lt;MyType&gt;</sgmltag>

   <sgmltag>&lt;MyElem myAttr1="0" myAttr2="0.0"/&gt;</sgmltag>
   <sgmltag>&lt;MyElem myAttr1="1" myAttr2="-500.0"/&gt;</sgmltag>

<sgmltag>&lt;/MyType&gt;</sgmltag></programlisting>

        <para>You may also find some notations from the EBNF; brackets '[' and
        ']' indicate that the enclosed information is optional. Brackets
        '&lt;' and '&gt;' indicate a type - insert your own value in here...
        All applications are shown like <application>THIS</application>.
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable></filename> is
        the path you have saved your SUMO-package into.</para>
      </sect2>

      <sect2 id="user_chp01-about_document-status">
        <title>Status</title>

        <para>This document is still under development and grows with the
        software. Due to this, you may find it together with the sources
        within the SUMO repository at sourceforge (<ulink
        url="http://sumo.sourceforge.net">http://sumo.sourceforge.net/</ulink>).
        It should always describe the current version.</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp01-call4help">
      <title>Call for Help</title>

      <para>Please let us know when either the document remains at any point
      unclear or any of the applications does not behave as expected. We would
      be very happy if you report broken links or misspelled words. We also
      seek for some participants and further users, not only to share the
      development tasks, but also to gain some feedback and critics or some
      usage examples.</para>

      <para>To summarize: every help is appreciated. Thank you.</para>
    </sect1>
  </chapter>

  <chapter id="user_chp02">
    <title>First Steps</title>

    <sect1 id="user_chp02-install">
      <title>Installing SUMO</title>

      <para>From version 0.8 on, we want not only supply the sources, but also
      the compiled binaries at least for MS Windows. We have abandonned the
      idea of releasing binaries for Linux due to large variety of the target
      systems.</para>

      <para>If you are a Windows user, you should decide whether you primary
      want to use the software only or also extend it. In the first case, you
      should download the binaries. All needed libraries will be included and
      - if necessary - a script should guide you through the installation
      process. In the latter case, please download the source distribution and
      compile it for your own. The description of the building process is
      found within a separate document located <ulink
      url="http://sumo.sourceforge.net/docs/dev_chp02.html">here</ulink>. If
      you have built the package on a system not included within our binary
      distribution, please let us know and send it to us, so that we can
      include it into the pages.</para>

      <para>There are also some scripts available, located within the
      <filename>tools</filename>-folder. To execute them you'll need to have
      <ulink url="http://www.python.org/">python</ulink> and/or <ulink
      url="http://www.perl.org/">perl</ulink> installed.</para>
    </sect1>

    <sect1 id="user_chp02-running_examples">
      <title>Running the Examples</title>

      <para>All examples are located within the
      <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data</filename> -
      folder and its subfolders. All examples come with a configuration-file
      for network building and running the simulation and some contain also a
      configuration-file for building the routes. Read chapter "<ulink
      url="http://sumo.sourceforge.net/docs/gen/user_chp08.shtml#user_chp08-configs">Using
      Configuration Files</ulink>" for further information on how to use
      configuration files. Some of the examples also contain .bat-files which
      contain the call to the applications so you may take a look into these
      files to see how the applications are run. Please remark that almost all
      applications are command line tools, what means that no window pops up
      if you start it, you have to open a shell window first.</para>

      <para>You may also run the examples in batch mode. For this, change into
      the folder you have extracted the package into
      (<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable></filename>),
      build the project if necessary (not needed if you have downloaded the
      binaries) and go further to the "<filename>tools</filename>"-folder. You
      will find the scripts "<filename>buildAllNets.py</filename>",
      "<filename>buildAllDUARoutes.py</filename>", and
      "<filename>buildAllJTRRoutes.py</filename>" in here which will run all
      configuration files located in the examples-section for
      <application>NETCONVERT</application>,
      <application>DUAROUTER</application> and
      <application>JTRROUTER</application>, respectively. The script
      "<filename>buildExamples.py</filename>" runs all these three scripts in
      the order as given above.</para>
    </sect1>
  </chapter>

  <chapter id="user_chp03">
    <title>Traffic Simulations and SUMO</title>

    <sect1 id="user_chp03-simulation_theory">
      <title>A short Introduction to Traffic Simulation Theory</title>

      <sect2 id="user_chp03-simulation_theory-simulation_types">
        <title>Simulation types</title>

        <para>SUMO is a microscopic, space continuous and time discrete
        traffic simulation.</para>

        <para>In traffic research four classes of models are distinguished
        according to the level of detail of the simulation. In
        <emphasis>macroscopic</emphasis> models traffic flow is the basic
        entity. <emphasis>Microscopic</emphasis> models simulate the movement
        of every single vehicle on the street, mostly assuming that the
        behaviour of the vehicle depends on both, the vehicle's physical
        abilities to move and the driver's controlling behaviour (see <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#ChowdhurySantenSchadschneider2000">[Chowdhury,
        Santen, Schadschneider, 2000]</ulink>). Within SUMO, the microscopic
        model developed by Stefan KrauÃ is used (see <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#Krauss1998_1">[Krauss1998_1]</ulink>,
        <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#Krauss1998_2">[Krauss1998_2]</ulink>).
        <emphasis>Mesoscopic</emphasis> simulations are located at the
        boundary between microscopic and macroscopic ones. Herein, vehicle
        movement is mostly simulated using queue approaches and single
        vehicles are moved between such queues.
        <emphasis>Sub-microscopic</emphasis> models regard single vehicles
        like microscopic but extend them by dividing them into further
        substructures, which describe the engine's rotation speed in relation
        to the vehicle's speed or the driver's preferred gear switching
        actions, for instance. This allows more detailed computations compared
        to simple microscopic simulations. However, sub-microscopic models
        require large computation times. This restrains the size of the
        networks to be simulated.</para>

        <figure>
          <title>The different simulation granularities; from left to right:
          macroscopic, microscopic, sub-microscopic (within the circle:
          mesoscopic)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/3sims.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Within a space-continuous simulation each vehicle has a certain
        position described by a floating-point number. In contrast,
        space-discrete simulations are a special kind of cellular automata.
        They use cells and vehicles driving on the simulated streets "jump"
        from one cell to another.</para>

        <figure>
          <title>The difference between a space-continuous (top) and a
          space-discrete (bottom) simulation</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/contdisc.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Almost every simulation package uses an own model for vehicle
        movement. Almost all models are so-called
        "<emphasis>car-following-models</emphasis>": the behaviour of the
        driver is herein meant to be dependent on his distance to the vehicle
        in front of him and of this vehicle's speed. Although SUMO is meant to
        be a test bed for such vehicle models, only one is implemented by now,
        which was developed by Stefan KrauÃ. Other obstacles such as traffic
        lights are of course considered herein, too.</para>

        <para>It seems obvious, that each driver is trying to use to shortest
        path through the network. But when all are trying to do this, some of
        the roads - mainly the arterial roads - would get congested and their
        benefit would sink. Solutions for this problem are known to traffic
        research as <emphasis>dynamic user assignment</emphasis>. For solving
        this, several approaches are available and SUMO uses the dynamic user
        assignment approach developed by Christian Gawron (see <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#Gawron1998_1">[Gawron1998_1]</ulink>).</para>
      </sect2>

      <sect2 id="user_chp03-simulation_theory-needed_data">
        <title>Needed Data</title>

        <para>At first, you need the network the traffic to simulate takes
        place on. As SUMO is meant to work with large networks, we mainly
        concentrated our work on importing networks and the computation of
        further needed values. Due to this, no graphical editor for networks
        is available, yet. Beside information about a network's roads,
        information about traffic lights is needed.</para>

        <para>Further, you need information about the traffic demand. While
        most traffic simulation use a statistical distribution which is laid
        over the network, each vehicle within SUMO knows its route. Within
        this approach, the route is a list of edges to pass. Although this
        approach is more realistic, it also induces a large amount of data
        needed to describe the vehicle movements. By now, routes are not
        compressed within SUMO and so may be several MB large. We will
        possibly change this in future.</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp03-simulation_workflow">
      <title>The Workflow of preparing a Simulation</title>

      <para>As shortly described above, you basically have to perform the
      following steps in order to make your simulation run:</para>

      <procedure>
        <step>
          <para>Build your network</para>

          <para>Use either own descriptions (described in chapter 4, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml#user_chp04-xml_descriptions">Building
          Networks from own XML-descriptions</ulink>") or if you have some
          digital networks SUMO can import, convert them (described in chapter
          4, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml#user_chp04-other_input">Converting
          other Input Data</ulink>")</para>
        </step>

        <step>
          <para>Build the vehicle routes</para>

          <para>Build your own movements using either by a) describing
          explicit vehicle routes (see chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-explicit">Using
          Trip Definitions</ulink>"), b) using flows and turning percentages
          only (see chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-own_routes-jtr">Using
          the Junction Turning Ratio - Router</ulink>"), c) generating random
          routes (see chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-own_routes-random">Generating
          random Routes</ulink>"), d) importing OD-matrices (see chapter
          "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-od2trips">Using
          OD2TRIPS</ulink>" or "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-explicite-flows">Using
          Flow Definitions</ulink>"), or e) importing routes you own (see
          chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-import_routes">Importing
          Routes</ulink>").</para>
        </step>

        <step>
          <para>If needed, compute the dynamic user assignment (described in
          chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-dua">Dynamic
          User Assignment</ulink>")</para>
        </step>

        <step>
          <para>Perform the simulation (described in chapter 6, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml">Performing
          the Simulation</ulink>") to get your desired output</para>
        </step>
      </procedure>

      <para>This process is also visualised within the next figure.</para>

      <figure>
        <title>Process of simulation with SUMO; (grey and rounded: data used;
        white: program calls)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="./gfx/user/simsteps1.gif"
                       format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Please remark, that most of the tools are command-line tools by
      now. They do nothing if you just double-click them (besides printing
      errors). Do also notice, that the call parameter desribed in the
      following chapters may be also stored in so-called
      "<emphasis>configuration files</emphasis>" to allow their reuse. This
      possibility is described in chapter "<ulink
      url="http://sumo.sourceforge.net/docs/gen/user_chp08.shtml#user_chp08-configs">Using
      Configuration Files</ulink>".</para>
    </sect1>

    <sect1 id="user_chp03-sumo">
      <title>SUMO</title>

      <sect2 id="user_chp03-sumo-software_paradigms">
        <title>Main Software Paradigms</title>

        <para>Two basic design goals are approached: the software shall be
        fast and it shall be portable. Due to this, the very first versions
        were developed to be run from the command line only - no graphical
        interface was supplied at first and all parameter had to be inserted
        by hand. This should increase the execution speed by leaving off slow
        visualisation. Also, due to these goals, the software was split into
        several parts. Each of them has a certain purpose and must be run
        individually. This is something that makes SUMO different to other
        simulation packages where the dynamical user assignment is made within
        the simulation itself, not via an external application like here. This
        split allows an easier extension of each of the applications within
        the package because each is smaller than a monolithic application
        doing everything. Also, it also allows the usage of faster data
        structures, each adjusted to the current purpose, instead of using
        complicated and ballast-loaded ones. Still, this makes the usage of
        SUMO a little bit uncomfortable in comparison to other simulation
        packages. As there are still other things to do, we are not thinking
        of a redesign towards an integrated approach by now.</para>
      </sect2>

      <sect2 id="user_chp03-sumo-meta">
        <title>Available Meta-Information</title>

        <para>All applications of the SUMO-package print the current version
        and build number when started with the option
        <option>--version</option>. Furthermore a help-screen is printed
        including all options the application knows when the application is
        started with the <option>--help</option> (<option>-?</option> for
        short) option.</para>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="user_chp04">
    <title>Network Generation</title>

    <sect1 id="user_chp04-introduction">
      <title>Introduction</title>

      <para>As <application><application>SUMO</application></application> uses
      an own road network description, normally networks must be converted
      from an existing dataset. Although being readable (xml) by human beings,
      the format of road networks used by <application>SUMO</application> is
      not meant to be edited by hand and will also not be described herein due
      to its complexity. The following figure shows the function of
      <application>NETCONVERT</application> within the flow of building and
      running a simulation.</para>

      <figure>
        <title>Building a network</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="./gfx/user/simsteps-netconv.gif" format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Having data describing the network, you may convert them into a
      network description readable by <application>SUMO</application> using
      the <application>NETCONVERT</application> tool. By now,
      <application>NETCONVERT</application> is capable to parse the following
      formats:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para><emphasis>ptv VISUM</emphasis> (a macroscopic traffic
            simulation package), see chapter "<ulink
            url="#user_chp04-other_input-visum">Importing
            VISUM-networks</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>ptv VISSIM</emphasis> (a microscopic traffic
            simulation package), see chapter "<ulink
            url="#user_chp04-other_input-vissim">Importing
            VISSIM-networks</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>ARTEMIS</emphasis> by Prof. Peter Hidas (a
            microscopic traffic simulation package), see chapter "<ulink
            url="#user_chp04-other_input-artemis">Importing Artemis-simulation
            folders</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>FastLane</emphasis> by Christian Gawron (a
            mesoscopic traffic simulation package), see chapter "<ulink
            url="#user_chp04-other_input-fastlane">Importing
            Cell/Fastlane-networks</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>ArcView</emphasis>-data base files, see chapter
            "<ulink url="#user_chp04-other_input">Importing
            ArcView-databases</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>XML</emphasis>-descriptions, see chapter "<ulink
            url="#user_chp04-xml_descriptions">Building Networks from own
            XML-descriptions</ulink>"</para>
          </listitem>

          <listitem>
            <para>Elmar Brockfelds <emphasis>unsplitted</emphasis> and
            <emphasis>splitted NavTeq-data</emphasis>, see chapter "<ulink
            url="#user_chp04-other_input-elmar">Importing Elmar's converted
            NavTech-Files</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>TIGER</emphasis> databases, see chapter "<ulink
            url="#user_chp04-other_input-tiger">Importing
            TIGER-databases</ulink>"</para>
          </listitem>
        </itemizedlist></para>

      <para>In most of these cases, <application>NETCOVERT</application> needs
      only two parameter: the option named as the source application/format
      followed by the name of the file to convert and the name of the output
      file (using the <option>--output-file</option> option). So if you want
      to import a file generated by the <application>VISUM</application>
      simulation package, simply write the following:</para>

      <screen>netconvert --visum=MyVisumNet.inp --output-file=MySUMONet.net.xml</screen>

      <para>The parameter <option>--output-file</option> has also a default
      value of "<filename>net.net.xml</filename>". That means that
      <application>NETCONVERT</application> will save the generated file as
      "<filename>net.net.xm</filename>l" if the option is not given.</para>

      <para>Please note, that <application>NETCONVERT</application> has to be
      started from the command line. There is no graphical interface
      available, yet.</para>

      <para>The following subchapters will describe how to use
      <application>NETCONVERT</application> more deeply, also discussing some
      problems with each of the possible import formats. Please remark that
      the following option is mandatory:</para>

      <variablelist>
        <varlistentry>
          <term><option>( --output-file | --output | -o )
          <replaceable>&lt;OUTPUT_FILE&gt;</replaceable></option></term>

          <listitem>
            <para>Defines the file to write the computed network into. This
            file will contain the generated network if the conversion could be
            accomplished. <remark>Optional (pregiven), type:filename, default:
            "net.net.xml"</remark></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="user_chp04-xml_descriptions">
      <title>Building Networks from own XML-descriptions</title>

      <para>All examples within the distribution were made by hand. For doing
      this, you need at least two files: one file for nodes and another one
      for the streets between them. Please notice that herein,
      "<emphasis>node</emphasis>" and "<emphasis>junction</emphasis>" means
      the same as well as "<emphasis>edge</emphasis>" and
      "<emphasis>street</emphasis>". Besides defining the nodes and edges, you
      can also join edge types and set explicit connections between lanes. We
      will describe how each of these four file types should be set up in the
      following.</para>

      <sect2 id="user_chp04-xml_descriptions-nodes">
        <title>Node Descriptions</title>

        <para>Within the nodes-files, normally having the extension ".nod.xml"
        (see Appendix "<ulink
        url="http://sumo.sourceforge.net/docs/gen/user_apa.shtml">Naming
        Conventions</ulink>"), every node is described in a single line which
        looks like this: <sgmltag>&lt;node
        id="<replaceable>&lt;STRING&gt;</replaceable>"
        x="<replaceable>&lt;FLOAT&gt;</replaceable>"
        y="<replaceable>&lt;FLOAT&gt;</replaceable>"
        [type="<replaceable>&lt;TYPE&gt;</replaceable>"]/&gt;</sgmltag> - the
        straight brackets ('[' and ']') indicate that the parameter is
        optional. Each of these attributes has a certain meaning and value
        range:</para>

        <para><itemizedlist>
            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the node; may be any
              character string</para>
            </listitem>

            <listitem>
              <para><sgmltag>x</sgmltag>: The x-position of the node on the
              plane in meters; must be a floating point number</para>
            </listitem>

            <listitem>
              <para><sgmltag>y</sgmltag>: The y-position of the node on the
              plane in meters; must be a floating point number</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: An optional type for the node. If
              you leave out the type of the node, it is automatically guessed
              by <application>NETCOVERT</application> but may not be the one
              you intentionally thought of. The following types are possible,
              any other string is counted as an error and will yield in a
              program stop:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>priority</sgmltag>: Vehicles have to wait
                  until vehicles right to them have passed the
                  junction.</para>
                </listitem>

                <listitem>
                  <para><sgmltag>traffic_light</sgmltag>: The junction is
                  controlled by a traffic light. (... TBD ... further
                  types?)</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>When writing your nodes-file, please do not forget to
        embed your node definitions into an opening and a closing "tag". A
        complete file should like the example below, which is the node file
        "<filename>cross3l.nod.xml</filename>" for the examples
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_usingtypes/</filename>"
        and
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>"
        example.</para>

        <programlisting><sgmltag>&lt;nodes&gt;</sgmltag> <sgmltag>&lt;!-- The opening tag --&gt;</sgmltag>

   <sgmltag>&lt;node id="0" x="0.0" y="0.0" type="traffic_light"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "0" --&gt;</sgmltag>

   <sgmltag>&lt;node id="1" x="-500.0" y="0.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "1" --&gt;</sgmltag>
   <sgmltag>&lt;node id="2" x="+500.0" y="0.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "2" --&gt;</sgmltag>
   <sgmltag>&lt;node id="3" x="0.0" y="-500.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "3" --&gt;</sgmltag>
   <sgmltag>&lt;node id="4" x="0.0" y="+500.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "4" --&gt;</sgmltag>

   <sgmltag>&lt;node id="m1" x="-250.0" y="0.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "m1" --&gt;</sgmltag>
   <sgmltag>&lt;node id="m2" x="+250.0" y="0.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "m2" --&gt;</sgmltag>
   <sgmltag>&lt;node id="m3" x="0.0" y="-250.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "m3" --&gt;</sgmltag>
   <sgmltag>&lt;node id="m4" x="0.0" y="+250.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- definition of node "m4" --&gt;</sgmltag>

<sgmltag>&lt;/nodes&gt;</sgmltag> <sgmltag>&lt;!-- The closing tag --&gt;</sgmltag></programlisting>

        <para>As you may notice, only the first node named "0", which is the
        node in the middle of the network, is a traffic light controlled
        junction. All other nodes are uncontrolled. You may also notice, that
        each of both ends of a street needs an according node. This is not
        really necessary as you may see soon, but it eases the understanding
        of the concept: every edge (road) is a connection between two
        nodes.</para>

        <para>You should also know something about the coordinate system: the
        higher a node on the screen shall be (the nearer to the top of your
        monitor), the higher his y-value must be. The more to left it shall
        be, the higher his x-value.</para>

        <figure>
          <title>Coordinate system used in SUMO</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/basic_coordinates.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Since version 0.9.4 you can also give the <sgmltag>x</sgmltag>-
        and <sgmltag>y</sgmltag>-coordinates using geocoordinates. In this
        case, the coordinates will be interpreted as long/lat in degrees. Read
        more on this in "!!!".</para>

        <caution>
          <para>Please keep in mind that this feature is quite new and that du
          to this some things may not work as suspected and may get changed in
          the near future.</para>
        </caution>
      </sect2>

      <sect2 id="user_chp04-xml_descriptions-edges">
        <title>Edges Descriptions</title>

        <para>Edges are described quite the same way as nodes, but possesses
        other parameter. Within the edges file, each description of a single
        edge looks like this: <sgmltag>&lt;edge
        id="<replaceable>&lt;STRING&gt;</replaceable>"
        (fromnode="<replaceable>&lt;NODE_ID&gt;</replaceable>"
        tonode="<replaceable>&lt;NODE_ID&gt;</replaceable>" |
        xfrom="<replaceable>&lt;FLOAT&gt;</replaceable>"
        yfrom="<replaceable>&lt;FLOAT&gt;</replaceable>"
        xto="<replaceable>&lt;FLOAT&gt;</replaceable>"
        yto="<replaceable>&lt;FLOAT&gt;</replaceable>")
        [(type="<replaceable>&lt;STRING&gt;</replaceable>" |
        nolanes="<replaceable>&lt;INT&gt;</replaceable>"
        speed="<replaceable>&lt;FLOAT&gt;</replaceable>"
        priority="<replaceable>&lt;FLOAT&gt;</replaceable>"
        length="<replaceable>&lt;FLOAT&gt;</replaceable>")]
        [shape="<replaceable>&lt;2D_POINT&gt; </replaceable>[
        <replaceable>&lt;2D_POINT&gt;</replaceable>]*
        <replaceable>&lt;2D_POINT&gt;</replaceable>"]
        [spread_type="center"]/&gt;</sgmltag>.</para>

        <para>What does it mean? Every one who knows how XML-files look like
        should have noticed brackets ('(' and ')') and pipes ('|') within the
        definition and these characters are not allowed within XML... What we
        wanted to show which parameter is optional. So for the definition of
        the origin and the destination node, you can either give their names
        using <sgmltag>fromnode="<replaceable>&lt;NODE_ID&gt;</replaceable>"
        tonode="<replaceable>&lt;NODE_ID&gt;</replaceable>" </sgmltag>or you
        give their positions using
        <sgmltag>xfrom="<replaceable>&lt;FLOAT&gt;</replaceable>"
        yfrom="<replaceable>&lt;FLOAT&gt;</replaceable>
        xto="<replaceable>&lt;FLOAT&gt;</replaceable>"
        yto="<replaceable>&lt;FLOAT&gt;</replaceable>"</sgmltag>. In the
        second case, nodes will be build automatically at the given positions.
        Each edge is unidirectional and starts at the
        "<sgmltag>from</sgmltag>"-node and ends at the
        "<sgmltag>to</sgmltag>"-node. If a name of one of the nodes can not be
        dereferenced (because they have not been defined within the nodes
        file) an error is generated.</para>

        <para>For each edge, some further attributes should be supplied, being
        the number of lanes the edge has, the maximum speed allowed on the
        edge, the length the edge has (in meters) and a priority value. These
        values - beside the length in fact - may either be given for each edge
        using according attributes or you can omit them by giving the edge a
        "<sgmltag>type</sgmltag>". In this case, you should also write a
        type-file (see "<ulink url="#user_chp04-xml_descriptions-types">Types
        Descriptions</ulink>"). A type with this name should of course be
        within the generated type-file, otherwise an error is reported. Even
        if you supply a type, you can still override the type's values by
        supplying any of the parameter <sgmltag>nolanes</sgmltag>,
        <sgmltag>speed</sgmltag> and <sgmltag>priority</sgmltag>. You may also
        leave the edge parameter completely unset. In this case,
        default-values will be used and the edge will have a single lane, a
        priority of 0 (zero) and the maximum allowed speed on this edge will
        be 13.9m/s being around 50km/h. The length of this edge will be
        computed as the distance between the starting and the end
        point.</para>

        <para>As an edge may have a more complicated geometry, you may supply
        the edge's shape within the <sgmltag>shape</sgmltag> tag. If the
        length of the edge is not given otherwise, the distances of the shape
        elements will be summed.</para>

        <para>The information <sgmltag>spread_type="center" </sgmltag>forces
        <application>NETCONVERT</application> to spread lanes to both sides of
        the connection between the begin node and the end node or from the
        list of lines making up the shape. If not given, lanes are spread to
        right, as default.</para>

        <para>Let's list an edge's attributes again:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the edge; may be any
              character string</para>
            </listitem>

            <listitem>
              <para>Origin and destination node descriptions</para>

              <para>Either:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>fromnode</sgmltag>: The name of a node within
                  the nodes-file the edge shall start at</para>
                </listitem>

                <listitem>
                  <para><sgmltag>tonode</sgmltag>: The name of a node within
                  the nodes-file the edge shall end at</para>
                </listitem>
              </itemizedlist>

              <para>or:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>xfrom</sgmltag>: The x-position of the node
                  the edge shall start at in meters; must be a floating point
                  number</para>
                </listitem>

                <listitem>
                  <para><sgmltag>yfrom</sgmltag>: The y-position of the node
                  the edge shall start at in meters; must be a floating point
                  number</para>
                </listitem>

                <listitem>
                  <para><sgmltag>xto</sgmltag>: The x-position of the node the
                  edge shall end at in meters; must be a floating point
                  number</para>
                </listitem>

                <listitem>
                  <para><sgmltag>yto</sgmltag>: The y-position of the node the
                  edge shall end at in meters; must be a floating point
                  number</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Descriptions of the edge's type and atomic
              attributes:</para>

              <para>Either:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>type</sgmltag>: The name of a type within the
                  types-file</para>
                </listitem>
              </itemizedlist>

              <para>or:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>nolanes</sgmltag>: The number of lanes of the
                  edge; must be an integer value</para>
                </listitem>

                <listitem>
                  <para><sgmltag>speed</sgmltag>: The maximum speed allowed on
                  the edge in m/s; must be a floating point number (see also
                  <ulink url="#user_chp04-further_options-kmh_speed">"Using
                  Edges' maximum Speed Definitions in km/h"</ulink>)</para>
                </listitem>

                <listitem>
                  <para><sgmltag>priority</sgmltag>: The priority of the edge;
                  must be an integer value</para>
                </listitem>

                <listitem>
                  <para><sgmltag>length</sgmltag>: The length of the edge in
                  meter; must be an float value</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>The edges shape:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>shape</sgmltag>: List of positions; each
                  position is encoded in x,y (do not separate the numbers with
                  a space!) in meters; an edge's shape definition must of
                  course be at least two positions long; an example:
                  <sgmltag>shape="0,0 0,100"</sgmltag> describes a vertical
                  edge of one hundred meters.</para>
                </listitem>

                <listitem>
                  <para><sgmltag>spread_type</sgmltag>: The description of how
                  to spread the lanes; center spreads lanes to both directions
                  of the shape, any other value to right.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>The priority (... TBD ...) plays a role during the
        computation of the way-giving rules of a node. Larger values for the
        priority of an edge allow vehicles using it to pass without waiting -
        if no traffic light is on the node.</para>

        <para>Also the definitions of edges must be embedded into an opening
        and a closing tag and for the example
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>"
        the whole edges-file looks like this
        ("<filename>cross3l.edg.xml</filename>"):</para>

        <programlisting><sgmltag>&lt;edges&gt;</sgmltag>

   <sgmltag>&lt;edge id="1fi" fromnode="1" tonode="m1" priority="2" nolanes="2" speed="11.111"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="1si" fromnode="m1" tonode="0" priority="3" nolanes="3" speed="13.889"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="1o" fromnode="0" tonode="1" priority="1" nolanes="1" speed="11.111"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="2fi" fromnode="2" tonode="m2" priority="2" nolanes="2" speed="11.111"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="2si" fromnode="m2" tonode="0" priority="3" nolanes="3" speed="13.889"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="2o" fromnode="0" tonode="2" priority="1" nolanes="1" speed="11.111"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="3fi" fromnode="3" tonode="m3" priority="2" nolanes="2" speed="11.111"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="3si" fromnode="m3" tonode="0" priority="3" nolanes="3" speed="13.889"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="3o" fromnode="0" tonode="3" priority="1" nolanes="1" speed="11.111"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="4fi" fromnode="4" tonode="m4" priority="2" nolanes="2" speed="11.111"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="4si" fromnode="m4" tonode="0" priority="3" nolanes="3" speed="13.889"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="4o" fromnode="0" tonode="4" priority="1" nolanes="1" speed="11.111"/&gt;</sgmltag>

<sgmltag>&lt;/edges&gt;</sgmltag>
</programlisting>

        <para>Within this example, we have used explicit definitions of edges.
        An example for using types is described in the chapter "<ulink
        url="#user_chp04-xml_descriptions-types">Types
        Descriptions</ulink>".</para>

        <caution>
          <para>There are some constraints about the streets' ids. They must
          not contain any of the following characters: '_' (underline - used
          for lane ids), '[' and ']' (used for enumerations), ' ' (space -
          used as list divider), '*' (star, used as wildcard), ':' (used as
          marker for internal lanes).</para>
        </caution>
      </sect2>

      <sect2 id="user_chp04-xml_descriptions-types">
        <title>Types Descriptions</title>

        <para>As mentioned, road types are meant to be used to ease the
        definition of edges. As described above, the description of an edge
        should include information about the number of lanes, the maximum
        speed allowed on this edge and the edge's priority. To avoid the
        explicit definition of each parameter for every edge, one can use road
        types, which encapsulate these parameter under a given name.</para>

        <para>The attributes of a type are of course exactly the same as for
        edges themselves:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the road type; may be
              any character string</para>
            </listitem>

            <listitem>
              <para><sgmltag>nolanes</sgmltag>: The number of lanes of the
              referencing must be an integer value</para>
            </listitem>

            <listitem>
              <para><sgmltag>speed</sgmltag>: The maximum speed allowed on the
              referencing edge in m/s; must be a floating point number</para>
            </listitem>

            <listitem>
              <para><sgmltag>priority</sgmltag>: The priority of the
              referencing edge; must be an integer value</para>
            </listitem>
          </itemizedlist>The information about the nodes the edge starts and
        ends at is not given within the types' descriptions. They can only be
        set within the edge's attributes.</para>

        <para>An example of using types may be found in
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_usingtypes/</filename>".
        Instead of explicit parameter edges reference types:</para>

        <programlisting><sgmltag>&lt;edges&gt;</sgmltag>

   <sgmltag>&lt;edge id="1fi" fromnode="1" tonode="m1" type="b"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="1si" fromnode="m1" tonode="0" type="a"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="1o" fromnode="0" tonode="1" type="c"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="2fi" fromnode="2" tonode="m2" type="b"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="2si" fromnode="m2" tonode="0" type="a"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="2o" fromnode="0" tonode="2" type="c"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="3fi" fromnode="3" tonode="m3" type="b"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="3si" fromnode="m3" tonode="0" type="a"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="3o" fromnode="0" tonode="3" type="c"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="4fi" fromnode="4" tonode="m4" type="b"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="4si" fromnode="m4" tonode="0" type="a"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="4o" fromnode="0" tonode="4" type="c"/&gt;</sgmltag>

<sgmltag>&lt;/edges&gt;</sgmltag>
</programlisting>

        <para>and the according types file looks like this:</para>

        <programlisting><sgmltag>&lt;types&gt;</sgmltag>

   <sgmltag>&lt;type id="a" priority="3" nolanes="3" speed="13.889"/&gt;</sgmltag>
   <sgmltag>&lt;type id="b" priority="2" nolanes="2" speed="11.111"/&gt;</sgmltag>
   <sgmltag>&lt;type id="c" priority="1" nolanes="1" speed="11.111"/&gt;</sgmltag>

<sgmltag>&lt;/types&gt;</sgmltag>
</programlisting>

        <para>As you can see, we have joined the edges into three classes "a",
        "b", and "c" and have generated a description for each of these
        classes. Doing this, the generated net is similar to the one generated
        using the settings described above (example
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>"
        ).</para>
      </sect2>

      <sect2 id="user_chp04-xml_descriptions-connections">
        <title>Connection Descriptions</title>

        <para>If you have tried the version 0.7 you have possibly missed the
        possibility to specify the connections between the edges for yourself.
        This is now possible using a further file, the connections file. The
        connection file specifies which edges outgoing from a junction may be
        reached by a certain edge incoming into this junction and optionally
        also which lanes shall be used on both sides.</para>

        <para>If you only want to describe which edges may be reached from a
        certain edge, this definition could look something like this:
        <sgmltag>&lt;connection
        from="<replaceable>&lt;FROM_EDGE_ID&gt;</replaceable>"
        to="<replaceable>&lt;T0_EDGE_ID&gt;</replaceable>"/&gt;</sgmltag>.
        This tells <application>NETCONVERT</application> not only that
        vehicles shall be allowed to drive from the edge named
        <sgmltag><replaceable>&lt;FROM_EDGE_ID&gt;</replaceable></sgmltag> to
        the edge named
        <sgmltag><replaceable>&lt;TO_EDGE_ID&gt;</replaceable></sgmltag>, but
        also prohibits all movements to other edges from
        <sgmltag><replaceable>&lt;FROM_EDGE_ID&gt;</replaceable></sgmltag>,
        unless they are specified within this file. Let's repeat the
        parameters:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>from</sgmltag>: The name of the edge the vehicles
            leave</para>
          </listitem>

          <listitem>
            <para><sgmltag>to</sgmltag>: The name of the edge the vehicles may
            reach when leaving "from"</para>
          </listitem>
        </itemizedlist>

        <para>When using this kind of input,
        <application>NETCONVERT</application> will compute which lanes shall
        be used if any of the connected edges has more than one lane.</para>

        <para>If you also want to override this computation and set the lanes
        by hand, use the following: <sgmltag>&lt;connection
        from="&lt;FROM_EDGE_ID&gt;" to="&lt;T0_EDGE_ID&gt;"
        lane="&lt;INT_1&gt;:&lt;INT_2&gt;"/&gt;</sgmltag>. Here, a connection
        from the edge's
        "<sgmltag><replaceable>&lt;FROM_EDGE_ID&gt;</replaceable></sgmltag>"
        lane with the number
        <sgmltag><replaceable>&lt;INT_1&gt;</replaceable></sgmltag> is build
        to the lane
        <sgmltag><replaceable>&lt;INT_2&gt;</replaceable></sgmltag> of the
        edge
        "<sgmltag><replaceable>&lt;TO_EDGE_ID</replaceable>&gt;</sgmltag>".
        Lanes are counted from the right (outer) to the left (inner) side of
        the road beginning with 0. Again the parameter:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>from</sgmltag>: The name of the edge the vehicles
              leave</para>
            </listitem>

            <listitem>
              <para><sgmltag>to</sgmltag>: The name of the edge the vehicles
              may reach when leaving "from"</para>
            </listitem>

            <listitem>
              <para><sgmltag>lane</sgmltag>: the numbers of the connected
              lanes, separated with ':'; lanes are counter from right to left
              beginning with 0</para>
            </listitem>
          </itemizedlist></para>

        <para>There are two examples within the distribution. Both use the
        nodes and edges descriptions from the example located in
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>".
        The junction in the center of this example looks like shown within the
        next figure. We will now call it the "unconstrained network" because
        all connections and turnarounds are computed using the default
        values.</para>

        <figure>
          <title>Unconstrained Network</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/cross3l_unconstrained.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>The example
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_edge2edge_conns/</filename>"
        shows what happens when one uses connections to limit the number of
        reachable edges. To do this we built a connections file where we say
        that the horizontal edges ("1si" and "2si") have only connections to
        the edges right to them and the edge in straight direction. The file
        looks like this:</para>

        <programlisting><sgmltag>&lt;connections&gt;</sgmltag>

   <sgmltag>&lt;connection from="1si" to="3o"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="1si" to="2o"/&gt;</sgmltag>

   <sgmltag>&lt;connection from="2si" to="4o"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="2si" to="1o"/&gt;</sgmltag>

<sgmltag>&lt;/connections&gt;</sgmltag>
</programlisting>

        <para>As you may see in the next picture, the horizontal edges within
        the result network contain no left-moving connections.</para>

        <figure>
          <title>Network with explicit edge-2-edge connections</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/cross3l_edge2edge_conns.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>In the second example located in
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_laneslane_conns/</filename>"
        we additionally describe which lanes shall be connected. The according
        connections file says that the connections going straight shall be
        start at the second lane of the incoming edges:</para>

        <programlisting><sgmltag>&lt;connections&gt;</sgmltag>

   <sgmltag>&lt;connection from="1si" to="3o" lane="0:0"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="1si" to="2o" lane="2:0"/&gt;</sgmltag>

   <sgmltag>&lt;connection from="2si" to="4o" lane="0:0"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="2si" to="1o" lane="2:0"/&gt;</sgmltag>

<sgmltag>&lt;/connections&gt;</sgmltag>
</programlisting>

        <para>The built file looks like this:</para>

        <figure>
          <title>Network with explicit lane-2-lane connections</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/cross3l_lane2lane_conns.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <warning>
          <para>Please do not use both types of connection declarations (those
          with an <sgmltag>lane</sgmltag> attribute and those without) for the
          same from-edge! The behaviour is not verified and tested for these
          settings.</para>
        </warning>

        <para>Examples (compare both to
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/netbuild/cross_notypes/</filename>):</para>

        <itemizedlist>
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_edge2edge_conns/</filename>
            shows how edge-to-edge connections may be specified</para>
          </listitem>

          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_lane2lane_conns/</filename>
            shows how lane-to-lane connections may be specified</para>
          </listitem>
        </itemizedlist>

        <para>Recent Changes:</para>

        <itemizedlist>
          <listitem>
            <para>A bug which sometimes yielded in a reassignment of
            connections is patched in version 0.9.3</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-xml_descriptions-running">
        <title>Building the Network</title>

        <para>After you have generated the files you need being at least the
        edges and the nodes-files and optionally also a type and/or a
        connections file you should run <application>NETCONVERT</application>
        to build the network. The call should look like:</para>

        <screen>netconvert --xml-node-files=MyNodes.nod.xml --xml-edge-files=MyEdges.edg.xml \
   --output-file=MySUMONet.net.xml</screen>

        <para>if you only use edges and nodes. Types and connections may be
        given as:</para>

        <screen>netconvert --xml-node-files=MyNodes.nod.xml --xml-edge-files=MyEdges.edg.xml \
   --xml-connection-files=MyConnections.con.xml --type-file=MyTypes.typ.xml \
   --output-file=MySUMONet.net.xml</screen>

        <para>Maybe your edge definitions are incomplete or buggy. If you
        still want to import your network, you can try passing
        "<option>--omit-corrupt-edges</option>" to
        <application>NETCONVERT</application>. In this case, edges which are
        not defined properly, are omitted, but
        <application>NETCONVERT</application> tries to build the network
        anyway. You may also flip the network around the horizontal axis. Use
        option "<option>--flip-y</option>" for this.</para>

        <para>You may also use abbreviations for the option names. These
        abbreviations and options used when building SUMO-networks from own
        XML-descriptions are:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --xml-node-files | --xml-nodes | -n )
            <replaceable>&lt;NODES_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the given file as the source of specification node
              positions and types. <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --xml-edge-files | --xml-edges | -e )
            <replaceable>&lt;EDGES_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the given file as the source of specification of
              roads connecting nodes. <remark>Optional, type:filename,
              default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --xml-connection-files | --xml-connections | -x )
            <replaceable>&lt;CONNECTIONS_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the given file as the source of specification how
              roads are connected (which lanes may be reached from which
              lanes). <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --xml-type-files | --types | -t )
            <replaceable>&lt;TYPES_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the given file as the source of edge types.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--omit-corrupt-edges</option></term>

            <listitem>
              <para>Continues with parsing although a corrupt edge occurred.
              This edge is not inserted and a warning is printed.
              <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--flip-y</option></term>

            <listitem>
              <para>Flips the y-position of nodes (and edges) along the
              y=zero-line. <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink url="#user_chp04-further_options-defaults">Setting
            default Values</ulink>"</para>
          </listitem>

          <listitem>
            <para><ulink url="#user_chp04-further_options-kmh_speed">"Using
            Edges' maximum Speed Definitions in km/h"</ulink></para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>
        </itemizedlist>

        <para>Examples:</para>

        <para>Almost all networks within the
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/</filename>
        - folder. Additionally some examples that cover the mentioned topics
        are:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>On using types:</para>

            <itemizedlist>
              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename></para>
              </listitem>

              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_usingtypes/</filename></para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>On using speed definition in km/h</para>

            <itemizedlist>
              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/cross_notypes_kmh/</filename></para>
              </listitem>

              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/cross_usingtypes_kmh/</filename></para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>On using edge shapes</para>

            <itemizedlist>
              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/shapes/hokkaido-japan/</filename></para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><option>--xml-type-files</option> was named
            <option>--type-file</option> in versions earlier than 0.9.2</para>
          </listitem>

          <listitem>
            <para>In the previous examples the option for nodes inclusion was
            misspelled (<option>--xml-nodes-files</option> is incorrect,
            <option>--xml-node-files</option> is right). Thanks to Leander
            Verhofstadt to recognize this.</para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>

    <sect1 id="user_chp04-other_input">
      <title>Converting other Input Data</title>

      <para>Large maps cannot be inserted by hand. We use maps from NavTech
      stored in the ArcView database format and maps from other simulation
      suppliers such as ptv within our projects and both are too large for
      this. We will now explain how to convert such data. We will not give any
      introduction into those formats/simulations themselves or compare their
      quality, look out for other sources of information on this, but we will
      describe what is being imported and what problems may arise during the
      conversion.</para>

      <sect2 id="user_chp04-other_input-arcview">
        <title>Importing ArcView-databases</title>

        <para><application>NETCONVERT</application> is able to directly read
        binary NavTechs ArcView databases. To convert such databases, you need
        at least three files: a file with the extension
        "<filename>.dbf</filename>", one with the extension
        ".<filename>shp</filename>" and one with the extension
        "<filename>.shx</filename>". Additionally, having a projection file
        with the extension ".proj" is of benefit. Since version 0.9.2 we do
        not suply the possibility to use different names for the files, so all
        files should have the same name besides the extension. To build your
        network from an ArcView-database use the option
        "<option>--arcview=&lt;FILENAME_WITHOUT_EXTENSION&gt;</option>":</para>

        <screen>netconvert --arcview=MyArcViewDB --output-file=MySUMONet.net.xml</screen>

        <para>This call will force <application>NETCONVERT</application> to
        read the files "<filename>MyArcViewDB.dbf</filename>",
        "<filename>MyArcViewDB.shx</filename>", and
        "<filename>MyArcViewDB.shp</filename>" (and possibly
        "<filename>MyArcViewDB.proj</filename>" and to generate a network
        named "<filename>MySUMONet.net.xml</filename>". We have been asked
        which fields are read from ArcView-files. As said before, the reader
        was build to read ArcView-files containing road networks from NavTech.
        Due to this the following fields are used as default:</para>

        <table>
          <title>Entries read by NETCONVERT</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>Entity Name</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>LINK_ID</entry>

                <entry>The id of an edge</entry>
              </row>

              <row>
                <entry>ST_NAME</entry>

                <entry>The name of an edge (not really used)</entry>
              </row>

              <row>
                <entry>REF_IN_ID</entry>

                <entry>The name of the node the edge starts at</entry>
              </row>

              <row>
                <entry>NREF_IN_ID</entry>

                <entry>The name of the node the edge ends at</entry>
              </row>

              <row>
                <entry>ST_TYP_AFT</entry>

                <entry>The type of the street (not really used)</entry>
              </row>

              <row>
                <entry>SPEED_CAT</entry>

                <entry>Speed category</entry>
              </row>

              <row>
                <entry>LANE_CAT</entry>

                <entry>Lane category</entry>
              </row>

              <row>
                <entry>FUNC_CLASS</entry>

                <entry>Road class, used to determine the priority</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>The problem is, that not all networks stored as
        ArcView-databases also use this naming scheme. During some further
        work with ArcView-networks, some further options got necessary which
        allow to name the fields the used database contains. The column the
        street name shall be read from may be specified using
        <option>--arcview.street-id
        <replaceable>&lt;STREET_NAME_COLUMN_NAME&gt;</replaceable></option>.
        You can also name the columns the names of the edges' origin and
        destination nodes shall be read from using <option>--arcview.from-id
        <replaceable>&lt;START_NODE_ID_COLUMN_NAME&gt;</replaceable></option>
        and <option>--arcview.to-id
        <replaceable>&lt;END_NODE_ID_COLUMN_NAME&gt;</replaceable></option>.
        If the no information about the starting/ending nodes is given and
        your database does not contain the columns "REF_IN_ID" and
        "NREF_IN_ID", nodes will be placed into the network at the positions
        the streets end.</para>

        <para>Since version 0.9.2 we also allow to override the rather "fuzzy"
        information about an edge's attributes from NavTech using own
        fields:</para>

        <table>
          <title>Possible entries to override NavTech-information</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>Entity Name</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>SPEED</entry>

                <entry>The speed in m/s (see also <ulink
                url="#user_chp04-further_options-kmh_speed">"Using Edges'
                maximum Speed Definitions in km/h"</ulink>)</entry>
              </row>

              <row>
                <entry>NOLANES</entry>

                <entry>The number of lanes</entry>
              </row>

              <row>
                <entry>rnol</entry>

                <entry>The number of lanes</entry>
              </row>

              <row>
                <entry>PRIORITY</entry>

                <entry>The priority</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>This idea came from John Michael Calandrino.</para>

        <para>Some databases do not contain explicite information about the
        edges' attributes (number of lanes, priority, allowed speed) at all.
        Since version 0.9.4 you can use types as described in <link
        linkend="???">Types Descriptions</link> to describe your edges'
        attributes. You have to name the column to retrieve the information
        about a street's type from using <option>--arcview.type-id
        <replaceable>&lt;TYPE_ID_COLUMN_NAME&gt;</replaceable></option>. Of
        course, you have then to supply a type-file using
        <option>--xml-type-files
        <replaceable>&lt;TYPES_FILE&gt;</replaceable></option> (or
        <option>--types</option> or <option>-t</option> ). If something fails
        with the types or the explicite values, you can catch it using
        <option>--arcview.use-defaults-on-failure</option>.</para>

        <para>ArcView-networks are (mostly?) encoded using geocoordinates
        which have to be converted to the cartesian coordinates system used by
        SUMO. Our current implementation is not yet fully developed, it works
        for the most cases, but you should not be surprised if it fails with a
        certain network. Contact us in this case, please. To describe how to
        convert the coordinates, you should know in which UTM-zone your
        network is located. Pass this to <application>NETCONVERT</application>
        using <option>--arcview.utm
        <replaceable>&lt;ORIGINAL_UTM_ZONE&gt;</replaceable></option>. If the
        conversion can not be initialised, you may additionally use
        <option>--arcview.guess-projection</option> to let
        <application>NETCONVERT</application> guess the conversion by him
        own.</para>

        <para>Some remarks:</para>

        <para>Each of the maps we've got from NavTech, being encoded in the
        ArcView database format, describes an area of a single state or
        federal state. This is much too large for our purposes, as we are
        mainly interested in urban traffic. In fact, we have not tried out
        which resources are needed to perform the simulation of a single
        German federal state with SUMO, although this should be possible at
        all. Due to this, one has at first to extract an area of interest. Our
        first approaches to do this by using postal numbers is not as
        sophisticated as firstly though to be: some interesting parts of the
        cities, above all major highways do not belong to the postal code area
        of the regarded city (Magdeburg and Munich within this test).</para>

        <para><caution>
            <para>Due to their size, import of ArcView data may need a long
            time.</para>
          </caution></para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--arcview
            <replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Loads definitions from
              "<filename><replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable>.shp</filename>",
              "<filename><replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable>.dbf</filename>"
              and
              "<filename><replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable>.shx</filename>".
              <remark>Optional, type:filename-prefix, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.street-id
            <replaceable>&lt;STREET_NAME_COLUMN_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>This option tells <application>NETCONVERT</application>
              which of the columns within the ArcView-database to read shall
              be used as the source of street names. If given, your database
              must contain this column, and the values must be unique for each
              street. <remark>Optional, type:string, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.from-id
            <replaceable>&lt;START_NODE_ID_COLUMN_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>This option tells <application>NETCONVERT</application>
              which of the columns within the ArcView-database to read shall
              be used as the source of the information from which node the
              street starts. If given, your database must contain this column.
              <remark>Optional, type:string, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.to-id
            <replaceable>&lt;END_NODE_ID_COLUMN_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>This option tells <application>NETCONVERT</application>
              which of the columns within the ArcView-database to read shall
              be used as the source of the information at which node the
              street ends. If given, your database must contain this column.
              <remark>Optional, type:string, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.type-id
            <replaceable>&lt;TYPE_ID_COLUMN_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>This option tells <application>NETCONVERT</application>
              which of the columns within the ArcView-database to read shall
              be used as the source of the information about the edge's type.
              Using this information, you can use type definitions as
              described in <link linkend="???">Types Descriptions</link> to
              determine your edges' attributes. If given, your database must
              contain this column. <remark>Optional, type:string, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.use-defaults-on-failure</option></term>

            <listitem>
              <para>If a type could not be resolved or is invalid or any of
              the explicite information about an edge was invalid, this option
              forces NETCONVERT to use the default type values for the current
              street. If not set, and one of the cases occures, the
              application's behaviour is not determined. <remark>Optional,
              type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.all-bidi</option></term>

            <listitem>
              <para>Forces <application>NETCONVERT</application> to insert all
              edges bidirectional. <remark>Optional (pregiven), type:bool,
              default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.utm
            <replaceable>&lt;ORIGINAL_UTM_ZONE&gt;</replaceable></option></term>

            <listitem>
              <para>This value describes in which UTM-zone your network is
              located. The default is 32 being a place somwhere in western
              Germany. You should change this value if importing networks
              located somewhere else in the world. <remark>Optional
              (pregiven), type:int, default: 32</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.guess-projection</option></term>

            <listitem>
              <para>If building a converter using the given UTM-zone fails,
              this option tries to guess the project if set. Of course, this
              may also fail... <remark>Optional (pregiven), type:bool,
              default: false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para><ulink url="#user_chp04-further_options-kmh_speed">"Using
            Edges' maximum Speed Definitions in km/h"</ulink></para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>versions earlier than 0.9.2 allow to use an explicit
            filename for both the .dbf and the .shp file using
            "<option>--arcview-dbf</option>" and
            "<option>--arcview-shp</option>". This was abondonned, because of
            the need to use .shx-files, also.</para>
          </listitem>

          <listitem>
            <para>ArcView-import has been completely redesigned for version
            0.9.4. All options but "<option>--arcview
            <replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable></option>" are
            not available in versions prior to 0.9.4</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-other_input-artemis">
        <title>Importing Artemis-simulation folders</title>

        <para>To import Artemis-network descriptions, start
        <application>NETCONVERT</application> with the following
        parameter:</para>

        <screen>netconvert --artemis=&lt;PATH&gt; --output-file=MySUMOFile.net.xml</screen>

        <para>This should build the network
        "<filename>MySUMOFile.net.xml</filename>" which contains the build
        network that may be used by SUMO.
        <option><replaceable>&lt;PATH&gt;</replaceable></option> is the path
        to (the name of) the folder that contains the files that make up the
        description of an ARTEMIS-simulation.</para>

        <para>Imported information:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Nodes (id, position, type)</para>
          </listitem>

          <listitem>
            <para>Links (origin, destination, id, speed, number of lanes,
            length)</para>
          </listitem>

          <listitem>
            <para>Signals</para>
          </listitem>

          <listitem>
            <para>Signal Groups (node id, group, connection, start &amp; end
            phase)</para>
          </listitem>

          <listitem>
            <para>Signal Phases (node id, start, phase, percentage)</para>
          </listitem>

          <listitem>
            <para>Segments (link, position on link, geometrical
            position)</para>
          </listitem>

          <listitem>
            <para>Lanes (lane number, section number, begin and end
            position)</para>
          </listitem>

          <listitem>
            <para>HVdests (origin and destination lane)</para>
          </listitem>
        </itemizedlist>

        <para>We have to import the HVdests to know which sources and sinks we
        have to build.</para>

        <para>Known problems:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>The connections between lanes may be not the same as in the
            input</para>
          </listitem>

          <listitem>
            <para>The positions of the lanes are not correct</para>
          </listitem>

          <listitem>
            <para>The times the traffic lights switch at may not be the same
            as within the input</para>
          </listitem>

          <listitem>
            <para>Additional source and sink links must be build</para>
          </listitem>

          <listitem>
            <para>Possible speed changes at segments are not supported</para>
          </listitem>
        </itemizedlist>

        <para>Artemis simulation description also holds definitions of the
        traffic flows to use. They are not parsed by the
        <application>NETCONVERT</application> - module, but may be passed to
        <application>ROUTER</application> to gain the according routes.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --artemis-path | --artemis )
            <replaceable>&lt;PATH&gt;</replaceable></option></term>

            <listitem>
              <para>Loads definitions from the given path. <remark>Optional,
              type:path, default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Known problems:</para>

        <caution>
          <para>The import of ARTMIS is not longer supplied and seems to be
          buggy.</para>
        </caution>

        <para>Examples: none yet (we do not own a network we could give away
        for legal reasons)</para>
      </sect2>

      <sect2 id="user_chp04-other_input-fastlane">
        <title>Importing Cell/Fastlane-networks</title>

        <para>FastLane, developed at the <ulink
        url="http://www.zaik.uni-koeln.de/">ZAIK</ulink>, is a mesoscopic
        traffic simulation. The network description consists of a file
        containing edges and a second one containing nodes. Due to this, you
        need to supply two values as input parameter and the call looks like
        this:</para>

        <screen>netconvert --cell-nodes=<replaceable>&lt;CELL_NODE_FILE&gt;</replaceable> --cell-edges=<replaceable>&lt;CELL_EDGE_FILE&gt;</replaceable> \
   --output-file=<replaceable>MySUMOFile.net.xml</replaceable></screen>

        <para>Of course, both files must belong to the same network. As
        FastLane is a mesoscopic simulation, sometime the number of an edge's
        lanes is not given. Instead, FastLane uses the capacity. In such
        cases, the number of lanes is computed roughly using the edge's
        capacity. We assume a linear dependency for this, currently, although
        this may not be the best solution. So, the number of lanes is computed
        as EDGE_CAPACITY/NORM. You may change the norm from its default of
        20000 using the option <option>--capacity-norm</option>.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --cell-node-file | --cell-nodes )
            <replaceable>&lt;FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Reads nodes definitions from
              <replaceable>&lt;FILE&gt;</replaceable>. <remark>Optional,
              type:path, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --cell-edge-file | --cell-edges )
            <replaceable>&lt;FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Reads edges definitions from
              <replaceable>&lt;FILE&gt;</replaceable>. <remark>Optional,
              type:path, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --capacity-norm | -N )
            <replaceable>&lt;FLOAT&gt;</replaceable></option></term>

            <listitem>
              <para>Sets the capacity norm to the given value.
              <remark>Optional (pregiven), type:float, default:
              20000</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet (we do not own a network we could give away
        for legal reasons)</para>
      </sect2>

      <sect2 id="user_chp04-other_input-vissim">
        <title>Importing VISSIM-networks</title>

        <para>Although Vissim is a microscopic simulation as SUMO is, it
        follows a completely different concept of modelling traffic. Due to
        this, the import is quite clumsy and may not work with all networks.
        Also, we have to insert additional edges into our networks to simulate
        the Vissim-parking places, originally being nodes, which we do not
        have. An usage example could be this one:</para>

        <screen>netconvert --vissim=<replaceable>&lt;VISSIM_FILE&gt;</replaceable> --output-file=<replaceable>MySUMOFile.net.xml</replaceable></screen>

        <para>Vissim-networks do possibly not contain explicit definitions of
        an edge's speed. We have to propagate once set velocities, but even
        then some edges' speeds may not be defined. The option
        "<option>--vissim-default-speed</option>" may change the default speed
        used in the case an edge's speed is not defined. The default value for
        this parameter is 13.89m/s, being around 50km/h. The second parameter
        "<option>--vissim-speed-norm</option>" describes the factor to
        multiply a described flows maximum velocity to gain the velocity to
        use. The default value is 1.</para>

        <para>Furthermore, as we have to use geometrical heuristics, a further
        factor steers the process of converting Vissim-networks: simply
        spoken, "<option>--vissim-offset</option>" holds the information how
        near two nodes must be (in meters) to be joined.</para>

        <para>During import, different actions must be done which may yield in
        some loss of data and may be watched in part by setting the verbose
        option. The additional warnings the import of Vissim-networks
        generates will be described in a further document.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--vissim
            <replaceable>&lt;FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Loads definitions from the given file (should end with
              ".inp"). <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--vissim-speed-norm
            <replaceable>&lt;SPEED_NORM_FACTOR&gt;</replaceable></option></term>

            <listitem>
              <para>A factor that is multiplied with a streams maximum
              velocity to determine the velocity to use for an edge.
              <remark>Optional (pregiven), type:float, default:
              1</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--vissim-default-speed
            <replaceable>&lt;DEFAULT_SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>The default speed to use for a street when no information
              is available. <remark>Optional (pregiven), type:float, default:
              13.89 (m/s)</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--vissim-offset
            <replaceable>&lt;MAX_JOIN_DISTANCE&gt;</replaceable></option></term>

            <listitem>
              <para>This value is used to determine whether two
              Vissim-structures are near enough to be joined into a node.
              <remark>Optional (pregiven), type:float, default: 5
              (m)</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Known problems:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Works with German networks only</para>
          </listitem>

          <listitem>
            <para>All actuated traffic lights are mapped onto the same type of
            traffic light (MSActuatedTrafficLight)</para>
          </listitem>

          <listitem>
            <para>Additional source and sink links must be build</para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet (we do not own a network we could give away
        for legal reasons)</para>
      </sect2>

      <sect2 id="user_chp04-other_input-visum">
        <title>Importing VISUM-networks</title>

        <para>Visum is a macroscopic simulation developed by ptv.
        <application>NETCONVERT</application> is capable to read
        VISUM-networks written as <filename class="extension">.net</filename>
        files. An usage import call could be this one:</para>

        <screen>netconvert --visum=<replaceable>&lt;VISUM_FILE&gt;</replaceable> --output-file=<replaceable>MySUMOFile.net.xml</replaceable></screen>

        <para>As the network description may not contain any information about
        the number of lanes, we have to generate it from the street's flow.
        The computation is done by dividing the flow through a fix value, 2000
        by default. This yields in a realistic network but fails on 'feeder
        roads' where vehicles are emitted.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--visum
            <replaceable>&lt;FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Loads definitions from the given file (should end with
              ".net"). <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet (we do not own a network we could give away
        for legal reasons)</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Since version 0.9.4, <application>NETCONVERT</application>
            can also convert VISION-networks (VISUM version 0.9.3). Please
            remark for this case, that we do not have a VISION-network which
            contains TLS-definitions and due to this the import of these may
            fail.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-other_input-elmar">
        <title>Importing Elmar's converted NavTech-Files</title>

        <para>You can convert both the splitted and the unsplitted version of
        files generated by Elmar from NavTech-files. I suppose, there is no
        difference between them, but some other projects are using one certain
        type and so may have only this type of files. The option
        <option>--elmar</option> loads the splitted definitions,
        <option>--elmar2</option> the unsplitted. Both options await the
        prefix as generated by Elmar's converter, an optional path is allowed.
        Example:</para>

        <screen>netconvert --elmar=berlin_ --output-file=<replaceable>MySUMOFile.net.xml</replaceable></screen>

        <para>Imports the descriptions of nodes from
        "<filename>berlin_nodes.txt</filename>" and the edges from
        "<filename>berlin_links.txt</filename>".</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--elmar
            <replaceable>&lt;NET_PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Loads the splitted versions of the files behind
              <replaceable>&lt;NET_PREFIX&gt;</replaceable>. <remark>Optional,
              type:filename-prefix, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--elmar2
            <replaceable>&lt;NET_PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Loads the unsplitted versions of the files behind
              <replaceable>&lt;NET_PREFIX&gt;</replaceable>. <remark>Optional,
              type:filename-prefix, default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet (we do not own a network we could give away
        for legal reasons)</para>
      </sect2>

      <sect2 id="user_chp04-other_input-tiger">
        <title>Importing TIGER-databases</title>

        <para>This import function is in a rather experimental state. We need
        someone who owns a network she/he knows and who could give us an
        advice whether the import work as expected. You still may try it out
        using the option
        <option>--tiger=<replaceable>&lt;FILE_PREFIX&gt;</replaceable></option>.</para>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp04-further_options">
      <title>Further NETCONVERT Options</title>

      <para><application>NETCONVERT</application> allows offers some more
      options to describe how the network shall be imported. The scope of some
      options does not cover all import types, though a list of valid import
      types for each options set is given.</para>

      <sect2 id="user_chp04-further_options-defaults">
        <title>Setting default Values</title>

        <para>We have mentioned, that edge parameter may be omitted and
        defaults will be used in this case. You have the possibility to define
        these defaults using the following options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --type | -T )
            <replaceable>&lt;DEFAULT_TYPE_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>The name of the default type of edges. <remark>Optional
              (pregiven), type:string, default: "Unknown"</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --lanenumber | -L )
            <replaceable>&lt;DEFAULT_LANE_NUMBER&gt;</replaceable></option></term>

            <listitem>
              <para>The number of lanes an edge has to use as default.
              <remark>Optional (pregiven), type:int, default:
              1</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --speed | -S )
            <replaceable>&lt;DEFAULT_MAX_SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>The maximum speed allowed on an edge in m/s to use as
              default. <remark>Optional (pregiven), type:float, default:
              13.9</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --priority | -P )
            <replaceable>&lt;DEFAULT_PRIORITY&gt;</replaceable></option></term>

            <listitem>
              <para>The default priority of an edge. <remark>Optional
              (pregiven), type:int, default: 1</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>These options may be used while importing the following
        formats:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>XML-descriptions</para>
            </listitem>
          </itemizedlist></para>

        <para>Examples: none yet</para>
      </sect2>

      <sect2 id="user_chp04-further_options-turnarounds">
        <title>Adding Turnarounds</title>

        <para>Normally, turnarounds are added as a possible edge continuations
        and play an important role during network building (see <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#Krajzewicz2005_2">[Krajzewicz_et_al2005_2]</ulink>).
        Still, one may want not to add them. In this cases, it is possible to
        disallow their appending using option
        "<option>--no-turnarounds</option>".</para>

        <para>Specific option:</para>

        <variablelist>
          <varlistentry>
            <term>--no-turnarounds</term>

            <listitem>
              <para><remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>This options may be used while importing the following
        formats:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>FastLane/CELL</para>
            </listitem>

            <listitem>
              <para>ARCVIEW-data base files</para>
            </listitem>

            <listitem>
              <para>XML-descriptions</para>
            </listitem>
          </itemizedlist></para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>in versions earlier than 0.9.3, turnarounds were not added
            per default. Instead the option
            "<option>--append-turnarounds</option>" has forced
            <application>NETCONVERT</application> to add them.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-nogeometry">
        <title>Removing Geometry Nodes</title>

        <para>In most input networks one may find nodes where one street comes
        in and one with the same attributes goes one or two parallel edges
        come in and two (with the same attribute) come out. Such nodes have
        mostly no meaning (maybe besides the additional possibility to make a
        U-turn) and may be removed. The removal of such nodes increases the
        simulation speed due to a smaller number of edges to process during
        each time step (see ...TBD ...). To remove such nodes and join the
        incoming and outgoing edges use "<option>--remove-geometry</option>".
        The removal of nodes preserves the geometry of edges by ading a
        further geometry point at the removed node's position.</para>

        <para>Specific option:</para>

        <variablelist>
          <varlistentry>
            <term>( --remove-geometry | -R )</term>

            <listitem>
              <para><remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>This options may be used in conjunction with all import
        formats.</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>in versions earlier than 0.9.3, geometry nodes were removed
            by default. One could change this behaviour using the
            "<option>--no-node-removal</option>" option.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-kmh_speed">
        <title>Using Edges' maximum Speed Definitions in km/h</title>

        <para>Some people do not like to use speed definitions in m/s. If you
        want to define the speeds allowed on your edges in km/h instead, you
        should pass the following option to
        <application>NETCONVERT:</application></para>

        <variablelist>
          <varlistentry>
            <term>--speed-in-kmh</term>

            <listitem>
              <para><remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>This option may be used while importing the following
        formats:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>FastLane/CELL</para>
            </listitem>

            <listitem>
              <para>ARCView-databases</para>
            </listitem>

            <listitem>
              <para>XML-descriptions</para>
            </listitem>
          </itemizedlist></para>

        <para>Examples:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>\data\examples\netbuild\cross_notypes_kmh</filename>
              in comparison to
              <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>\data\examples\netbuild\cross_notypes</filename></para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>\data\examples\netbuild\cross_usingtypes_kmh</filename>
              in comparison to
              <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>\data\examples\netbuild\cross_usingtypes</filename></para>
            </listitem>
          </itemizedlist></para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><option>--speed-in-kmh</option> was named
            <option>--speed-in-km</option> in versions earlier than
            0.9.2</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-importing_notls">
        <title>Importing Networks without Traffic Light Logics</title>

        <para>Some of the supported network formats - Visum, Vissim and
        Artemis, supply information about the logic of the traffic lights. The
        others do not. Due to this, we have to compute the traffic lights by
        our own. Doing this, we do not only have to compute the plans, but of
        course also, on which junction traffic lights are positioned. There
        are several options steering this procedure. At first, you have to
        tell
        <application>NETCONVERT</application>/<application>NETGEN</application>
        that you wish him to guess positions of traffic lights. This is done
        using the "<option>--guess-tls</option>"-option. Then, you have the
        possibility to describe the junctions at which you think a tls shall
        be placed using description of incoming and outgoing edges:
        "<option>--tls-guess.no-incoming-min</option>",
        "<option>--tls-guess.no-incoming-max</option>",
        "<option>--tls-guess.no-outgoing-min</option>" and
        "<option>--tls-guess.no-outgoing-max</option>" constraint the building
        of a tls by the number of the lanes incoming/outgoing edges have. All
        these four options require an int as parameter. Furthermore, you may
        constraint the junctions by giving the minimum/maximum of allowed
        speed on edges that participate:
        "<option>--tls-guess.min-incoming-speed</option>",
        "<option>--tls-guess.max-incoming-speed</option>",
        "<option>--tls-guess.min-outgoing-speed</option>", and
        "<option>--tls-guess.max-outgoing-speed</option>".</para>

        <caution>
          <para>No, we do not have a validated set of these option's settings,
          yet.</para>
        </caution>

        <para>You may also set junctions as tls-controlled using
        "<option>--explicite-tls</option>" or as uncontrolled using
        "<option>--explicite-no-tls</option>". Both options assume to get a
        list of node names divided by ';' as parameter. The behaviour when a
        node is in both lists is undefined.</para>

        <para>Normally, only one traffic lights logic (phases definition) is
        computed per a traffic lights controlled junction, but the algorithm
        we use is able to compute several logics. To force the computation of
        all possible logics, use "<option>--all-logics</option>". Remind, that
        all logics will be written to the network file and that we have no
        tools for further procesing of these logics.</para>

        <para>During the computation of tls-logics among other information we
        have to guess the duration of the phases. The options
        "<option>--traffic-light-green</option>" and
        "<option>--traffic-light-yellow</option>" allow you to give the
        durations of green and yellow lights. Both options assume the duration
        in s as an int as parameter. The duration of having red is dependant
        to the number of other phases and their green and yellow phase
        durations. The green phase length has a default of 20s, yellow lights
        are - if no value is set for this option - computed using the
        "<option>--min-decel</option>" - value described below.</para>

        <para>One has to remind one thing: dead times are necessary to avoid
        collisions of vehicles which do not manage to break as they are too
        near to the traffic light when it switches to red. This time may be
        computed, and is, but depends on the maximum deceleration possibility
        of the vehicles used. As this parameter is not known to the network
        builder at all - the vehicle types are supported to the simulation
        only - the option "<option>--min-decel</option>" (or
        <option>-D</option> for short) is used to set the minimum deceleration
        of vehicles. The default is 3.0 in m/s^2.</para>

        <para>There is no possibility to compute or estimate green light
        districts, yet. You have only the options to shift the computed phases
        by half of their duration or by a quarter of their duration. The
        options for this are: "<option>--tl-logics.half-offset</option>" and
        "<option>--tl-logics.quarter-offset</option>". Both options assume to
        get a list of node names divided by ';' as parameter. The behaviour
        when a node is in both lists or if the node is not meant to be
        controlled by a tls is undefined.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option><option>--guess-tls</option></option></term>

            <listitem>
              <para>Forces NETCONVERT/NETGEN to guess whether a junction is
              controlled by a tls or not. <remark>Optional, type:bool,
              default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--tls-guess.min-incoming-speed
            <replaceable>&lt;SPEED&gt;</replaceable>,
            --tls-guess.max-incoming-speed
            <replaceable>&lt;SPEED&gt;</replaceable></option></option></term>

            <listitem>
              <para>Sets the minimum and the maximum of the velocity a
              junction's incoming edges may have if the junction shall be
              tls-controlled in m/s. <remark>Optional (pregiven), type:float,
              defaults: --tls-guess.min-incoming-speed: 40/3.6,
              --tls-guess.min-incoming-speed: 69/3.6</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--tls-guess.min-outgoing-speed
            <replaceable>&lt;SPEED&gt;</replaceable>,
            --tls-guess.max-outgoing-speed
            <replaceable>&lt;SPEED&gt;</replaceable></option></option></term>

            <listitem>
              <para>Sets the minimum and the maximum of the velocity a
              junction's outgoing edges may have if the junction shall be
              tls-controlled in m/s. <remark>Optional (pregiven), type:float,
              defaults: --tls-guess.min-outgoing-speed: 40/3.6,
              --tls-guess.max-outgoing-speed: 69/3.6</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--tls-guess.no-incoming-min
            <replaceable>&lt;LANE_NUMBER&gt;</replaceable>,
            --tls-guess.no-incoming-max
            <replaceable>&lt;LANE_NUMBER&gt;</replaceable></option></option></term>

            <listitem>
              <para>Sets the minimum and the maximum number of a junction's
              incoming edges to allow the junction to be controlled by a tls.
              <remark>Optional (pregiven), type:int, defaults:
              --tls-guess.no-incoming-min: 2, --tls-guess.no-incoming-max:
              5</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--tls-guess.no-outgoing-min
            <replaceable>&lt;LANE_NUMBER&gt;</replaceable>,
            --tls-guess.no-outgoing-max
            <replaceable>&lt;LANE_NUMBER&gt;</replaceable></option></option></term>

            <listitem>
              <para>Sets the minimum and the maximum number of a junction's
              outgoing edges to allow the junction to be controlled by a tls.
              <remark>Optional (pregiven), type:int, defaults:
              --tls-guess.no-outgoing-min: 1, --tls-guess.no-outgoing-max:
              5</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--explicite-tls
            <replaceable>&lt;JUNCTION_ID&gt;</replaceable>[;<replaceable>&lt;JUNCTION_ID&gt;</replaceable>]*</option></option></term>

            <listitem>
              <para>Informs the network builder that the given junctions shall
              be treated as being controlled by traffic lights, even if they
              do not match the tls-guess rules. <remark>Optional, type:list of
              strings, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--explicite-no-tls
            <replaceable>&lt;JUNCTION_ID&gt;</replaceable>[;<replaceable>&lt;JUNCTION_ID&gt;</replaceable>]*</option></option></term>

            <listitem>
              <para>Informs the network builder that the given junctions shall
              be treated as NOT being controlled by traffic lights, even if
              they match the tls-guess rules. <remark>Optional, type:list of
              strings, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--all-logics</option></option></term>

            <listitem>
              <para>Computes and saves all possible cliques and phases for a
              traffic light instead of the fastest one only. <remark>Optional,
              type:bool, default: false</remark></para>

              <caution>
                <para>This process may be very time consuming.</para>
              </caution>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --min-decel | -D ) <replaceable
            class="parameter">&lt;FLOAT&gt;</replaceable></option></term>

            <listitem>
              <para>he minimum deceleration value for vehicles in m/s^2.
              <remark>Optional (pregiven), type:float, default:
              3</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--traffic-light-green
            <replaceable>&lt;DURATION&gt;</replaceable></option></term>

            <listitem>
              <para>The duration of green lights. <remark>Optional, type:int,
              default: none (20s internally)</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--traffic-light-yellow
            <replaceable>&lt;DURATION&gt;</replaceable></option></term>

            <listitem>
              <para>The duration of yellow lights; overrides
              <option>--min-decel</option>. <remark>Optional, type:int,
              default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>These options may be used while importing the following
        formats:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>FastLane/CELL</para>
            </listitem>

            <listitem>
              <para>ARCVIEW-data base files</para>
            </listitem>

            <listitem>
              <para>XML-descriptions</para>
            </listitem>
          </itemizedlist></para>

        <para>Examples: none yet</para>
      </sect2>

      <sect2 id="user_chp04-further_options-guessing_ramps">
        <title>Guessing On- and Off-Ramps</title>

        <para>Most of the imported network descriptions do not have
        information about highway on- and off-ramps. You can force
        <application>NETCONVERT</application> to guess where on- and off-ramps
        shall be build. To enable this, use the option
        "<option>--guess-ramps</option>". The algorithm assumes that an
        on-ramp shall be build on highway junctions with one incoming and one
        outgoing highway edge and one incoming minor edge and that an off-ramp
        shall be build on highway junctions with one incoming and one outgoing
        highway edge and one outgoing minor edge. You can contrain what a
        highway highway by giving its minimum speed of this edge using
        "<option>--ramp-guess.min-highway-speed</option>" and what a minor
        edge is by giving its maximum speed using
        "<option>--ramp-guess.max-ramp-speed</option>". Both options assume a
        float parameter being the speed. Furthermore,
        "<option>--ramp-guess.ramp-length</option>" tells
        <application>NETCONVERT</application> how long the added ramp shall be
        in meters.</para>

        <note>
          <para>Normally, we keep the edge as it is and let the geometry
          computation do the rest.</para>
        </note>

        <caution>
          <para>Note that computation of on- and off-ramps radically changes
          the lengths of your edges.</para>
        </caution>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--guess-ramps</option></term>

            <listitem>
              <para>Forces
              <application>NETCONVERT</application>/<application>NETGEN</application>
              to guess whether a junction is controlled by a tls or not.
              <remark>Optional, type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--ramp-guess.max-ramp-speed
            <replaceable>&lt;SPEED&gt;</replaceable></option></option></term>

            <listitem>
              <para>Defines the maximum speed an edge may have in order to be
              a ramp in m/s. The default of -1 tells
              <application>NETCONVERT</application> that all edges may be
              potential ramps. <remark>Optional (pregiven), type:float,
              default: -1</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--ramp-guess.min-highway-speed
            <replaceable>&lt;SPEED&gt;</replaceable></option></option></term>

            <listitem>
              <para>Defines the minimum speed an edge may have in order to be
              a highway in m/s. <remark>Optional (pregiven), type:float,
              default: 80/3.6</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--ramp-guess.ramp-length
            <replaceable>&lt;LENGTH&gt;</replaceable></option></option></term>

            <listitem>
              <para>Sets the length of the ramps to build in meters.
              <remark>Optional (pregiven), type:float, defaults:
              100</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>These options may be used in conjunction with all import
        formats.</para>

        <para>Examples: none yet</para>
      </sect2>

      <sect2 id="user_chp04-further_options-geocoordinates">
        <title>Converting from Geocoordinates</title>

        <para>Most professional networks are not stored using cartesian, but
        geo-coordinates. Since version 0.9.4 NETCONVERT is able to deal with
        such positions. NETCONVERT uses herefor the projection library
        "PROJ.4". This is important for you as a user, because you may have to
        describe the original projection of your file and when doing this, you
        have to describe it using the options offered by PROJ.4. In order to
        enable the reprojection use the option
        <option>--use-projection</option>. You can then add parameter for the
        projection using <option>--proj
        <replaceable>&lt;STRING&gt;</replaceable></option>. The default for
        the projection is "+proj=utm +zone=33 +ellps=bessel +units=m". That
        means, that NETCONVERT assumes the network is a part of the UTM zone
        33 and is described using the Bessel ellipsoid. Please remark, that
        when giving own description, you should embed it into "" for passing
        all the arguments to PROJ.4.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option><option>--use-projection</option></option></term>

            <listitem>
              <para>Enables reprojection of the network's coordinates.
              <remark>Optional, type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option><option>--proj
            <replaceable>&lt;STRING&gt;</replaceable></option></option></term>

            <listitem>
              <para>Defines projection. <remark>Optional (pregiven),
              type:string, default: "+proj=utm +zone=33 +ellps=bessel
              +units=m"</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>These options may be used in conjunction with the following
        import formats:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Elmar &amp; Elmar2</para>
          </listitem>

          <listitem>
            <para>ArcView</para>
          </listitem>

          <listitem>
            <para>Tiger</para>
          </listitem>

          <listitem>
            <para>Visum</para>
          </listitem>

          <listitem>
            <para>XML</para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet</para>
      </sect2>

      <sect2 id="user_chp04-further_options-additional_output">
        <title>Additional Output</title>

        <para><application>NETCONVERT</application> and
        <application>NETGEN</application> allow to generate additional output
        files. At first, parsed node and edge definitions may be saved into an
        XML-file which have the same formats as the ones used for importing
        XML-networks. This shall ease processing networks read from other
        formats than XML. The option <option>--plain-output
        <replaceable>&lt;FILENAME_PREFIX&gt;</replaceable></option> forces
        <application>NETCONVERT</application> and
        <application>NETGEN</application> to generate a file named
        "<filename>&lt;FILENAME_PREFIX&gt;.nod.xml</filename>" which contains
        the previously imported nodes and a file named
        "<filename>&lt;FILENAME_PREFIX&gt;.edg.xml</filename>" which contains
        the previously imported edges.</para>

        <para>The option <option>--map-output</option> (or <option>-M</option>
        fo short) generates a file which contains the information about which
        edges have been joined (see chapter "<ulink
        url="#user_chp04-further_options-turnarounds">Removing Geometry
        Nodes</ulink>"). ... TBD ... format</para>

        <para>The option <option>--node-geometry-dump</option> is meant to be
        used when debugging the geometry computation. It generates a list of
        points of interest as readable by guisim (see chapter "... TBD ...")
        on the positions that were used to compute the imported nodes'
        geometries. The option "<option>--print-node-positions</option>"
        forces <application>NETCONVERT</application> and
        <application>NETGEN</application> to print the positions of the
        imported/build nodes on the command line.</para>

        <para>Specific options:</para>

        <variablelist spacing="compact">
          <varlistentry>
            <term><option>--plain-output
            <replaceable>&lt;PLAIN_OUTPUT_PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Writes the files
              <filename><replaceable>&lt;PLAIN_OUTPUT_PREFIX&gt;</replaceable>.nod.xml</filename>
              and
              <filename><replaceable>&lt;PLAIN_OUTPUT_PREFIX&gt;</replaceable>.edg.xml</filename>
              that contain the descriptions about the nodes and the edges a
              network is made of. These files may be reread into the netgener
              using the XML-import capabilities. <remark>Optional,
              type:filename-prefix, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --map-output | -M )
            <replaceable>&lt;MAP_OUTPUT_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Writes the file
              <filename><replaceable>&lt;MAP_OUTPUT_FILE&gt;</replaceable></filename>
              which holds the list of edges that were joined to a single edge
              for each edge. <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--node-geometry-dump
            <replaceable>&lt;DUMP_FILENAME&gt;</replaceable></option></term>

            <listitem>
              <para>Writes the positions that were used during geometry
              computation into
              <filename><replaceable>&lt;DUMP_FILENAME&gt;</replaceable></filename>.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--print-node-positions</option></term>

            <listitem>
              <para>Prints the node positions during building.
              <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Examples: none yet</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp04-netgen">
      <title>Automatic Network Generation</title>

      <para><application>NETGEN</application> allows builds abstract networks.
      Three types of networks can be built. All of them are very easy, but may
      be used as examples. You are also greatly invited to extend the
      concepts. Available types are: grid-networks, spider-networks and
      random-networks.</para>

      <para>You always have to supply the name of the network to generate
      using <option>--output
      <replaceable>&lt;FILENAME&gt;</replaceable></option> or <option>-o
      <replaceable>&lt;FILENAME&gt;</replaceable></option> for short and the
      type of network you want to create. So, exactly one of the following
      switches must be supported: <option>--grid-net</option>,
      <option>--spider-net</option> or <option>--random-net</option>.</para>

      <para>While the type-dependent options are described within the next
      chapters, all types share some command line options. As all networks may
      possess junctions, you are able to set the default type of junctions to
      build using the <option>--default-junction-type</option>-option (or
      <option>-j</option> for short). The following junction types are allowed
      in accordance to the junction types currently known by the simulation:
      <option>priority</option>, <option>traffic_light</option>,
      <option>actuated</option>, <option>agentbased</option>.</para>

      <para><caution>
          <para><option>traffic_light</option> will be mapped to "static"
          within the generated network.</para>
        </caution></para>

      <para>Further, you can specify the default street type by using the same
      options as in the netconvert-application.</para>

      <sect2>
        <title>Grid-like Networks</title>

        <para>You are able to describe how many junctions in x- and in
        y-direction you want to be build and how far from each other they
        should be. The parameter for the number of junctions are
        <option>--grid-x-number</option> and <option>--grid-y-number</option>,
        the ones for the distance between the junctions
        <option>--grid-x-length</option> and <option>--grid-y-length</option>.
        If you want to build networks which have the same values for both
        axes, use <option>--grid-number</option> and
        <option>--grid-length</option>. The lengths are given in
        meters.</para>

        <para>An example usage for building could be:</para>

        <figure>
          <title><command>netgen --grid-net --grid-number=10 --grid-length=400
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/netgen_grid1.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Another one:</para>

        <figure>
          <title><command>netgen --grid-net --grid-x-number=20
          --grid-y-number=5 --grid-y-length=40 --grid-x-length=200
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/netgen_grid2.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>Spider-net-like Networks</title>

        <para>Spider-net networks are defined by the number of axes dividing
        them (parameter <option>--spider-arm-number</option> or
        <option>--arms</option>), the number of the circles they are made of
        (<option>--spider-circle-number</option> or
        <option>--circles</option>) and the distance between the circles
        (<option>--spider-space-rad</option> or
        <option>--radius</option>).</para>

        <para><caution>
            <para>As the number of edges within the middle of the spider net
            may be quite large, it is often not possible to build a traffic
            light junction here. Due to this, this junction is always a
            right-of-way-junction.</para>
          </caution></para>

        <para>Two examples of usage:</para>

        <figure>
          <title><command>netgen --spider-net --spider-arm-number=10
          --spider-circle-number=10 --spider-space-rad=100
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/netgen_spider1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>and:</para>

        <figure>
          <title><command>netgen --spider-net --spider-arm-number=4
          --spider-circle-number=3 --spider-space-rad=100
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/netgen_spider2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>Random Networks</title>

        <para>The random network generator does just what his name says, it
        builds random networks... Several settings may be changed:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><option>--rand-max-distance
            <replaceable>&lt;FLOAT&gt;</replaceable></option>: the maximum
            edge length</para>
          </listitem>

          <listitem>
            <para><option>--rand-min-distance
            <replaceable>&lt;FLOAT&gt;</replaceable></option>: the minimum
            edge length</para>
          </listitem>

          <listitem>
            <para><option>--rand-min-angle
            <replaceable>&lt;FLOAT&gt;</replaceable></option>: the minimum
            angle between two edges</para>
          </listitem>

          <listitem>
            <para><option>--rand-num-tries
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-connectivity
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist1
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist2
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist3
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist4
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist5
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist6
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>
        </itemizedlist>

        <para>An example:</para>

        <figure>
          <title><command>netgen --random-net -o MySUMOFile.net.xml --rand-ite
          rations=200 --abs-rand</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/netgen_random1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><caution>
            <para>This generator is not yet fully developed.</para>
          </caution></para>
      </sect2>

      <sect2>
        <title>Further NETGEN Options</title>

        <para>... TBD ...</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp04-closing">
      <title>Closing Thoughts (so far)</title>

      <para><application>NETGEN</application> allows to create networks in a
      very comfortable way. For some small-sized tests of rerouting
      strategies, tls-signals etc. this is probably the best solution to get a
      network one can run some simulations at. The clear naming of the streets
      also eases defining own routes.</para>

      <para>The most examples within the data-section were written by hand for
      several reasons. At first, the examples are small enough and one may see
      the effects better than when using <application>NETGEN</application>.
      Furthermore, defining own networks using XML-data is more fleixble than
      using <application>NETGEN</application>.
      <application>NETGEN</application> is of course useless as soon as you
      want to simulate the reality.</para>

      <para>When using real life networks, you we really can advice guessing
      on- and off-ramps and traffic lights. The on- off-ramps are guessed
      quite well, we can not state this for the tls, because we don't have
      made any comparisons with real life.</para>
    </sect1>

    <sect1 id="user_chp04-changes">
      <title>Recent Changes</title>

      <para>The following list contains recent changes in the naming or
      meaning of options. It has been started during the work on version
      0.9.2, so earlier changes are not contained, herein. The changes list
      contains the version where the change occured or will occure. The
      changes should be valid for the next stable release.</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Changes in version 0.9.2</para>

          <itemizedlist>
            <listitem>
              <para><option>--xml-type-files</option> was named
              <option>--type-file</option> in versions earlier than
              0.9.2</para>

              <para><emphasis>Reason:</emphasis> the naming does not fit into
              the naming scheme of other XML-input files.</para>
            </listitem>

            <listitem>
              <para>versions earlier than 0.9.2 allow to use a filename for
              each of the .dbf and the .shp file using
              "<option>--arcview-dbf</option>" and
              "<option>--arcview-shp</option>".</para>

              <para><emphasis>Reason:</emphasis> This was abondonned, because
              of the need to use .shx-files, also.</para>
            </listitem>

            <listitem>
              <para><option>--speed-in-kmh</option> was named
              <option>--speed-in-km</option> in versions earlier than
              0.9.2</para>

              <para>Reason: false physical measure</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Changes in version 0.9.3</para>

          <itemizedlist>
            <listitem>
              <para>in versions earlier than 0.9.3, turnarounds were not added
              per default. Instead the option
              "<option>--append-turnarounds</option>" has forced
              <application>NETCONVERT</application> to add them.</para>

              <para><emphasis>Reason:</emphasis> turnarounds semm to be wished
              for the wider set of applications. Only sometimes it is unwished
              to add them.</para>
            </listitem>

            <listitem>
              <para>in versions earlier than 0.9.3, geometry nodes were
              removed by default. One could change this behaviour using the
              "<option>--no-node-removal</option>" option.</para>

              <para><emphasis>Reason:</emphasis> the same as for
              "<option>--append-turnarounds</option>"</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="user_chp04-missing">
      <title>Missing</title>

      <para>Not yet described:</para>

      <para>--print-node-positions</para>

      <para>--omit-corrupt-edges</para>

      <para>--flip-y</para>

      <para>--use-laneno-as-priority</para>

      <para>--x-offset-to-apply, --y-offset-to-apply,
      --rotation-to-apply</para>

      <para>--add-internal-links</para>

      <para>--edges-min-speed, --keep-edges, --keep-edges.input-file,
      --keep-edges.postload</para>

      <para>--keep-unregulated, --keep-unregulated.nodes,
      --keep-unregulated.district-nodes</para>

      <para>--guess-obscure-ramps, --obscure-ramps.add-ramp,
      --obscure-ramps.min-highway-speed</para>
    </sect1>
  </chapter>

  <chapter id="user_chp05">
    <title>Route Generation</title>

    <sect1 id="user_chp05-introduction">
      <title>Introduction</title>

      <para>After having your network converted into the SUMO-format, you
      could take a look at it using the gui-version of the simulation, but no
      cars would be driving around. You still need some kind of description
      about the vehicles. If you are importing data from other simulation
      packages, they normally bring own route definitions you can use. In case
      of using ArcView- or own data or in other cases where you do not have
      the vehicle movements at all, you have to generate them by your own.
      From now on we will use the following nomenclature: A
      <emphasis>trip</emphasis> is a vehicle movement from one place to
      another defined by the starting edge (street), the destination edge, and
      the departure time. A <emphasis>route</emphasis> is an expanded trip,
      that means, that a route definition contains no only the first and the
      last edge, but all edges the vehicle will pass. There are several ways
      to generate routes for SUMO:</para>

      <itemizedlist>
        <listitem>
          <para>using trip definitions</para>

          <para>As described above, each trip consists at least of the
          starting and the ending edge and the departure time (see Chapter
          "<ulink url="#user_chp05-explicite-trips">Using Trip
          Definitions</ulink>").</para>
        </listitem>

        <listitem>
          <para>using flow definitions</para>

          <para>This is mostly the same approach as using trip definitions,
          but you may join several vehicles having the same trips using this
          method (see Chapter "<ulink url="#user_chp05-explicite-flows">Using
          Flow Definitions</ulink>").</para>
        </listitem>

        <listitem>
          <para>using flow definitions and turning ratios</para>

          <para>You may also leave out the destination edges for flows and use
          turning ratios at junctions instead (see Chapter "<ulink
          url="#user_chp05-own_routes-jtr">Using the Junction Turning Ratio -
          Router</ulink>").</para>
        </listitem>

        <listitem>
          <para>using OD-matrices</para>

          <para>OD-matrices have to be converted to trips first (see Chapter
          "<ulink url="#user_chp05-od2trips">Using OD2TRIPS</ulink>"), then
          from trips to routes (see Chapter "<ulink
          url="#user_chp05-explicite-trips">Using Trip
          Definitions</ulink>").</para>
        </listitem>

        <listitem>
          <para>by hand</para>

          <para>You can of course generate route files by hand.</para>
        </listitem>

        <listitem>
          <para>using random routes</para>

          <para>This is fast way to fill the simulation with life, but
          definitely a very inaccurate one (see Chapter "<ulink
          url="#user_chp05-own_routes-random">Generating random
          Routes</ulink>").</para>
        </listitem>

        <listitem>
          <para>by importing available routes (see Chapter "<ulink
          url="#user_chp05-import_routes">Importing Routes from other
          Simulations</ulink>")</para>
        </listitem>
      </itemizedlist>

      <para>By now, the SUMO-package contains three applications for
      processing routes. <application>DUAROUTER</application> is responsible
      for importing routes from other simulation packages and for computing
      routes using the shortest-path algorithm by Dijkstra.
      <application>JTRROUTER</application> may be used if you want to model
      traffic statistically, using flows and turning percentages at junctions.
      <application>OD2TRIPS</application> helps you to convert OD-matrices
      (origin/destination-matrices) into trips. Within the next chapters, at
      first the mandatory arguments are described, then we will show how each
      of the possible methods of generating routes from scratch can be used.
      In the following, importing routes and additional options are given
      followed by a small overview.</para>
    </sect1>

    <sect1 id="user_chp05-common">
      <title>Common, mandatory Values</title>

      <para>Independent to what you are doing, you always have to supply the
      network using the <option>--net-file</option> (or <option>--net</option>
      or <option>-n</option> for short) option. Additionally, you should let
      the application know which time interval is to be used. Route/trip/flow
      definitions will be imported within the interval given by the options
      <option>--begin</option> (<option>-b</option>) and
      <option>--end</option> (<option>-e</option>). Definitions with departure
      time earlier than the one specified by <option>--begin</option> or later
      than those specified by <option>--end</option> will be discarded. If you
      do not give a value for the begin / end time step the defaults 0 and
      86400 (one day) will be used, respectively.</para>

      <para>Mandatory options:</para>

      <variablelist>
        <varlistentry>
          <term><option>( --net-file | --net | -n )
          <replaceable>&lt;SUMO_NET_FILE&gt;</replaceable></option></term>

          <listitem>
            <para>The network to route on. <remark>Mandatory, type:filename,
            default: none</remark></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>( --begin | -b )
          <replaceable>&lt;TIME&gt;</replaceable></option></term>

          <listitem>
            <para>Defines the begin time routes shall be generated (in
            seconds). <remark>Default (pregiven), type:int, default:
            0</remark></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>( --end | -e
          )<replaceable>&lt;TIME&gt;</replaceable></option></term>

          <listitem>
            <para>Defines the end time routes shall be generated (in seconds).
            <remark>Default (pregiven), type:int, default:
            86400</remark></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="user_chp05-own_routes">
      <title>Building own Routes from Scratch</title>

      <para>You have either the possibility to generate completely random
      routes or to exactly describe what you want and pass this information to
      <application>DUAROUTER</application> or
      <application>JTRROUTER</application>, which then expand your
      descriptions to routes. As result, a routes file is normally generated
      which you may use within your simulation.</para>

      <caution>
        <para>You have to know that each route should consist of at least
        three edges! On the first, the vehicle will be emitted. As soon as it
        reaches <emphasis>the begin</emphasis> of the last, it will be removed
        from the network. So to see the vehicle running, you should at least
        have one edge in between!</para>
      </caution>

      <sect2 id="user_chp05-explicit">
        <title>Generating own, explicit Routes</title>

        <para>There are two possibilities to describe own routes. The first
        one id the usage of trip definitions, the second one the usage of flow
        descriptions. Trip definitions describe the movement of a single
        vehicle giving the departure time, and both the origin and the
        destination via their edge-id. Flow descriptions use these values to,
        but instead of describing only one vehicle, the description is used
        for a defined number of vehicles to be emitted within a described
        interval. Due to this, instead of the departure time, the period's
        begin and end times must be supplied and the number of vehicles to
        emit within this interval.</para>

        <figure>
          <title>Building routes from trips</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/simsteps-router.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>We will describe both data types less briefly, now.</para>

        <sect3 id="user_chp05-explicite-trips">
          <title>Using Trip Definitions</title>

          <para>Trip definitions that can be laid into the network may be
          supplied to the router using an XML-file. The syntax of a single
          trip definition is: <sgmltag>&lt;tripdef
          id="<replaceable>&lt;ID&gt;</replaceable>"
          depart="<replaceable>&lt;TIME&gt;</replaceable>"
          from="<replaceable>&lt;ORIGIN_EDGE_ID&gt;</replaceable>"
          to="<replaceable>&lt;DESTINATION_EDGE_ID&gt;</replaceable>"
          [type="<replaceable>&lt;VEHICLE_TYPE&gt;</replaceable>"]
          [period="<replaceable>&lt;INT&gt;</replaceable>"
          repno="<replaceable>&lt;INT&gt;</replaceable>"]
          [color="<replaceable>&lt;COLOR&gt;</replaceable>"]/&gt;</sgmltag>.
          You have to supply the edge the trip starts at (origin), the edge
          the trip ends at (destination) and the departure time at least. If
          the type is not given, a default ("SUMO_DEFAULT_TYPE") will be used
          and stored within the routes-file. If the attribute
          <sgmltag>period</sgmltag> is given, not only one vehicle will use
          the route, but every n seconds (where n is the number defined in
          period), a vehicle using this route will be emitted. The number of
          vehicles to emit using this route may be additionally constrained
          using <sgmltag>repno</sgmltag>. Otherwise, it is unlimited.</para>

          <para>Let's review a trip's parameter:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              route (and vehicle)</para>
            </listitem>

            <listitem>
              <para><sgmltag>depart</sgmltag>: The time the route starts
              at</para>
            </listitem>

            <listitem>
              <para><sgmltag>from</sgmltag>: The name of the edge the route
              starts at; the edge must be a part of the used network</para>
            </listitem>

            <listitem>
              <para><sgmltag>to</sgmltag>: The name of an the edge the route
              ends at; the edge must be a part of the used network</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: The name of the type the vehicle
              has (optional)</para>
            </listitem>

            <listitem>
              <para><sgmltag>period</sgmltag>: The time after which another
              vehicle with the same route shall be emitted (optional)</para>
            </listitem>

            <listitem>
              <para><sgmltag>repno</sgmltag>: The number of vehicles to emit
              which share the same route (optional)</para>
            </listitem>

            <listitem>
              <para><sgmltag>color</sgmltag>: Defines the color of the vehicle
              and the route (optional)</para>
            </listitem>
          </itemizedlist>

          <para>This file is supplied to <application>DUAROUTER</application>
          using the option "<option>--trip-defs</option>" or
          "<option>-t</option>":</para>

          <screen>duarouter --trip-defs=<replaceable>&lt;TRIP_DEFS&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

          <para>Specific options:</para>

          <variablelist>
            <varlistentry>
              <term><option>( --trip-defs | --trips | -t )
              <replaceable>&lt;TRIP_DEFINITION_FILE&gt;</replaceable></option></term>

              <listitem>
                <para>Tells <application>DUAROUTER</application> from what
                file trip definitions shall be read. <remark>Optional,
                type:filename, default: none</remark></para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Examples:</para>

          <para>Almost all networks within the
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/</filename>
          - folder. Additionally some examples that deal with trips may be
          found in
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router</filename>.</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/trips2routes/</filename>
              shows the basic usage of trips; This example is quiet trivial -
              100 same vehicles are emitted</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/trips2routes_repetition/</filename>
              does exactly the same, but not by defining each of the 100
              vehicles, but letting one vehicle be duplicated using
              <sgmltag>period</sgmltag> and <sgmltag>repno</sgmltag></para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp05-explicite-flows">
          <title>Using Flow Definitions</title>

          <para>Flow amounts share most of the parameter with trip
          definitions. The syntax is: <sgmltag>&lt;flow
          id="<replaceable>&lt;ID&gt;</replaceable>"
          from="<replaceable>&lt;ORIGIN_EDGE_ID&gt;</replaceable>"
          to="<replaceable>&lt;DESTINATION_EDGE_ID&gt;</replaceable>"
          begin="<replaceable>&lt;INTERVAL_BEGIN&gt;</replaceable>"
          end="<replaceable>&lt;INTERVAL_END&gt;</replaceable>"
          no="<replaceable>&lt;VEHICLES_TO_EMIT&gt;</replaceable>"
          [type="<replaceable>&lt;VEHICLE_TYPE&gt;</replaceable>"]
          [color="<replaceable>&lt;COLOR&gt;</replaceable>"]/&gt;</sgmltag>.
          Notice the following differences: the vehicle does not take a
          certain departure time as not only one vehicle is described by this
          parameter, but a set of, given within the attribute
          "<sgmltag>no</sgmltag>" (short for number). The departure times are
          spread uniformly within the time interval described by
          <sgmltag><replaceable>&lt;INTERVAL_BEGIN&gt;</replaceable></sgmltag>
          and
          <sgmltag><replaceable>&lt;INTERVAL_END&gt;</replaceable></sgmltag>.
          All these three attributes must be integer values. The values
          "<sgmltag>period</sgmltag>" and "<sgmltag>repno</sgmltag>" are not
          used herein. Flow definitions can also be embedded into an interval
          tag. In this case one can (but does not have to) leave the tags
          "<sgmltag>begin</sgmltag>" and "<sgmltag>end</sgmltag>" out. So the
          following two snipples mean the same:</para>

          <programlisting><sgmltag>&lt;flow id="0" from="edge0" to="edge1" begin="0" end="3600" no="100"/&gt;</sgmltag>
</programlisting>

          <para>and</para>

          <programlisting><sgmltag>&lt;interval begin="0" end="3600"&gt;</sgmltag>
   <sgmltag>&lt;flow id="0" from="edge0" to="edge1" no="100"/&gt;</sgmltag>
<sgmltag>&lt;/interval&gt;</sgmltag></programlisting>

          <para>Let's review flow parameter:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              flow; vehicles and routes will be named
              "<replaceable>&lt;id&gt;</replaceable>_<replaceable>&lt;RUNNING&gt;</replaceable>"
              where <replaceable>&lt;RUNNING&gt;</replaceable> is a number
              starting at 0 and increased for each vehicle.</para>
            </listitem>

            <listitem>
              <para><sgmltag>from</sgmltag>: The name of the edge the routes
              start at; the edge must be a part of the used network</para>
            </listitem>

            <listitem>
              <para><sgmltag>to</sgmltag>: The name of an the edge the routes
              end at; the edge must be a part of the used network</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: The name of the type the vehicle
              has</para>
            </listitem>

            <listitem>
              <para><sgmltag>begin</sgmltag>: The begin time for the described
              interval</para>
            </listitem>

            <listitem>
              <para><sgmltag>end</sgmltag>: The end time for the interval;
              must be greater than
              <sgmltag><replaceable>&lt;begin&gt;</replaceable></sgmltag>;
              vehicles will be emitted between
              <sgmltag><replaceable>&lt;begin&gt;</replaceable></sgmltag> and
              <sgmltag><replaceable>&lt;end&gt;</replaceable></sgmltag>-1</para>
            </listitem>

            <listitem>
              <para><sgmltag>no</sgmltag>: The number of vehicles that shall
              be emitted during this interval</para>
            </listitem>

            <listitem>
              <para><sgmltag>color</sgmltag>: Defines the color of the
              vehicles and their routes (optional)</para>
            </listitem>
          </itemizedlist>

          <para>As we have to read in the flow definitions completely into the
          memory - something we do not have to do necessarily with trips, an
          extra parameter (<option>-f</option> or
          <option>--flow-defs</option>) is used to make them known by the
          router:</para>

          <screen>duarouter --flow-defs=<replaceable>&lt;FLOW_DEFS&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

          <para>Remind that you can not insert flow descriptions into a trip
          definitions file. The opposite (some trip definitions within a flow
          descriptions file) is possible. You also can give both files at the
          input file, for example:</para>

          <screen>duarouter --flow-defs=<replaceable>&lt;FLOW_DEFS&gt;</replaceable> --trip-defs=<replaceable>&lt;TRIP_DEFS&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> \
   --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

          <para>Options:</para>

          <variablelist>
            <varlistentry>
              <term><option>( --flow-definition | --flow-defs | --flows | -f )
              <replaceable>&lt;FLOW_DEFINITION_FILE&gt;</replaceable></option></term>

              <listitem>
                <para>Tells
                <application>DUAROUTER</application>/<application>JTRROUTER</application>
                from what file flow definitions shall be read.
                <remark>Optional, type:filename, default: none</remark></para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Examples:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes/</filename>
              shows the basic usage of flows; This example generates 100
              vehicles just like
              <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes/</filename>
              but it uses flow definitions instead of trips for this.</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes_100s_interval/</filename>
              is almost the same, but vehicles are departing over a time of
              100s.</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes_200s_interval/</filename>
              is almost the same, but vehicles are departing over a time of
              200s.</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes_100s_interval_ext/</filename>
              shows the second possibility of defining intervals in
              flow-defs.</para>
            </listitem>
          </itemizedlist>

          <para>Changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>There was a bug on using flow in prior versions; the end
              time step was also used making the behaviour not as good
              predictable. This has been now changed so that the vehicles are
              emitted in steps starting at
              <sgmltag><replaceable>&lt;begin&gt;</replaceable></sgmltag> and
              ending at
              <sgmltag><replaceable>&lt;end&gt;</replaceable></sgmltag>-1.</para>

              <para><emphasis>Reason:</emphasis> The prior behaviour was not
              correct</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>

      <sect2 id="user_chp05-own_routes-random">
        <title>Generating random Routes</title>

        <para>Random routes are the easiest, but also the most inaccurate way
        to feed your network with vehicle movements. Using the following call
        ro <application>DUAROUTER</application>:</para>

        <screen>duarouter --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> -R <replaceable>&lt;FLOAT&gt;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

        <para>or the same for the <application>JTRROUTER</application>:</para>

        <screen>jtrrouter --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> -R <replaceable>&lt;FLOAT&gt;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

        <para>you will generate random routes for the time interval given by
        <option>-b(egin)</option> and <option>-e(nd)</option>. In each time
        step as many vehicles will be emitted into the network as given by the
        value of <option>-R</option> (<option>--random-per-second</option>).
        You can also supply values smaller than one. In this case, a single
        vehicle will be emitted each
        1/<option><replaceable>&lt;-R&gt;</replaceable></option> step.
        Example: <option>-R 0.25</option> generates a route description,
        which, when loaded, forces the simulation to emit a single vehicle
        each fourth time step. It is also possible to use this parameter in
        combination with other route definitions, for example supplying some
        fix routes and additionally generate random routes.</para>

        <para>Random routes are not the best way to generate routes. Take a
        look at the network displayed below. This network has two rural and
        many minor roads. Random routes are by now spread all over the network
        and each road is chosen to be the starting or the ending without
        respecting his function. Due to this, the network is filled over with
        cars, coming from and approaching directions, the normal traffic is
        not taking - the normal traffic would concentrate on rural
        roads.</para>

        <figure>
          <title>A network where the usage of random routes causes an improper
          behaviour due to the mixture of rural and minor roads</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/ivf.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>There is also another problem with random routes: By definition,
        in 50% of the cases, the route starts in the opposite direction of the
        destination - on the wrong side of the road. This yields in a large
        amount of vehicles that want to turn back using the first possibility.
        This is of course also not common in the real world, especially not in
        areas as the one shown before. To avoid this, we remove the first and
        the last edge from the route per default when generating random
        routes.</para>

        <para>Options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --random-per-second | -R )
            <replaceable>&lt;RANDOM_VEHICLES_PER_SECOND&gt;</replaceable></option></term>

            <listitem>
              <para>Forces
              <application>DUAROUTER</application>/<application>JTRROUTER</application>
              to generate random trips. Per second the given number of
              vehicles will be generated. <remark>Optional, type:float,
              default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="user_chp05-own_routes-jtr">
        <title>Using the Junction Turning Ratio - Router</title>

        <para>The <application>JTRROUTER</application> is a routing
        applications which uses flows and turning percentages at junctions as
        input. The following parameter must be supplied: the network to route
        the vehicles through, the description of the turning ratios for the
        junctions (defaults may be used for this, too), and the descriptions
        of the flows.</para>

        <para>A call may look like this:</para>

        <screen>jtrrouter --flow-defs=<replaceable>&lt;FLOW_DEFS&gt;</replaceable> --turns=<replaceable>&lt;TURN_DEFINITIONS&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> \
   --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

        <para>The definitions of the flow look like the ones for the
        <application>DUAROUTER</application> with just a single difference: as
        it is not known where the vehicle will leave the network as the route
        it uses is randomly computed, the destination parameter has no meaning
        for jtr-routing and so may be left off. A vehicle leaves the network
        as soon as it comes to a sink edge. As not all networks have sink
        edges set, one can support a list of edges to be declared as sinks
        using <option>--sinks
        <replaceable>&lt;EDGE_ID&gt;[;&lt;EDGE_ID&gt;]*</replaceable></option>.</para>

        <para>To describe the turn definitions, one has to build a further
        file. Within this file, for each interval and each edge the list of
        percentages to use a certain follower is to be given. An
        example:</para>

        <programlisting><sgmltag>&lt;turn-defs&gt;</sgmltag>
   <sgmltag>&lt;interval begin="0" end="3600"&gt;</sgmltag>
      <sgmltag>&lt;fromedge id="myEdge0"&gt;</sgmltag>
         <sgmltag>&lt;toedge id="myEdge1" probability="0.2"/&gt;</sgmltag>
         <sgmltag>&lt;toedge id="myEdge2" probability="0.7"/&gt;</sgmltag>
         <sgmltag>&lt;toedge id="myEdge3" probability="0.1"/&gt;</sgmltag>
      <sgmltag>&lt;/fromedge&gt;</sgmltag>

      ... any other edges ...

   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... some further intervals ...

<sgmltag>&lt;/turn-defs&gt;</sgmltag></programlisting>

        <para>The snippet defines that vehicles coming at the end of edge
        "myEdge0" within the time interval between 0s and 3600s will choose
        the edge "myEdge1" with a probability of 20%, "myEdge2" with a
        probability of 70% and "myEdge3" with a probability of 10%. The
        specification of such information is of course quite extensive and so
        the <application>JTRROUTER</application> is also able to read the
        turning ratios from a cvs file. The same information as above may be
        coded the following way:</para>

        <programlisting>begin;end;from;to;split
0;3600;myEdge0;myEdge1;0.2
0;3600;myEdge0;myEdge2;0.7
0;3600;myEdge0;myEdge3;0.1</programlisting>

        <para><caution>
            <para>Do not forget to give the order of the attributes in the
            first line of the file.</para>
          </caution></para>

        <para>Another possibility to save time on preparing the description is
        to use default values. The parameter <option>--turn-defaults</option>
        (<option>-T</option>)
        <option><replaceable>&lt;TURN_DEFAULTS&gt;</replaceable></option> can
        be used to describe the default ratios that will be used for all
        junctions for all time steps.
        <option><replaceable>&lt;TURN_DEFAULTS&gt;</replaceable></option> is a
        list of doubles, separated by a ';'. To achieve the same behaviour as
        in the example above, use <option>--turn-defaults=20;70;10</option>.
        The values will be applied to an edge's following edges beginning at
        the right edge (20%) and ending at the leftmost edge (10%). As the
        number of possible followers changes for different edges, the values
        are resampled for edges which number of following edges differs from
        the number of given turning probability defaults. Given
        <option>--turn-defaults=20;70;10</option> a vehicle using an edge that
        has two followers would use the follower to the right with 55%
        probability, the one to the left with 45%.</para>

        <para>As theoretically a route may get infinitely long when a vehicle
        is forced to take always the same direction, it is possible to limit
        the route's size using <option>max-edges-factor</option>. This factor,
        multiplied with the number of the used network's edges is the maximum
        number of edges a route may have. With the default of 2.0, a route may
        contain twice as many edges as the network has. Any route longer than
        this size will be marked as invalid. We assume that for each network
        this number has to be chosen again.</para>

        <para>The following options are accepted by
        <application>JTRROUTER</application>:</para>

        <para>!!!</para>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>The attribute "<sgmltag>probability</sgmltag>" within turn
            definitions was named "<sgmltag>perc</sgmltag>" in versions lower
            than 0.9.4 The reason for this change is that
            "<sgmltag>probability</sgmltag>" is more common throughout the
            package and the values had to be in the range between 0 and 1,
            what is no percentage information at all.</para>
          </listitem>
        </itemizedlist>

        <para>Examples:</para>

        <para>Several examples may be found in
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/jtrrouter/</filename>.
        !!!</para>
      </sect2>

      <sect2 id="user_chp05-od2trips">
        <title>Using OD2TRIPS</title>

        <para>By now, <application>OD2TRIPS</application> handles only
        matrices in some of the formats provided by ptv software. Still, you
        may convert your own OD-matrices into flow definitions and then give
        them to <application>DUAROUTER</application> (see Chapter "<ulink
        url="#user_chp05-explicite-flows">Using Flow
        Definitions</ulink>").</para>

        <figure>
          <title>Building trips from the OD-matrix</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/simsteps-od2trips.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>
    </sect1>

    <sect1 id="user_chp05-import_routes">
      <title>Importing Routes from other Simulations</title>

      <sect2 id="user_chp05-import_routes-artemis">
        <title>Importing Artemis-routes</title>

        <para>Although originally ARTEMIS-routes are stored within an
        OD-matrix, the import within SUMO is done using the
        <application>DUAROUTER</application> program.</para>

        <para>This is basically done this way:</para>

        <screen>duarouter --artemis=<replaceable>&lt;ARTEMIS_FOLDER&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

        <para>Remind that you have to specify the begin and the end of the
        simulation. This is quite inconsequent, as our mechanisms would allow
        import of repeatable routes, too. This is just not yet
        implemented.</para>

        <para>Known problems:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Only the a0-Flow is being imported</para>
          </listitem>

          <listitem>
            <para>Only one time-period is imported</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp05-import_routes-fastlane">
        <title>Importing FastLane-routes</title>

        <para>One of the main concepts of FastLane is the Dynamic User
        Assignment by Christian Gawron. As this mechanism is based on single
        vehicle routes, those are given for a FastLane simulation. The router
        module has only to convert routes from the FastLane- into the
        SUMO-representation. Do this using the following command:</para>

        <screen>duarouter --cell=<replaceable>&lt;CELL_FILE_NAME(NO_EXTENSION)&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> \
   --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

        <para>If you are familiar with FastLane, you may have noticed that you
        have only to supply one file name while FastLane uses two files to
        describe the routes: one "*.driver" and one "*.rinfo" file. As both
        files have the same name and only the extension differs, you have to
        give the name without the extension. So if your files have the names
        "<filename>foo.drive</filename>r" and
        "<filename>foo.rinfo</filename>", write
        <option>--cell=foo</option>.</para>

        <para>FastLanes stores routes within a very large file what makes the
        process quite slow. If you want to speed it up for the future, you can
        tell SUMO-ROUTER to save some temporary files using
        <option>--save-cell-rindex</option>. A further file named
        "<replaceable>&lt;CELL_FILE_NAME&gt;</replaceable>.rindex" will be
        generated. It speeds up the processing by a factor of ten or
        so.</para>

        <para>As FastLane is portable, you may encounter files generated on a
        Windows-machine. Those files give some strange warnings, something
        that should not happen if you supply the right net. To avoid them, use
        the <option>--intel-cell</option> switch to tell
        <application>DUAROUTER</application> it has to turn the byte
        order.</para>

        <para>You can also decide whether the best, not the last route a
        driver took shall be used: set the switch
        <option>--no-last-cell</option> for this.</para>
      </sect2>

      <sect2 id="user_chp05-import_routes-ptv">
        <title>Importing VISSIM und VISUM-routes</title>

        <para>While VISSIM holds the possibility to describe vehicle-based
        routes, too, our package contain only the second of VISSIM's route
        specification abilities, it shares with VISUM. This representation of
        vehicle movements is stored as origin-destination matrices which have
        to be translated into single vehicle movements first. This is done
        using the <application>OD2TRIPS</application> module. One has to pass
        the SUMO-network to use using the <option>--net-file</option>
        (<option>-n</option>) - option and the name of the output file using
        <option>--output-file</option> (<option>-o</option>). The generated
        output contains the single vehicle trips build from the OD-matrix.
        Also, one has to supply the file the origin/destination-matrix is
        described in. This is either a file with an ".fma" extension (other
        table types supported by VISSIM/VISUM are not supported) which holds a
        single OD-matrix or the VISSIM-simulation file itself (*.inp) which
        holds the names of the OD-files to use. The option that lets
        <application>OD2TRIPS</application> know about the file is
        <option>--od-file</option>. In the second case, the path to the
        matrices has to be supplied using the <option>--od-path</option> -
        option, too.</para>

        <para>Additionally, the first and the last time step to process may be
        given. If not given, the values stored within the parsed descriptions
        will be used. A further scaling factor may be used, too, which will be
        applied on the read streams. An example for parsing an OD-description
        that uses multiple matrices may be:</para>

        <screen>od2trips --od-file=<replaceable>VISSIM/test.inp</replaceable> --od-path=<replaceable>VISSIM/</replaceable> --n=<replaceable>MySUMONet.net.xml</replaceable> \
   --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable></screen>

        <para>After obtaining single vehicle trips using this approach they
        should be parsed into full route descriptions using router as
        described within the chapter "Generation of own, explicit
        routes".</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp05-dua">
      <title>Dynamic User Assignment and Alternative Routes</title>

      <para>Dynamic Assignment is used to find out which routes the simulated
      driver really would take. One could assume that everyone is traing to
      use the fastest route. But what is the fastest route? Look at the
      network shown in the next picture. It is abvious, that the fastest route
      is the one in the middle of the network, even when considering the tls
      at the end of this road. But as soon as we insert many vehicles into the
      network, all trying to use this route, the edge located at the center
      soon gets full and vehicles need much more time than estimated to pass
      it. In fact, they need longer to pass this edge than if they would try
      to use one of the outer connections.</para>

      <figure>
        <title>Example DUA-network (from
        "&lt;SUMO_DIST&gt;/data/examples/dua/dua3s*")</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="./gfx/user/dua_step1.gif"
                       format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Within Christian Gawron's approach (see <ulink
      url="http://sumo.sourceforge.net/docs/bibliography.shtml#Gawron1998_1">[Gawron1998_1]</ulink>),
      which we use, each driver has a list of routes. At the beginning, we
      build a single route for each driver being the shortest route within an
      empty network - not knowing how many vehicles will use this route. You
      may wonder that two files are built. The file you have named as output
      file and a further file having the additional extension ".alt". Within
      this second file route alternatives - the set of all routes the driver
      knows - are stored.</para>

      <para>After having generated the routes, we let the simulation run
      forcing it to generate edge- or lane-based dumps (see chapter 6, "<ulink
      url="#user_chp06-output-edgelanestates">Aggregated Edge/Lane
      States</ulink>"). In fact, edge-based dumps are the better choice,
      because the route is not able to use lane-based dumps at all. Now, we
      have the information about the state of the network, meaning the real
      speeds that were driven within it, when all vehicles are using the same
      route. Now we can pass this information to a second call to
      <application>DUAROUTER</application> and now - instead of the previous
      input file - we give the route alternatives file as input using the
      option <option>--alternatives</option> (or <option>-a</option> for
      short). Now, <application>DUAROUTER</application> is capable to compute
      the new shortest routes, based on the real speeds within our simulation.
      In order to avoid that again all vehicles will use the currently
      shortest route only some of the drivers will get the new shortest route.
      Again, two files are generated, a route file which contains the current
      routes and a new route alternatives file. The entries within the new
      alternatives file stay the same for all those drivers who keep their old
      route. Those who got a new route assigned, will get this route stored
      additionally to their previous route within the file. Whether a route is
      replaced by a new, better route is depending on how much better the new
      route is and how fast a driver shall forget his old one. There are two
      parameters determining this: <option>--gBeta</option> and
      <option>--gA</option>. Please see (see <ulink
      url="http://sumo.sourceforge.net/docs/bibliography.shtml#Gawron1998_1">[Gawron1998_1]</ulink>)
      for further information.</para>

      <figure>
        <title>Sketch showing the effects of Christian Gawron dua-approach on
        route distribution within the network; blue color indicates that an
        edge is used within the step, red shows jams</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="./gfx/user/dua_steps.gif"
                       format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Still, as the picture above shows, there may be other faster
      routes when again running the simulation, so in order to get a balanced
      assignment, you have to iterate this process several time.</para>

      <para>Here, you may again find the procedure to generate a dynamic user
      assignment:</para>

      <procedure>
        <step>
          <para>Generate the network (see <ulink url="#user_chp04">chapter
          4</ulink>)</para>
        </step>

        <step>
          <para>Import your routes (see chapter 5, "<ulink
          url="#user_chp05-own_routes">Building own Routes from
          Scratch</ulink>" or "<ulink
          url="#user_chp05-import_routes">Importing Routes from other
          Simulations</ulink>"), generating a routes file and an alternatives
          file</para>
        </step>

        <step>
          <para>Simulate using the network and the routes (see <ulink
          url="#user_chp06">chapter 6</ulink>) forcing
          <application>SUMO</application> to write edge-based dumps (see
          chapter 6, "<ulink
          url="#user_chp06-output-edgelanestates">Aggregated Edge/Lane
          States</ulink>")</para>
        </step>

        <step>
          <para>Compute new routes and alternatives using the previously
          generated alternatives and the edge-based dumps generated within the
          last step</para>
        </step>

        <step>
          <para>Continue with step 3 until the DUA is completed</para>
        </step>
      </procedure>

      <para>How do we know when the dua is completed? In fact. we don't know
      any possibility to determine this, yet. Within very large networks we
      are running mostly about 20 iterations, but this is just a hint. One may
      say, that the dua is finished if there is no further change in the
      aggregated vehicles trip duration. DUA is definitely still a research
      topic and if you are interested in more details than note the next
      note...</para>

      <note>
        <para>There is some further reading on DUA within our More On... -
        section. See TBD.</para>
      </note>

      <para>Specific options:</para>

      <variablelist>
        <varlistentry>
          <term><option><option>( --alternatives | -a )
          <replaceable>&lt;ALTERNATIVES_FILE&gt;</replaceable></option></option></term>

          <listitem>
            <para>Forces DUAROUTER to use the previously generated
            <replaceable>&lt;ALTERNATIVES_FILE&gt;</replaceable> as input.
            <remark>Optional, type:filename, default: none</remark></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option><option>--gBeta
          <replaceable>&lt;FLOAT&gt;</replaceable></option></option></term>

          <listitem>
            <para>Defines Christian Gawron's beta. <remark>Optional
            (pregiven), type:float, default: 0.3</remark></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option><option>--gA
          <replaceable>&lt;FLOAT&gt;</replaceable></option></option></term>

          <listitem>
            <para>Defines Christian Gawron's alpha. <remark>Optional
            (pregiven), type:float, defaults: 0.05</remark></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Examples:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due2s_singlestep/</filename>
          contains configuration files for the first three steps of a dynamic
          user assignment in a network with two possible ways.</para>
        </listitem>

        <listitem>
          <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due2s_automatic/</filename>
          uses the same input as
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due2s_singlestep/</filename>,
          but the iterations are done using a script.</para>
        </listitem>

        <listitem>
          <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due3s_singlestep/</filename>
          contains configuration files for the first three steps of a dynamic
          user assignment in a network with three possible ways.</para>
        </listitem>

        <listitem>
          <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due3s_automatic/</filename>
          uses the same input as
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due3s_singlestep/</filename>,
          but the iterations are done using a script.</para>
        </listitem>
      </itemizedlist>

      <sect2 id="user_chp05-dua-iterate">
        <title>Automatic Iteration using 'dua-iterate.pl'</title>

        <para>"dua-iterate.pl" helps you to perform the computation of a
        dynamic user assignment. The script needs at least two parameter: the
        path to the folder where you have located your SUMO-binaries in and
        the number of iteration steps to perform. When started with these to
        options, the script computes the given number of dua-steps. As input
        two files have to be located in the same folder as the script: a
        SUMO-network named "net.net.xml" and a set of trip definitions named
        "trips.trips.xml". if you want to start with another routes
        definition, you have to change this within the script's source
        code.</para>

        <para>Within each iteration step, the script generates a configuration
        file for the <application>DUAROUTER</application> and starts
        <application>DUAROUTER</application> with this configuration file.
        Then, a configuration file for <application>SUMO</application> is
        built and <application>SUMO</application> ist started. Both
        configuration files are competely defined within the script itself. As
        default, for each time step, <application>SUMO</application> will
        generate three dump files with edge-dumps aggregated over 150, 300,
        and 900s, an emissions and a trip information output. The names of
        these outputs are numbered over the iteration steps. If you want to
        change the outputs, you also have to take a look into the script, but
        you should not disable the edge-based dump for aggregation over 900s,
        because this is read by the <application>DUAROUTER</application> in
        the next iteration steps in order to compute the DUA.</para>

        <para>When started with a third parameter, the second parameter given
        will be interpreted as the start iteration step and the third as the
        end iteration step.</para>

        <para>This useful script is located in
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/dua_tools/</filename>.</para>

        <para>Synopsis:</para>

        <screen>./dua-iterate.pl <replaceable>&lt;PATH_TO_SUMO_BINARIES&gt;</replaceable> <optional>[<replaceable>&lt;BEGIN_ITERATION_STEP&gt;</replaceable>]</optional> <replaceable>&lt;END_ITERATION_STEP&gt;</replaceable></screen>
      </sect2>
    </sect1>

    <sect1>
      <title>Additional Weights</title>

      <para>From version 0.8.0.1 on, SUMO is capable to load additional
      weights for edges. The idea behind this is to virtually increase the
      costs for an edge in order to make it less attractive to pass.
      Additional weights are used by the DUA-Router only and are supplied
      using the <option>--supplementary-weights
      <replaceable>&lt;FILE&gt;</replaceable></option> (or <option>--add
      <replaceable>&lt;FILE&gt;</replaceable></option> or <option>-S
      <replaceable>&lt;FILE&gt;</replaceable></option>) - option. A file
      containing additional weights looks like this:</para>

      <programlisting><sgmltag>&lt;supplementary-weights&gt;</sgmltag>
   <sgmltag>&lt;interval begin="60" end="119"&gt;</sgmltag>
      <sgmltag>&lt;weight edge-id="1fi" absolut="42" mult="2.5" add="-21"/&gt;</sgmltag>
      <sgmltag>&lt;weight edge-id="2o" mult="13"/&gt;</sgmltag>

      ... further weights ...

   <sgmltag>&lt;/interval&gt;</sgmltag>
   <sgmltag>&lt;interval begin="120" end="179"&gt;</sgmltag>
      <sgmltag>&lt;weight edge-id="1fi" absolut="48" mult="2.5"/&gt;</sgmltag>
      <sgmltag>&lt;weight edge-id="2o" add="7"/&gt;</sgmltag>

      ... further weights ...

  <sgmltag> &lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/supplementary-weights&gt;</sgmltag></programlisting>

      <caution>
        <para>The option name may be changed in the near future...</para>
      </caution>

      <caution>
        <para>The attribute "absolut" is misspelled and will be changed in the
        near future.</para>
      </caution>

      <para>When additional weights are supplied, the DUA-Router first looks
      whether an additional, absolute value has been provide for the currently
      watched edge (value of the "<sgmltag>absolut</sgmltag>"-attribute for
      the current edge and time). If so, this value will be used. If not,
      either the edge's loaded weight (if available for the current time step)
      or the default value (length/vallowed) will be changed first by applying
      the loaded factor (value of the "<sgmltag>mult</sgmltag>"-attribute for
      the current edge and time) and than by the loaded addend (value of the
      "<sgmltag>add</sgmltag>"-attribute for the current edge and
      time).</para>
    </sect1>

    <sect1 id="user_chp05-closing">
      <title>Closing Thoughts (so far)</title>

      <para>If you are want to simulate small scenarios only, with a few
      vehicles, you probably should try to work with routes where each vehicle
      is duplicated. This needs only a small amount of editing and lets you
      fill the simulation fast. This has been done for most of the examples
      within the example data. Trying to generate own OD-matrices is not to be
      adviced, because handling of such is not really well supported by the
      package. In fact, the OD2TRIPS tool definitely needs a complete
      redesign. Until this has happened, you should try to get your
      OD-matrices converted into flow-definitions if you really have to
      operate with OD-matrices. Using flows generated by hand may be a
      possibility, but for small scenarios, flows seem more clumsy than
      routes.</para>

      <para>In some cases, flows at each junction are counted and how many
      vehicles are driving in which direction. This is exactly what
      <application>JTRROUTER</application> resembles.</para>
    </sect1>

    <sect1 id="user_chp05-changes">
      <title>Recent Changes</title>

      <para>The following list contains recent changes in the naming or
      meaning of options. It has been started during the work on version
      0.9.2, so earlier changes are not contained, herein. The changes list
      contains the version where the change occured or will occure. The
      changes should be valid for the next stable release.</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Changes in version 0.9.3</para>

          <itemizedlist>
            <listitem>
              <para>There was a bug on using flow in prior versions; the end
              time step was also used making the behaviour not as good
              predictable. This has been now changed so that the vehicles are
              emitted in steps starting at
              <sgmltag><replaceable>&lt;begin&gt;</replaceable></sgmltag> and
              ending at
              <sgmltag><replaceable>&lt;end&gt;</replaceable></sgmltag>-1.</para>

              <para><emphasis>Reason:</emphasis> The prior behaviour was not
              correct</para>
            </listitem>

            <listitem>
              <para>Types given in trips were always replaced by
              "KRAUSS_DEFAULT". This has been patched. Now the type you
              specify will be used and only if no type information was given,
              "KRAUSS_DEFAULT" will be used.</para>

              <para><emphasis>Reason:</emphasis> Definitions should be
              kept...</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="user_chp05-missing">
      <title>Missing</title>

      <para>--lane-weights is not tested and described</para>

      <para>--scheme is not tested, implemented and described</para>

      <para>--max-alternatives is not tested and described</para>

      <para>--prune-random is not tested and described</para>

      <para></para>
    </sect1>
  </chapter>

  <chapter id="user_chp06">
    <title>Performing the Simulation</title>

    <para>Having the network description and the routes you have everything to
    perform a simulation. The fastest way to get results - their different
    types will be described within the following sub-chapters - is to use the
    SUMO - command line simulation. This command line tool does not generate
    any graphical output as the SUMO-GUI does, but is much faster in
    execution.</para>

    <para>To start a simulation, you have to supply the following
    information:</para>

    <itemizedlist spacing="normal">
      <listitem>
        <para>The file that contains the network</para>

        <para>Use the <option>--net-file</option> (or <option>--net</option>
        or <option>-n</option>)
        <option><replaceable>&lt;FILE&gt;</replaceable></option> option to
        pass the simulation the name of the network to use. The network must
        be one build using <application>NETCONVERT</application> or
        <application>NETGEN</application>.</para>
      </listitem>

      <listitem>
        <para>The routes to use</para>

        <para>Use the <option>--route-files</option> (or
        <option>--routes</option> or <option>-r</option>)
        <option><replaceable>&lt;FILE&gt;</replaceable>[;<replaceable>&lt;FILE&gt;</replaceable>]*</option>
        option to specify which files shall be used to read routes from. In
        this case, the name is not ambigous - multiple files can be
        used.</para>
      </listitem>

      <listitem>
        <para>The simulation time the simulation begins at</para>

        <para>This is the first time step the simulation has to perform. Be
        aware, that this time should fit to the time your routes start. Pass
        it to <application>SUMO</application> using <option>--begin</option>
        (or <option>-b</option>)
        <option><replaceable>&lt;INT&gt;</replaceable></option> where
        <option><replaceable>&lt;INT&gt;</replaceable></option> is the time
        step in seconds.</para>
      </listitem>

      <listitem>
        <para>The simulation time the simulation ends at</para>

        <para>This is the last step of the simulation. When this time step is
        reached, the simulation will end. Pass it to
        <application>SUMO</application> using <option>--end</option> (or
        <option>-e</option>)
        <option><replaceable>&lt;INT&gt;</replaceable></option> where
        <option><replaceable>&lt;INT&gt;</replaceable></option> is the time
        step in seconds.</para>
      </listitem>
    </itemizedlist>

    <para>All these values must be given in order to perform a simulation.
    Still, no output is generated. Generating output is described in the next
    chapter. Besides this, there are also some other additional structures
    which may be applied to the simulation scenario and of course there are
    some more questions to answer about inserting vehicles into the
    net.</para>

    <sect1 id="user_chp06-output">
      <title>Output Generation</title>

      <para>Due to its scientific purpose, SUMO tasks lie beyond simple
      visualisation of traffic. The results of a simulation must be available
      and one must be able to process them and furthermore possibilities to
      influence the simulation are necessary to make it more variable in use.
      Detectors, artifacts used to gain more or less processed results from
      the simulation and some further structures used are described in the
      next subchapters.</para>

      <para>To supply the definitions of these structures to the simulation,
      we use an additional file normally and pass it to "SUMO" using the
      <option>--additional-files</option> (<option>-a</option>) - option. The
      file may contain all the definitions about additional structures such as
      detectors, emitters etc. in random order.</para>

      <sect2 id="user_chp06-output-detectors">
        <title>Detectors</title>

        <para>The results are obtained from the simulation using simulated
        detectors. You will find detectors one knows from the real world such
        as induct loops, but also some virtual ones that allow gaining values
        one can work with more easily.</para>

        <para>Basically, the main distinction between detectors SUMO offers is
        their dimension. The next list shows all available detector types,
        some of which are still under development. The type names "E*" have
        their origin in the German word "Erfassungsbereich" meaning "detection
        area".</para>

        <itemizedlist>
          <listitem>
            <para>E1: Induct loops</para>

            <para>Induct loops have a position only and no dimensions. They
            are meant to be a slice plane through a single lane and measure
            only the vehicles passing them.</para>
          </listitem>

          <listitem>
            <para>E2: Areal, lane-based detectors</para>

            <para>These detectors describe a part of a lane or alternatively a
            part of the network made up of consecutive lanes (a begin lane and
            his predecessors). The measured values are derived from the
            movements over the whole part of the network the detector is lying
            at.</para>
          </listitem>

          <listitem>
            <para>E23: Route-dependent Origin/Destination detectors</para>

            <para>... not yet implemented ...</para>
          </listitem>

          <listitem>
            <para>E3: Multi-Origin/Multi-Destination detectors</para>

            <para>E3-detectors measure vehicles passing a set of entry and an
            according set of exit points. Each of these points is a position
            on a lane. Measured are values that may be derived from the
            movements of vehicles between any of the entry and any of the exit
            points.</para>
          </listitem>

          <listitem>
            <para>E41: Destination based detectors</para>

            <para>... not yet implemented ...</para>
          </listitem>

          <listitem>
            <para>E42: Edgebased detectors</para>

            <para>... not yet implemented ...</para>
          </listitem>
        </itemizedlist>

        <para>We will not replicate the exact computation of the detector's
        values. A document describing this should be found on our pages within
        the <ulink
        url="http://sumo.sourceforge.net/documentation.html">documentation</ulink>
        part. The next subchapters hold the information about how to set
        detectors onto a network only.</para>

        <para>To ease the usage and for backward compatibility, all detectors
        may be defined in two ways. The first one is by using the following
        notation: <sgmltag>&lt;detector
        id="<replaceable>&lt;ID&gt;</replaceable>"
        type="<replaceable>&lt;TYPE&gt;</replaceable>" ...further
        attributes.../&gt;</sgmltag>. Herein, the detector type is determined
        by the type-attribute which is "induct_loop" as default. The second
        possibility is: : <sgmltag>&lt;<replaceable>XX</replaceable>-detector
        id="<replaceable>&lt;ID&gt;</replaceable>" ...further
        attributes.../&gt;</sgmltag> where the tag name already defines the
        detector to build. Possible values for <sgmltag><replaceable>XX
        </replaceable></sgmltag>within the tag name and attributes needed to
        describe each detector are described in the following
        subchapters.</para>

        <sect3 id="user_chp06-output-detectors-e1">
          <title>E1-Detectors (Induct Loops)</title>

          <para>An induct loop is described either this way:</para>

          <programlisting><sgmltag>&lt;detector id="<replaceable>&lt;ID&gt;</replaceable>" type="(induct_loop|E1)" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"
   freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>" [style="xml"] file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" [friendly_pos="x"]/&gt;</sgmltag></programlisting>

          <para>or this way:</para>

          <programlisting><sgmltag>&lt;e1-detector id="<replaceable>&lt;ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>" freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>"
   [style="xml"] file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" [friendly_pos="x"]/&gt;</sgmltag></programlisting>

          <para>The id is any string that let's you know which detector is
          meant. The type indicates that a induct loop shall be build, here.
          The attributes "<sgmltag>lane</sgmltag>" and
          "<sgmltag>pos</sgmltag>" describe on which lane and at which
          position on him the detector shall lay. As induct loop detectors may
          aggregate the values they collect, the freq-attribute describes this
          period. The style-parameter is obsolete by now as the earlier
          possibility to use either "xml" or "cvs"-output is now not
          supported, the values are stored in xml-files only. The file
          attribute tells the simulation to which file the detector shall
          write his results into. The file will be generated, does not have to
          exist earlier and will be overwritten if existing without any
          warning.</para>

          <para><caution>
              <para>The folder the output file shall be generated in must
              exist.</para>
            </caution></para>

          <para>Let's review the attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              detector</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: Always "induct_loop" or "E1" for
              this type of detectors ("induct_loop" is the default
              value)</para>
            </listitem>

            <listitem>
              <para><sgmltag>lane</sgmltag>: The id of the lane the detector
              shall be laid on. The lane must be a part of the network
              used.</para>
            </listitem>

            <listitem>
              <para><sgmltag>pos</sgmltag>: The position on the lane the
              detector shall be laid on in meters. The position must be a
              value between -1*lane's length and the lane's length. In the
              case of a negative value, the position will be computed backward
              from the lane's end (the position the vehicles drive
              towards).</para>
            </listitem>

            <listitem>
              <para><sgmltag>freq</sgmltag>: The aggregation period the values
              the detector collects shall be summed up.</para>
            </listitem>

            <listitem>
              <para><sgmltag>style</sgmltag>: Obsolete/deprecated; Always
              "xml" by now</para>
            </listitem>

            <listitem>
              <para><sgmltag>file</sgmltag>: The path to the output file. The
              path may be relative.</para>
            </listitem>

            <listitem>
              <para><sgmltag>friendly_pos</sgmltag>: If set, no error will be
              reported if the detector is placed behind the lane. Instead, the
              detector will be place 0.1 meters from the lane's end.</para>
            </listitem>
          </itemizedlist>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>The attribute <sgmltag>friendly_pos</sgmltag> is available
              since version 0.9.4</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-detectors-e2">
          <title>E2-Detectors (Areal, lane-based Detectors)</title>

          <para>An induct loop is described the following way:</para>

          <programlisting><sgmltag>&lt;detector id="<replaceable>&lt;ID&gt;</replaceable>" type="(areal|lane_based|E2)" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"
   length="<replaceable>&lt;DETECTOR_LENGTH&gt;</replaceable>" freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>" [style="xml"] file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>"
   [measures="<replaceable>&lt;MEASURES&gt;</replaceable>"] [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [jam_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [keep_for="<replaceable>&lt;FLOAT&gt;</replaceable>"]/&gt;</sgmltag></programlisting>

          <para>or:</para>

          <programlisting><sgmltag>&lt;e2-detector id="<replaceable>&lt;ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>" length="<replaceable>&lt;DETECTOR_LENGTH&gt;</replaceable>"
   freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>" [style="xml"] file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" [measures="<replaceable>&lt;MEASURES&gt;</replaceable>"]
   [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [jam_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [keep_for="<replaceable>&lt;FLOAT&gt;</replaceable>"]/&gt;</sgmltag></programlisting>

          <para>Most of the attributes have the same meaning as for induct
          loops. As an areal detector has a certain length, this length must
          be supplied as a further parameter. It may also be a negative number
          which lets the detector be extended upstream to the given beginning
          position. The type must be set to either "<sgmltag>areal</sgmltag>",
          "<sgmltag>lane_based</sgmltag>" or "<sgmltag>E2</sgmltag>" to let
          the simulation know what's desired to build. The optional parameter
          "cont" let's the detector continue over the current lane onto this
          lane's predecessors when the detector's length plus his position is
          larger than the place available on the lane. The attribute
          "<sgmltag>measures</sgmltag>" describes which values the detector
          shall compute. The optional values are described below.</para>

          <para><caution>
              <para>The folder the output file shall be generated in must
              exist.</para>
            </caution></para>

          <para><caution>
              <para>For detectors that span over more than a single edge, only
              the attribute QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_VEHICLES
              is defined all other may return strange values.</para>
            </caution></para>

          <para>But there is also a further possibility to use E2-detectors.
          If you place them in front of a traffic light, you can use the
          traffic light to describe the intervals (aggregation) time instead
          of giving a fixed aggregation time. In this case, output will be
          generated every time the traffic light switches. To use this
          feature, simply replace the freq-attribute within the description of
          your detector by the id of the traffic light that should steer it
          (use the attribute "<sgmltag>tl</sgmltag>" to specify the id)
          :</para>

          <programlisting><sgmltag>&lt;detector id="<replaceable>&lt;ID&gt;</replaceable>" type="[(areal|lane_based|E2)" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"
   length="<replaceable>&lt;DETECTOR_LENGTH&gt;</replaceable>" tl="<replaceable>&lt;TL-ID&gt;</replaceable>" freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>" [style="xml"]
   file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" [measures="<replaceable>&lt;MEASURES&gt;</replaceable>"] [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [jam_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [keep_for="<replaceable>&lt;FLOAT&gt;</replaceable>"]/&gt;</sgmltag></programlisting>

          <para>or:</para>

          <programlisting><sgmltag>&lt;e2-detector id="<replaceable>&lt;ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>" length="<replaceable>&lt;DETECTOR_LENGTH&gt;</replaceable>"
   tl="<replaceable>&lt;TL-ID&gt;</replaceable>" freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>" [style="xml"] file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>"
   [measures="<replaceable>&lt;MEASURES&gt;</replaceable>"] [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [jam_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [keep_for="<replaceable>&lt;FLOAT&gt;</replaceable>"]/&gt;</sgmltag></programlisting>

          <para>A further feature allows you to output values not for all
          switches of the traffic light the detector is attached to, but only
          when the light turns red for the assigned link (connection between
          the incoming and the outgoing lane). This should allow you to
          measure the maximum jam length in front of a red traffic light for
          this link. To switch on this feature, you have to add the name of
          the following lane:<sgmltag>
          to="<replaceable>&lt;LANE_ID&gt;</replaceable>"</sgmltag>. The
          incoming lane is already described by the
          "<sgmltag>lane</sgmltag>"-attribute.</para>

          <para>E2-detectors may compute many different measures and the user
          has the possibility to describe which measures he actually wants to
          be generated. The "measures"-attribute must contain the measures
          divided by a ' ' (blank) in the case he does not want to compute all
          parameters. Computing all parameters is the default case but may
          also be set using '<sgmltag>measures="ALL"</sgmltag>' . The
          available measures are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>DENSITY: The density on the detector in vehicles/hour
              averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>MAX_JAM_LENGTH_IN_VEHICLES: Every timestep, the maximum
              number of consecutivly jamming vehicles is detected. These
              values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>MAX_JAM_LENGTH_IN_METERS: Every timestep, the maximum
              length demand of consecutivly jamming vehicles in meters is
              detected. These values are averaged over the requested
              interval.</para>
            </listitem>

            <listitem>
              <para>JAM_LENGTH_SUM_IN_VEHICLES: Every timestep, the sum of the
              lengths of all jams on the detector is measured (in vehicles).
              These values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>JAM_LENGTH_SUM_IN_METERS: Every timestep, the sum of the
              lengths of all jams on the detector is measured (in meters).
              These values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_VEHICLES: This
              detector uses a MAX_JAM_LENGTH_IN_VEHICLES one as a helper.
              Every timestep, the "maximum-jam-length" (in vehicles) from
              MAX_JAM_LENGTH_IN_VEHICLES will be compared to the maximum of
              "maximum-jam-lengths" that occured since the last reset. If the
              new value is larger, the maximum of "maximum-jam-lengths" is
              updated. Between two resets, this detector records a monoton
              growing set of "maximum-jam-lengths". These values are averaged
              over the requested interval. The reset is performed by a traffic
              light.</para>
            </listitem>

            <listitem>
              <para>QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_METERS: As
              QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_VEHICLES, but in meters,
              not in vehicles.</para>
            </listitem>

            <listitem>
              <para>N_VEHICLES: Every timestep, the number of vehicles that
              populate the detector is recorded. These values are averaged
              over the requested interval.</para>
            </listitem>

            <listitem>
              <para>OCCUPANCY_DEGREE: Every timestep the length of the
              vehicles populating the detector is summed up. We divide this
              length by the detectorlength to get a value out of [0,1]. These
              values are averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>SPACE_MEAN_SPEED: Every timestep, the mean-speed of the
              vehicles on the detector is calculated. These values are
              averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>CURRENT_HALTING_DURATION_SUM_PER_VEHICLE: Every timestep,
              the halting-time of the vehicles on the detector is summed up
              and then averaged over the number of vehicles. These values are
              averaged over the requested interval.</para>
            </listitem>

            <listitem>
              <para>N_STARTED_HALTS: A vehicle on the detector that just
              started halting, will report the time when this event took place
              to the detector. All events during the requested interval are
              summed up.</para>
            </listitem>

            <listitem>
              <para>HALTING_DURATION_SUM: A vehicle that starts moving after a
              halt will report it's halting-duration (in seconds) and the time
              when this event took place to the detector. The
              halting-durations of all events during the requested interval
              are summed up.</para>
            </listitem>

            <listitem>
              <para>HALTING_DURATION_MEAN: Every vehicle sums up it's
              halting-durations (in seconds) during it's stay on the detector.
              When a vehicle leaves the detector, it's halting-duration-sum is
              stored by the detector. These values are averaged over the
              requested interval.Only vehicles that moved through the entire
              detector contribute.</para>
            </listitem>

            <listitem>
              <para>APPROACHING_VEHICLES_STATES: This detector is a special
              kind of E2 detector. It doesn't return a single value but a
              container of vehicle states. Here, a vehicle state is a tuple
              consisting of the distance from the vehicle front to the
              detector end and the vehicle's speed. There is no averaging or
              summing up but current output is provided. This detector is
              intended for internal use, e.g. as input to
              traffic-light-controls.</para>
            </listitem>
          </itemizedlist>

          <para>Again, the explicit list of available attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              detector</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: Always "lane_based" or "E2" for
              this type of detectors ("induct_loop" is the default
              value)</para>
            </listitem>

            <listitem>
              <para><sgmltag>lane</sgmltag>: The id of the lane the detector
              shall be laid on. The lane must be a part of the network
              used.</para>
            </listitem>

            <listitem>
              <para><sgmltag>pos</sgmltag>: The position on the lane the
              detector shall be laid on in meters. See information about the
              same attribute within the detector loop description for further
              information.</para>
            </listitem>

            <listitem>
              <para><sgmltag>length</sgmltag>: The length of the detector in
              meters. If the detector grows over the lane's end (begin in
              fact), it is either cut off at the lane's length if the
              "<sgmltag>cont</sgmltag>"-attribute is false or not given or is
              continued on the predeceding lanes in the case the
              "<sgmltag>cont</sgmltag>"-attribute is set to true.</para>
            </listitem>

            <listitem>
              <para><sgmltag>freq</sgmltag>: The aggregation period the values
              the detector collects shall be summed up.</para>
            </listitem>

            <listitem>
              <para><sgmltag>file</sgmltag>: The path to the output file. The
              path may be relative.</para>
            </listitem>

            <listitem>
              <para><sgmltag>measures</sgmltag>: Should contain the list of
              measures to compute (see above) or "ALL" to compute all
              measures.</para>
            </listitem>
          </itemizedlist>

          <para>And the optional ones:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>style</sgmltag>: Obsolete/deprecated; Always xml
              by now</para>
            </listitem>

            <listitem>
              <para>cont: Holds the information whether detectors longer than
              a lane shall be cut off or continued (set it to true for the
              second case) default: false (detector lies on one lane
              only).</para>
            </listitem>

            <listitem>
              <para><sgmltag>time_treshold</sgmltag>: The time-based threshold
              that describes how much time has to pass until a vehicle is
              recognized as halting (in s, default: 1s).</para>
            </listitem>

            <listitem>
              <para><sgmltag>speed_treshold</sgmltag>: The speed-based
              threshold that describes how slow a vehicle has to be to be
              recognized as halting (in m/s, default: 5/3.6m/s).</para>
            </listitem>

            <listitem>
              <para><sgmltag>jam_treshold</sgmltag>: The minimum distance to
              the next standing vehicle in order to make this vehicle count as
              a participant to the jam (in m, default: 10m).</para>
            </listitem>

            <listitem>
              <para><sgmltag>keep_for</sgmltag>: Information for how long the
              memory of the detector has to be (in s, default: 1800s).</para>
            </listitem>

            <listitem>
              <para><sgmltag>measures</sgmltag>: Should contain the list of
              measures to compute (see above) or "ALL" to compute all measures
              (default: ALL).</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-detectors-e23">
          <title>E23-Detectors (Route-dependent Origin/Destination
          Detectors)</title>

          <para>... to be implemented ...</para>
        </sect3>

        <sect3 id="user_chp06-output-detectors-e3">
          <title>E3-Detectors (Multi-Origin/Multi-Destination
          Detectors)</title>

          <para>The descriptions of E3-detectors have to include the set of
          entry- and the set of exit-cross-sections. Due to this, it is not
          possible to use a single tag to specify a detector. Instead, the
          description consists of the following parts:</para>

          <orderedlist>
            <listitem>
              <para>A beginning tag that describes some global attributes of
              the detector just as the descriptions of e1- and e2-detectors
              do. The format is either:</para>

              <programlisting><sgmltag>&lt;detector id="<replaceable>&lt;ID&gt;</replaceable>" type="(multi_od|E3)" file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>"
   freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>" [measures="<replaceable>&lt;MEASURES&gt;</replaceable>"] [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [keep_for="<replaceable>&lt;FLOAT&gt;</replaceable>"]&gt;</sgmltag></programlisting>

              <para>or:</para>

              <programlisting><sgmltag>&lt;e3-detector id="<replaceable>&lt;ID&gt;</replaceable>" file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>"
   [measures="<replaceable>&lt;MEASURES&gt;</replaceable>"] [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [keep_for="<replaceable>&lt;FLOAT&gt;</replaceable>"]&gt;</sgmltag></programlisting>

              <para>As one can see, no information about the detector's
              position is stored herein. They are stored in embedded tags
              instead (2. and 3.)</para>
            </listitem>

            <listitem>
              <para>A set of tags that describe the detector's entry points in
              the form:</para>

              <para><sgmltag>&lt;det_entry
              lane="<replaceable>&lt;LANE_ID&gt;</replaceable>"
              pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"/&gt;</sgmltag></para>
            </listitem>

            <listitem>
              <para>A set of tags that describe the detector's exit points in
              the form:</para>

              <para><sgmltag>&lt;det_exit
              lane="<replaceable>&lt;LANE_ID&gt;</replaceable>"
              pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"/&gt;</sgmltag></para>
            </listitem>

            <listitem>
              <para>A closing tag that must match the opening tag (1.):</para>

              <para>a) <sgmltag>&lt;/detector&gt;</sgmltag></para>

              <para>or</para>

              <para>b) <sgmltag>&lt;/e3-detector&gt;</sgmltag></para>
            </listitem>
          </orderedlist>

          <para>The definition</para>

          <programlisting><sgmltag>&lt;e3-detector id="e3_1" freq="300" file="./output/e3_1.xml"&gt;</sgmltag>
   <sgmltag>&lt;det_entry lane="myEdge0_0" pos="0"/&gt;</sgmltag>
   <sgmltag>&lt;det_entry lane="myEdge0_1" pos="0"/&gt;</sgmltag>
   <sgmltag>&lt;det_exit lane="myEdge2_0" pos="0"/&gt;</sgmltag>
   <sgmltag>&lt;det_exit lane="myEdge2_1" pos="0"/&gt;</sgmltag>
<sgmltag>&lt;/e3-detector&gt;</sgmltag></programlisting>

          <para>will build an e3-detector starting at either lane 0 or 1 of
          the edge called "myEdge0" and end at the same lane of "myEdge2". All
          values will be computed as the default-value for measures is used
          and aggregated over a time of 300s. They will be written into the
          file "<filename>e3_1.xm</filename>l" lying in the subfolder of the
          folder the configuration was read in/the program has been started
          within.</para>

          <para>Most of the values have been discussed in the previous
          subchapters. The only thing that differs from e1/e2-detectors are
          the measures e3-detectors are able to compute. Possible values
          are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>MEAN_TRAVELTIME: A vehicle that entered the detector
              through an entry-cross-section and leaves it through a
              leave-cross-section will store it's traveltime (in seconds) and
              the leaving-time into the detector. These traveltimes of the
              vehicles that left during the requested interval are
              averaged.</para>
            </listitem>

            <listitem>
              <para>MEAN_NUMBER_OF_HALTINGS_PER_VEHICLE: A vehicle that
              entered the detector through an entry-cross-section and leaves
              it through a leave-cross-section will store it's number of
              haltings and the leaving-time into the detector. The
              halting-values of the vehicles that left during the requested
              interval are averaged.</para>
            </listitem>

            <listitem>
              <para>NUMBER_OF_VEHICLES: A vehicle that entered the detector
              through an entry-cross-section and leaves it through a
              leave-cross-section will store it's leaving-time into the
              detector. The vehicles that left the detector during the
              requested interval will be summed up.</para>
            </listitem>
          </itemizedlist>

          <para>As for e2-detectors, you can use the value "ALL" for the
          attribute measures to compute all values. This is also this
          attributes default value.</para>
        </sect3>

        <sect3 id="user_chp06-output-detectors-e41">
          <title>E41-Detectors (Destination based Detectors)</title>

          <para>... to be implemented ...</para>
        </sect3>

        <sect3 id="user_chp06-output-detectors-e42">
          <title>E42-Detectors (Edgebased Detectors)</title>

          <para>... to be implemented ...</para>
        </sect3>
      </sect2>

      <sect2 id="user_chp06-output-network_state">
        <title>Network State Dump</title>

        <para>In the hope that every user wants to know different things and
        is able to write a tool that parses this information from a not
        aggregated output, the network dump was the first output capability
        we've implemented. To force SUMO to build a file that contains the
        network dump, extend your command line (or configuration) parameter by
        <option>--netstate-dump</option> (or <option>--ndump</option> or
        <option>--netstate</option>)
        <option><replaceable>&lt;FILE&gt;</replaceable></option>.
        <option><replaceable>&lt;FILE&gt;</replaceable></option> is hereby the
        name of the file the output will be written to. Any other file with
        this name will be overwritten, the destination folder must
        exist.</para>

        <para>The network dump is a xml-file containing for each time step
        every edge of the network with every lane of this edge with all
        vehicles on this lane. For each vehicle, his name, speed and position
        on his lane are written. A network dump-file looks like this:</para>

        <programlisting><sgmltag>&lt;sumo-netstate&gt;</sgmltag>
   <sgmltag>&lt;timestep time="<replaceable>&lt;TIME_STEP&gt;</replaceable>"&gt;</sgmltag>
      <sgmltag>&lt;edge id="<replaceable>&lt;EDGE_ID&gt;</replaceable>"&gt;</sgmltag>
   <sgmltag>      &lt;lane id="<replaceable>&lt;LANE_ID&gt;</replaceable>"&gt;</sgmltag>
            <sgmltag>&lt;vehicle id="<replaceable>&lt;VEHICLE_ID&gt;</replaceable>" pos="<replaceable>&lt;VEH_POSITION&gt;</replaceable>" speed="<replaceable>&lt;VEH_SPEED&gt;</replaceable>"/&gt;</sgmltag>

            ... more vehicles if any on this lane ...

         <sgmltag>&lt;/lane&gt;</sgmltag>

         ... more lanes if the edge possesses more ...

      <sgmltag>&lt;/edge&gt;</sgmltag>

      ... more edges ....

<sgmltag>   &lt;/timestep&gt;</sgmltag>

... the next timestep ...

<sgmltag>&lt;/sumo-netstate&gt;</sgmltag></programlisting>

        <para>The values have the following meaning:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>time</sgmltag>: The time step described by the
            values within this <sgmltag>timestep</sgmltag>-element</para>
          </listitem>

          <listitem>
            <para><sgmltag>id</sgmltag>: The id of the
            edge/lane/vehicle</para>
          </listitem>

          <listitem>
            <para><sgmltag>pos</sgmltag>: The position of the vehicle at the
            lane within the described time step</para>
          </listitem>

          <listitem>
            <para><sgmltag>speed</sgmltag>: The speed of the vehicle within
            the described time step</para>
          </listitem>
        </itemizedlist>

        <para>As you may imagine, this output is very verbose. His main
        disadvantage is the size of the generated file. It's very easy to
        generate files that are several GB large within some minutes. It is of
        course possible to write some nice tools that parse the file (using a
        SAX-parser) and generate some meaningful information, but we do not
        know anyone who has made this. Another problem is that the
        simulation's execution speed of course breaks down when such an amount
        of data must be written.</para>

        <para>Normally, all lanes are written, even if there is no vehicle on
        them. You can change this behaviour using the boolean switch
        <option>--dump-empty-edges</option>. In this case, only those edges
        and lanes will be written that contain vehicles.</para>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_rawdump/</filename>
            shows how the raw output is used. The output is written into the
            subfolder "<filename>output</filename>".</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>Please notcie that this options has been earlier falsely
            named <option>--output</option> (<option>-o</option>)</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-lanestates">
        <title>Aggregated Lane/Edge States</title>

        <para>TBD: --dump-end + dump-begin; difference lane-based &amp;
        edge-based</para>

        <para>This information is far more feasible than the network dump.
        There are two different types of these files, one is edge-based, the
        other lane-based. The aggregated state files contain information about
        all edges/lanes states of the network.</para>

        <para>To force SUMO to generate edge-based state dumps, you have to
        use two command line options: a) <option>--dump-basename
        <replaceable>&lt;PATH_AND_FILE_PREFIX&gt;</replaceable></option>
        describes where to write the dumps to and how the begin of the name
        is. b) <option>--dump-intervals
        <replaceable>&lt;INTERVAL&gt;</replaceable>[;<replaceable>&lt;INTERVAL&gt;</replaceable>]*</option>
        describes over what time the values shall be collected and aggregated
        ("interval length"). Each aggregation interval is written into an own,
        single file. The file name is made up from the base name and the
        aggregation interval:
        <filename><replaceable>&lt;FILENAME&gt;</replaceable> =
        <replaceable>&lt;PATH_AND_FILE_PREFIX&gt;</replaceable>_<replaceable>&lt;INTERVAL&gt;</replaceable>.xml</filename>.
        An example: <option>--dump-basename=./output/lanedump
        --dump-intervals=300;600</option> will build two files:
        <filename>./output/lanedump_300.xml</filename> and
        <filename>./output/lanedump_600.xml</filename>. For edge-based state
        dumps, the output file will look as the following:</para>

        <programlisting><sgmltag>&lt;netstats&gt;</sgmltag>
   <sgmltag>&lt;interval begin="<replaceable>&lt;INTERVAL_BEGIN&gt;</replaceable>" end="<replaceable>&lt;INTERVAL_END&gt;</replaceable>"&gt;</sgmltag>
      <sgmltag>&lt;edge id="<replaceable>&lt;EDGE_ID&gt;</replaceable>"</sgmltag> <sgmltag>traveltime="&lt;<replaceable>MEAN_TRAVEL_TIME&gt;</replaceable>" \
                 noVehContrib="<replaceable>&lt;VEHICLE_NUMBER#1&gt;</replaceable>" \
                 density="<replaceable>&lt;MEAN_DENSITY&gt;</replaceable>" \
                 noStops="<replaceable>&lt;NUMBER_OF_HALTING_VEHICLES&gt;</replaceable>" \
                 speed="<replaceable>&lt;MEAN_SPEED&gt;</replaceable>"/&gt;</sgmltag>

      ... more edges ...

   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/netstats&gt;</sgmltag></programlisting>

        <para>Please remark, that in contrary to the example above, for each
        edge, all those values are reported in one line.</para>

        <para>The meanings of the written values are:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>traveltime</sgmltag>: The mean travel time the
            vehicles needed to pass the lane. Only vehicles that pass the
            whole lane are regarded. If no vehicle has passed the edge,
            length/maximum allowed velocity is used; Measure: s</para>
          </listitem>

          <listitem>
            <para><sgmltag>speed</sgmltag>: The mean speed the vehicles had
            when passing the lane. Only vehicles that pass the whole lane are
            regarded. If no vehicle has passed the edge, the maximum allowed
            velocity is used; Measure: m/s</para>
          </listitem>

          <listitem>
            <para><sgmltag>density</sgmltag>: The mean density on the lane
            during the interval. Only vehicles that pass the whole lane are
            regarded. Measure: veh/h</para>
          </listitem>

          <listitem>
            <para><sgmltag>noVehContrib</sgmltag>: The number of vehicles that
            were on the lane during the interval. All vehicles are regarded.
            Measure: n (veh)</para>
          </listitem>
        </itemizedlist>

        <para>The interval end is the interval begin + aggregation time - 1,
        meaning that values were collected within these steps. If the
        simulation ends before the last interval is over, the interval will be
        prunned.</para>

        <para>To generate lane-based dumps, TBD!!!</para>

        <para>Examples:</para>

        <para>tbd</para>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>The documentation has been updated to fit the real output
            when being rechecked for verion 0.9.3</para>
          </listitem>

          <listitem>
            <para>The (even invalid) documentation of the file printed
            previously at the begin of the file was removed in version
            0.9.3</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-emissions">
        <title>Net-Wide Vehicle Emission States &amp; Travel Times</title>

        <para>This output contains the simulation-wide number of vehicles that
        are loaded, emitted, running, waiting to be emitted, have reached
        their destination and how long they needed to finish the route. The
        last value is normalised over all vehicles that have reached their
        destination so far. The information containing all those values is
        computed for each time step and the output file looks like
        following:</para>

        <programlisting><sgmltag>&lt;emissions&gt;</sgmltag>
   <sgmltag>&lt;emission-state time="<replaceable>&lt;SIMULATION_TIME&gt;</replaceable>"
              loaded="<replaceable>&lt;LOADED_VEHICLE_NUMBER&gt;</replaceable>" \
              emitted="<replaceable>&lt;EMITTED_VEHICLE_NUMBER&gt;</replaceable>" \
              running="<replaceable>&lt;RUNNING_VEHICLE_NUMBER&gt;</replaceable>" \
              waiting="<replaceable>&lt;NUMBER_OF_VEHICLES_WAITING_FOR_EMISSION&gt;</replaceable>" \
              ended="<replaceable>&lt;ENDED_VEHICLE_NUMBER&gt;</replaceable>" \
              meanWaitingTime="<replaceable>&lt;MEAN_WAITING_TIME&gt;</replaceable>" \
              meanTravelTime="<replaceable>&lt;MEAN_TRAVEL_TIME&gt;</replaceable>"/&gt;</sgmltag>

   ... further time steps ...

<sgmltag>&lt;/emissions&gt;</sgmltag></programlisting>

        <para>Please remark, that in contrary to the example above, for each
        time step, all those values are reported in one line.</para>

        <para>The meanings of the written values are:</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>time</sgmltag>: the time step the entry
            describes</para>
          </listitem>

          <listitem>
            <para><sgmltag>loaded</sgmltag>: the number of vehicles that were
            loaded into the simulation until the reported time step</para>
          </listitem>

          <listitem>
            <para><sgmltag>emitted</sgmltag>: the number of vehicles already
            emitted until the reported time step</para>
          </listitem>

          <listitem>
            <para><sgmltag>running</sgmltag>: the number of vehicles that were
            running within the reported time step</para>
          </listitem>

          <listitem>
            <para><sgmltag>ended</sgmltag>: the number of vehicles that have
            reached their destination within the reported and the prior time
            step</para>
          </listitem>

          <listitem>
            <para><sgmltag>meanWaitingTime</sgmltag>: the mean time all
            vehicles up to and within the reported time step had to wait for
            being emitted;-1 if no vehicle has been emitted, yet</para>
          </listitem>

          <listitem>
            <para><sgmltag>meanTravelTime</sgmltag>: the mean travel time of
            all vehicles that have left the simulation within the previous and
            the reported time;-1 if no vehicle has been removed from the
            simulation, yet</para>
          </listitem>
        </itemizedlist>

        <para>You can force the simulation to generate this output using
        <option>--emissions-output
        <replaceable>&lt;FILENAME&gt;</replaceable></option> or
        <option>--emissions
        <replaceable>&lt;FILENAME&gt;</replaceable></option>.</para>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_emissions/</filename>
            shows how the emissions output is used. The output is written into
            the subfolder "<filename>output</filename>".</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>In versions prior to 0.9.3, the attribute
            "<sgmltag>time</sgmltag>" was named "<sgmltag>id</sgmltag>"</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-tripinfo">
        <title>Vehicle-Oriented Trip Information</title>

        <para>This output contains the information about each vehicle's
        departure time, the time the vehicle wanted to start at (which may be
        lower than the real departure time) and the time the vehicle has
        arrived. Such an information is generated for each vehicle as soon as
        the vehicle has arrived its destination and is removed from the
        network. The format is as following:</para>

        <programlisting><sgmltag>&lt;tripinfos&gt;</sgmltag>
   <sgmltag>&lt;tripinfo vehicle_id="<replaceable>&lt;VEHICLE_ID&gt;</replaceable>" start="<replaceable>&lt;DEPARTURE_TIME&gt;</replaceable>" \
            wished="<replaceable>&lt;WISHED_DEPARTURE_TIME&gt;</replaceable>" \
            end="<replaceable>&lt;ARRIVAL_TIME&gt;</replaceable>" \
            duration="<replaceable>&lt;TRAVEL_TIME&gt;</replaceable>" \
            waited="<replaceable>&lt;WAITING_TIME&gt;</replaceable>"/&gt;</sgmltag>

   ... information about further vehicles ...

<sgmltag>&lt;/tripinfos&gt;</sgmltag></programlisting>

        <para>Please remark, that in contrary to the example above, for each
        time step, all those values are reported in one line. An entry is
        written each time a vehicle has arrived at his destination. In prior
        to this, the written values would not be known.</para>

        <para>The meanings of the written values are:</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>vehicle_id</sgmltag>: theid of the vehicle this
            entry describes</para>
          </listitem>

          <listitem>
            <para><sgmltag>start</sgmltag>: The real departure time (the time
            the vehicle was emitted into the network)</para>
          </listitem>

          <listitem>
            <para><sgmltag>wished</sgmltag>: The departure time the vehicles
            wanted to be emitted into the network</para>
          </listitem>

          <listitem>
            <para><sgmltag>end</sgmltag>: The time the vehicle was removed
            from the simulation (due to arriving at the route end)</para>
          </listitem>

          <listitem>
            <para><sgmltag>duration</sgmltag>: The time the vehicle needed to
            accomplish the route (in s)</para>
          </listitem>

          <listitem>
            <para><sgmltag>waited</sgmltag>: The time the vehicle has waited
            until being emitted</para>
          </listitem>
        </itemizedlist>

        <para>The simulation is forced to generate this output using:
        <option>--tripinfo-output
        <replaceable>&lt;FILENAME&gt;</replaceable></option> or
        <option>--tripinfo
        <replaceable>&lt;FILENAME&gt;</replaceable></option>.</para>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_tripinfo/</filename>
            shows how the tripinfo output is used. The output is written into
            the subfolder "<filename>output</filename>".</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>In versions prior to 0.9.3, the attribute
            "<sgmltag>vehicle_id</sgmltag>" was named
            "<sgmltag>id</sgmltag>"</para>
          </listitem>

          <listitem>
            <para>The documentation has been updated before releasing version
            0.9.3</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-vehroutes">
        <title>Vehicle Routes</title>

        <para>The vehicle routes output contains information about which route
        a vehicle took and if his route was replaced at any time by a new one,
        each of the previous routes together with the edge at the time their
        replacement took place is reported. Furthermore, the vehicle emission
        and ending time is stored herein.</para>

        <para>The generated file look like this:</para>

        <programlisting><sgmltag>&lt;vehicleroutes&gt;</sgmltag>
   <sgmltag>&lt;vehicle id="<replaceable>&lt;VEHICLE_ID&gt;</replaceable>" emitedAt="<replaceable>&lt;EMISSION_TIME&gt;</replaceable>" endedAt="<replaceable>&lt;ARRIVAL_TIME&gt;</replaceable>"&gt;</sgmltag>
      <sgmltag>&lt;route replacedOnEdge="<replaceable>&lt;EDGE_ID&gt;</replaceable>" replacedAtTime="<replaceable>&lt;TIME&gt;</replaceable>"&gt;<replaceable>&lt;PREVIOUS_ROUTE&gt;</replaceable>&lt;/route&gt;</sgmltag>

      ... further replaced routes ...

     <sgmltag> &lt;route&gt;<replaceable>&lt;LAST_ROUTE&gt;</replaceable>&lt;/route&gt;</sgmltag>
   <sgmltag>&lt;/vehicle&gt;</sgmltag>

<sgmltag>   ... information about further vehicles ...

&lt;/tripinfos&gt;</sgmltag></programlisting>

        <para>The values have the following meanings:</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>id</sgmltag>: theid of the vehicle this entry
            describes</para>
          </listitem>

          <listitem>
            <para><sgmltag>emitedAt</sgmltag>: The time the vehicle was
            emitted into the network)</para>
          </listitem>

          <listitem>
            <para><sgmltag>endedAt</sgmltag>: The time the vehicle was removed
            from the simulation (due to arriving at the route end)</para>
          </listitem>

          <listitem>
            <para><sgmltag>replacedOnEdge</sgmltag>: The edge the vehicle was
            on when the described route was replaced</para>
          </listitem>

          <listitem>
            <para><sgmltag>replacedAtTime</sgmltag>: The time step of this
            replacement</para>
          </listitem>

          <listitem>
            <para><sgmltag><replaceable>&lt;PREVIOUS_ROUTE&gt;</replaceable></sgmltag>:
            The replaced route</para>
          </listitem>

          <listitem>
            <para><sgmltag><replaceable>&lt;LAST_ROUTE&gt;</replaceable></sgmltag>:
            The final vehicle route</para>
          </listitem>
        </itemizedlist>

        <para>Both the previous and the final routes are complete, that means
        that they contain all the edges the vehicle was meant to pass as long
        as the route was not replaced, yet. The information
        <sgmltag>replacedOnEdge</sgmltag> and
        <sgmltag>replacedAtTime</sgmltag> are available only for routes which
        were replaced.</para>

        <para>In normal conditions, when all vehicles use predefined routes,
        the output does not contain any information that could not be
        retrieved from the routes and the tripinfo output. But as soon as you
        reroute your vehicles within the simulation, f.e. using rerouters (see
        TBD), it will contain new information.</para>

        <para>The simulation is forced to generate this output using:
        <option>--vehroutes-output
        <replaceable>&lt;FILENAME&gt;</replaceable></option> or
        <option>--vehroutes
        <replaceable>&lt;FILENAME&gt;</replaceable></option>.</para>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_vehroutes/</filename>
            shows how the vehicle routes output is used. The output is written
            into the subfolder "<filename>output</filename>". This is just a
            basic example that the output is generated. Better take a look at
            <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/rerouter/</filename>.</para>
          </listitem>

          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/rerouter/</filename>
            uses rerouters to change the vehicles' routes. A vehicle routes
            output into the <filename>output</filename>-subfolder.</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>This output was finally finished and validated for version
            0.9.3</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-command_line">
        <title>Output to the Command Line</title>

        <para>!!!</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp06-vehicle_handling">
      <title>Vehicles Handling Revisited</title>

      <para>In the normal case, SUMO is meant to simulate urban areas where
      vehicles may start their trips from any edge. Still, there also some
      other approaches to feed a simulation with a demand and some of them
      where implemented in SUMO. You have the following possibilities to add
      vehicles into your network:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Insert vehicles on any edge</para>

          <para>In this case, a vehicle from the list will be inserted at the
          given time into the edge his route starts at. The position of the
          insertion is random (by now), the rightmost lane will be
          used.</para>
        </listitem>

        <listitem>
          <para>Insert vehicles on feeding edges</para>

          <para>This is approach is often used in conjunction with
          od-matrices; each of the districts described in such od-matrices
          contains a list of "feeding" or "source" edges. If you use feeding
          edges, your vehicles will be inserted similar to insertion on normal
          edges as described above, but they will be always inserted at the
          end of the edge and all lanes of the feeding edge will be
          used.</para>
        </listitem>

        <listitem>
          <para>Using emitter</para>

          <para>Emitter are used to insert vehicles into the network at a well
          defined position. An emitter may be placed on a certain lane and
          gets a list of vehicles (or a flow amount) to emit. We use this
          approach often to insert vehicles into the network at places where
          induct loops have measured the flows.</para>
        </listitem>
      </itemizedlist>

      <para>We will now describe the emitters more deeply.</para>

      <sect2>
        <title>Emitter</title>

        <para>You can place an emitter onto a lane by adding the following
        declaration to your additional-file:</para>

        <programlisting><sgmltag>&lt;trigger id="<replaceable>&lt;ID&gt;</replaceable>" objecttype="emitter" pos="<replaceable>&lt;POS&gt;</replaceable>" objectid="<replaceable>&lt;LANE_ID&gt;</replaceable>" \
   [friendly_pos="x"] file="<replaceable>&lt;DEFINITION_FILE&gt;</replaceable>"/&gt;</sgmltag></programlisting>

        <para>The fields have the following meanings:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>id</sgmltag>: A string holding the id of the
            emitter.</para>
          </listitem>

          <listitem>
            <para><sgmltag>objecttype</sgmltag>: Always
            "<sgmltag>lane</sgmltag>"; indicates that the trigger changes a
            lane</para>
          </listitem>

          <listitem>
            <para><sgmltag>pos</sgmltag>: Position on the lane in meters; if
            positive, then the following must be ensured:
            0&lt;=<sgmltag><replaceable>&lt;POS&gt;</replaceable></sgmltag>&lt;&lt;LANE_LENGTH&gt;.
            If negative, then 0&gt;&lt;POS&gt;&gt;-&lt;LANE_LENGTH&gt;; in
            this case the position will be counted from the lane's end.</para>
          </listitem>

          <listitem>
            <para><sgmltag>objectid</sgmltag>: The id of the lane the emitter
            shall placed on</para>
          </listitem>

          <listitem>
            <para><sgmltag>friendly_pos</sgmltag>: optional; if this is set
            and the position (<sgmltag>pos</sgmltag>) is not valid, the
            detector will be placed at the lane's end (0.1meter away from
            it).</para>
          </listitem>

          <listitem>
            <para><sgmltag>file</sgmltag>: The file the emitter shall read the
            definition of what/how/when to emit from</para>
          </listitem>
        </itemizedlist>

        <para>As you can see, an emitter needs further information about what
        to do.</para>

        <para>!!!</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp06-trigger">
      <title>Traffic Management and Other Structures</title>

      <para>SUMO holds several additional structures to model speed limits,
      public transport etc. The structures are normally defined within
      additional files.</para>

      <sect2 id="user_chp06-management-traffic_lights">
        <title>Traffic Lights</title>

        <para>Normally, <application>NETCONVERT</application> will generate
        traffic lights and programs for junctions during the computation of
        the networks. Still, these computed programs differ quite often from
        those found in reality. To feed the simulation with traffic light
        programs from the reality, it is possible to load additional programs
        since version 0.9.4. Furthermore, one can describe when and how a set
        of traffic lights can switch from one program to another. Both will be
        discussed in the following subchapters.</para>

        <para>Handling of traffic lights is not yet very user friendly.
        Besides the following descriptions, a further document, "<ulink
        url="http://sumo.sourceforge.net/docs/gen/sumo_moreon_tls.shtml">SUMO
        - More on... Traffic Lights</ulink>", exists which describes the usage
        of traffic lights more deeply.</para>

        <sect3 id="user_chp06-management-traffic_lights-add_programs">
          <title>Adding new Programs</title>

          <para>Since version 0.9.4 you may attach a new program to a tls
          after the network has been loaded. Defining a tls program is not
          that straightforward, yet. If you are definitely interested in this,
          we advice you to read the "<ulink
          url="http://sumo.sourceforge.net/docs/gen/sumo_moreon_tls.shtml">SUMO
          - More on... Traffic Lights</ulink>" document where the format is
          described. Basically, a tls program definition looks like
          this:</para>

          <para><programlisting format="linespecific"
          linenumbering="unnumbered"><sgmltag>&lt;tl-logic type="static"&gt;</sgmltag>
   <sgmltag>&lt;key&gt;</sgmltag>0<sgmltag>&lt;/key&gt;</sgmltag>
   <sgmltag>&lt;subkey&gt;</sgmltag>0<sgmltag>&lt;/subkey&gt;</sgmltag>
   <sgmltag>&lt;phaseno&gt;</sgmltag>8<sgmltag>&lt;/phaseno&gt;</sgmltag>
   <sgmltag>&lt;offset&gt;</sgmltag>0<sgmltag>&lt;/offset&gt;</sgmltag>
   <sgmltag>&lt;phase duration="20" phase="0000111100001111" brake="1111110011111100" yellow="0000000000000000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="4" phase="0000110000001100" brake="1111111111111111" yellow="0000001100000011"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="3" phase="0000110000001100" brake="1111001111110011" yellow="0000000000000000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="4" phase="0000000000000000" brake="1111111111111111" yellow="0000110000001100"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="20" phase="1111000011110000" brake="1100111111001111" yellow="0000000000000000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="4" phase="1100000011000000" brake="1111111111111111" yellow="0011000000110000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="3" phase="1100000011000000" brake="0011111100111111" yellow="0000000000000000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="4" phase="0000000000000000" brake="1111111111111111" yellow="1100000011000000"/&gt;</sgmltag>
<sgmltag>&lt;/tl-logic&gt;</sgmltag></programlisting></para>

          <para>After you have defined a tls program, you can add it to one of
          your additional files. You may load several programs for a single
          tls into the simulation. The program loaded as last will be used
          (unless not defined using a WAUT description, see below). Please
          remark, that all subkeys of your programs must differ if they
          describe the same tls.</para>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Loading of additional tls programs is implemented since
              version 0.9.4</para>
            </listitem>

            <listitem>
              <para>The <sgmltag>inclanes</sgmltag> tag has been removed from
              the network description since version 0.9.4</para>
            </listitem>

            <listitem>
              <para>The tag <sgmltag>keyno</sgmltag> has been renamed to
              <sgmltag>subkey</sgmltag> since version 0.9.4</para>
            </listitem>
          </itemizedlist>

          <caution>
            <para>Please keep in mind that this feature is quite new and that
            du to this some things may not work as suspected and may get
            changed in the near future.</para>
          </caution>
        </sect3>

        <sect3 id="user_chp06-management-traffic_lights-switch_procedure">
          <title>Defining the switch Times and Procedure</title>

          <para>In the reality, a tls often uses different programs during a
          day and maybe also for weekdays and for the weekend days. Since
          version 0.9.4 you can define switch times between the programs using
          a WAUT (I am very sorry, but I do not know the English word for WAUT
          - this may be a matter of change).</para>

          <para>Let's assume we would have a tls which knows four programs -
          two for weekdays and two for weekend days where from 22.00 till 6.00
          the night plan shall be used and from 6.00 till 22.00 the day plan.
          We'll give these programs the names "weekday_night", "weekday_day",
          "weekend_night", "weekend_day". To describe the switch process, we
          have to describe the switch at first, assuming our simulation runs
          from monday 0.00 (second 0) to monday 0.00 (second 604800):</para>

          <para><programlisting format="linespecific"
          linenumbering="unnumbered"><sgmltag>&lt;WAUT refTime="0" id="myWAUT" startProg="weekday_night"&gt;</sgmltag>
   <sgmltag>&lt;wautSwitch time="21600" to="weekday_day"/&gt;</sgmltag>    &lt;!-- monday, 6.00 --&gt;
   <sgmltag>&lt;wautSwitch time="79200" to="weekday_night"/&gt;</sgmltag>  &lt;!-- monday, 22.00 --&gt;
   <sgmltag>&lt;wautSwitch time="108000" to="weekday_day"/&gt;</sgmltag>   &lt;!-- tuesday, 6.00 --&gt;
... further weekdays ...
   <sgmltag>&lt;wautSwitch time="453600" to="weekend_day"/&gt;</sgmltag>   &lt;!-- saturday, 6.00 --&gt;
... the weekend days ...
<sgmltag>&lt;/WAUT&gt;</sgmltag></programlisting></para>

          <para>The fields in <sgmltag>WAUT</sgmltag> have the following
          meanings:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>refTime</sgmltag>: A reference time which is used
              as offset to the switch times given later (in simulation
              seconds)</para>
            </listitem>

            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the defined WAUT</para>
            </listitem>

            <listitem>
              <para><sgmltag>startProg</sgmltag>: The program that will be
              used at the simulation's begin</para>
            </listitem>
          </itemizedlist>

          <para>and the fields in <sgmltag>wautSwitch</sgmltag>:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>time</sgmltag>: The time the switch will take
              place</para>
            </listitem>

            <listitem>
              <para><sgmltag>to</sgmltag>: The name of the program the
              assigned tls shall switch to</para>
            </listitem>
          </itemizedlist>

          <para>Of course, programs with the used names must be defined before
          this definition is read. Also, the time must be sorted.</para>

          <para>Additionally, we have to define which tls shall be switched by
          the WAUT. This is done as following:</para>

          <para><programlisting format="linespecific"
          linenumbering="unnumbered"><sgmltag>&lt;wautJunction wautID="myWAUT" junctionID="RCAS" [procedure="Stretch"] [synchron="t"]/&gt;</sgmltag>
</programlisting></para>

          <para>Here, the attributes have the following meaning:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>wautID</sgmltag>: The id of the WAUT the tls
              shall be switched by</para>
            </listitem>

            <listitem>
              <para><sgmltag>junctionID</sgmltag>: The name of the tls to
              assign to the WAUT</para>
            </listitem>

            <listitem>
              <para><sgmltag>procedure</sgmltag>: The switching algorithm to
              use; If none is given, the programs will switch immediately
              (default)</para>
            </listitem>

            <listitem>
              <para><sgmltag>synchron</sgmltag>: Additional information
              whether the switch shall be done synchron (default:
              false)</para>
            </listitem>
          </itemizedlist>

          <para>You may assign several tls to a single WAUT. YOu may also
          assign several WAUTs to a single junction in theory, but this is not
          done in reality. The switching procedures are currently under
          development.</para>

          <para>Recent changes:</para>

          <itemizedlist>
            <listitem>
              <para>WAUTs are implemented since version 0.9.4</para>
            </listitem>
          </itemizedlist>

          <caution>
            <para>Please keep in mind that this feature is quite new and that
            du to this some things may not work as suspected and may get
            changed in the near future.</para>
          </caution>
        </sect3>
      </sect2>

      <sect2 id="user_chp06-management-public">
        <title>Public Transport</title>

        <para>Possibilities to simulate public transport were firstly added in
        version 0.9.3. By now you may define positions of bus stops and let
        vehicles ("busses") stop at these positions for a pre-given time.
        Definitions of bus stop locations in SUMO have the following format:
        <sgmltag>&lt;trigger
        id="<replaceable>&lt;BUS_STOP_ID&gt;</replaceable>"
        objecttype="bus_stop"
        objectid="<replaceable>&lt;LANE_ID&gt;</replaceable>"
        from="<replaceable>&lt;STARTING_POSITION&gt;</replaceable>"
        to="<replaceable>&lt;ENDING_POSITION&gt;</replaceable>"
        [line="<replaceable>&lt;LINE_ID&gt;</replaceable>[;<replaceable>&lt;LINE_ID&gt;</replaceable>]*"]/&gt;</sgmltag>.
        That means that a bus stop is an area on a lane. The parameters have
        the following meanings:</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>id</sgmltag>: id of the bus stop; must be
            unique</para>
          </listitem>

          <listitem>
            <para><sgmltag>objecttype</sgmltag>: always "bus_stop"
            herein</para>
          </listitem>

          <listitem>
            <para><sgmltag>objectid</sgmltag>: the id of the lane the busstop
            shall be located at</para>
          </listitem>

          <listitem>
            <para><sgmltag>from</sgmltag>: the begin position on the lane (the
            lower position on the lane) in meters</para>
          </listitem>

          <listitem>
            <para><sgmltag>to</sgmltag>: the end position on the lane (the
            higher position on the lane) in meters</para>
          </listitem>

          <listitem>
            <para><sgmltag>line</sgmltag>: A list of names separated by a
            semicolon (';') meant to be the names of the bus lines that stop
            at this bus stop. This is only used for visualisation
            purposes.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Visualization of a bus stop in SUMO (from
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/busses1</filename>)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/bus_stop1.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Vehicles must be informed that they must stop at a bus stop. The
        following example shows how this should be done (taken from
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/busses1</filename>):</para>

        <programlisting>    <sgmltag>&lt;vtype id="BUS" accel="2.6" decel="4.5" sigma="0.5" length="15" maxspeed="70"
            color="1,1,0"/&gt;</sgmltag>

    <sgmltag>&lt;vehicle id="0" type="BUS" depart="0" color="1,1,0"&gt;</sgmltag>
        <sgmltag>&lt;route&gt;2/0to2/1 2/1to1/1 1/1to1/2 1/2to0/2 0/2to0/1 0/1to0/0 0/0to1/0 1/0to2/0
                              2/0to2/1&lt;/route&gt;</sgmltag>
        <sgmltag>&lt;stop bus_stop="busstop1" duration="20"/&gt;</sgmltag>
        <sgmltag>&lt;stop bus_stop="busstop2" duration="20"/&gt;</sgmltag>
        <sgmltag>&lt;stop bus_stop="busstop3" duration="20"/&gt;</sgmltag>
        <sgmltag>&lt;stop bus_stop="busstop4" duration="20"/&gt;</sgmltag>
    <sgmltag>&lt;/vehicle&gt;</sgmltag>
</programlisting>

        <para>What we have here is a vehicle named "0" being a "BUS". "BUS" is
        a referenced type declared earlier. The vehicle has an embedded route
        (written by hand in this case) and a list of stop places. Each stop
        place is described by two attributes, "<sgmltag>bus_stop</sgmltag>"
        and "<sgmltag>duration</sgmltag>" where "<sgmltag>bus_stop</sgmltag>"
        is the name of the bus stop the vehicle shall halt at and
        "<sgmltag>duration</sgmltag>" is the time the vehicle shall wait at
        the bus stop in seconds. Please remark that the order of bus stops the
        vehicle shall halt at must be correct.</para>

        <para>You may also let a vehicle stop at another position than a bus
        stop. The complete definition of a vehicle's stop is:
        <sgmltag>&lt;stop (
        bus_stop="<replaceable>&lt;BUS_STOP_ID&gt;</replaceable>" |
        lane="<replaceable>&lt;LANE_ID&gt;</replaceable>"
        pos="<replaceable>&lt;POSITION_AT_LANE&gt;</replaceable>" )
        duration="<replaceable>&lt;HALTING_DURATION&gt;</replaceable>"/&gt;</sgmltag>.
        This means you can <emphasis>either</emphasis> use a bus stop
        <emphasis>or</emphasis> a lane position to define where a vehicle has
        to stop.</para>

        <para>Again the list of attributes for the
        "<sgmltag>stop</sgmltag>"-element of a vehicle:</para>

        <itemizedlist>
          <listitem>
            <para>Either:</para>

            <itemizedlist>
              <listitem>
                <para><sgmltag>bus_stop</sgmltag>: id of the bus stop the
                vehicle shall halt at; the bus stop must be previously
                declared</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>or:</para>

            <itemizedlist>
              <listitem>
                <para><sgmltag>lane</sgmltag>: id of the lane the vehicle
                shall stop at; the lane must be within the network</para>
              </listitem>

              <listitem>
                <para>pos: Position on the lane the vehicle shall stop at;
                double</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><sgmltag>duration</sgmltag>: the time the vehicle shall halt
            at the bus stop in seconds; int, mandatory</para>
          </listitem>
        </itemizedlist>

        <para>Examples:</para>

        <itemizedlist>
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/busses1</filename>
            shows a small example for defining bus stops and letting a bus
            halt at them</para>
          </listitem>

          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/3busses1</filename>
            is almost the same as
            <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/busses1</filename>
            but three busses are driving here and the first bus stop is longer
            than the others. This example shows how the length of bus stops
            determines how many busses actually can stop here.</para>
          </listitem>

          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/vehicle_stops</filename>
            shows a small example where a vehicle halts</para>
          </listitem>
        </itemizedlist>

        <para>Some extensions still to be done:</para>

        <itemizedlist>
          <listitem>
            <para>Definition of public transport lines instead of giving a
            list of stops for each vehicle?</para>
          </listitem>

          <listitem>
            <para>Halting times dependent to the number of passengers within
            the vehicle</para>
          </listitem>

          <listitem>
            <para>Optionally do not let vehicles halt if no person wants to
            leave/enter</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2>
        <title id="user_chp06-management-vss">Variable Speed Signs
        (VSS)</title>

        <para>One of the trigger objects that may be specified within an
        additional file allows the simulation of variable speed signs. The
        syntax for such an object is: <sgmltag>&lt;trigger
        id="<replaceable>&lt;VSS_ID&gt;</replaceable>" objecttype="lane"
        objectid="<replaceable>&lt;LANE_ID&gt;</replaceable>" attr="speed"
        file="<replaceable>&lt;DEF_FILE&gt;</replaceable>"/&gt;</sgmltag>.
        This trigger is typed to be a vss by the combination of the values of
        the attributes <sgmltag>objecttype="lane"</sgmltag> and
        <sgmltag>attr="speed"</sgmltag>. Although no other combinations are
        implemented so far, this combination forces the simulation to change
        the attribute "speed" of a "lane"-object, exactly what vss do. Of
        course, the vehicles themselves do not override this maximum velocity
        what does not exactly represent the reality.</para>

        <para>You may have noticed that a file name must be supplied, called
        <sgmltag><replaceable>&lt;DEF_FILE&gt;</replaceable></sgmltag> within
        the schema above. This file must contain the information about when a
        certain speed shall be set onto the lane. This file has the following
        format:</para>

        <programlisting><sgmltag>&lt;vss&gt;</sgmltag>
   <sgmltag>&lt;step time="<replaceable>&lt;TIME&gt;</replaceable>" speed="<replaceable>&lt;SPEED&gt;</replaceable>"/&gt;</sgmltag>
   <sgmltag>&lt;step time="<replaceable>&lt;TIME&gt;</replaceable>" speed="<replaceable>&lt;SPEED&gt;</replaceable>"/&gt;</sgmltag>

   ... further entries ...

   <sgmltag>&lt;step time="<replaceable>&lt;TIME&gt;</replaceable>" speed="<replaceable>&lt;SPEED&gt;</replaceable>"/&gt;</sgmltag>
<sgmltag>&lt;/vss&gt;</sgmltag></programlisting>

        <para>Each <sgmltag>step</sgmltag> is a combination of the
        <sgmltag>time</sgmltag> the next new speed shall be set and the
        <sgmltag>speed</sgmltag> to set itself.</para>

        <para>A small example for usage of vss' within SUMO may be found in
        <filename>"data/examples/extended/variable_speed_signs"</filename>.</para>
      </sect2>

      <sect2>
        <title id="user_chp06-management-rerouter">Rerouter</title>

        <para>Rerouter change the route of vehicles as soon as a vehicle moves
        on a specified edge. Although implemented earlier, were firstly
        described and tested within version 0.9.4.</para>

        <para>A rerouter is set into the simulated by adding the following
        line to an "additional file": <sgmltag>&lt;trigger
        id="<replaceable>&lt;REROUTER_ID&gt;</replaceable>"
        objecttype="rerouter"
        objectid="<replaceable>&lt;EDGE_ID&gt;</replaceable>[;<replaceable>&lt;EDGE_ID&gt;</replaceable>]"
        file="<replaceable>&lt;DEFINITION_FILE&gt;</replaceable>"
        [probability="<replaceable>&lt;PROBABILITY&gt;</replaceable>"]/&gt;</sgmltag>.
        As you may see, rerouter may be placed on several edges, at least one
        edge is necessary. Furthermore, you may already give within this
        definition how many vehicles shall be rerouted by giving a number
        between 0 (none) and 1 (all). In addition to this definition a
        description file
        (<sgmltag><replaceable>&lt;DEFINITION_FILE&gt;</replaceable></sgmltag>)
        must be given which describes the behaviour of the rerouter over time.
        The definition values are</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>id</sgmltag>: the id of of the rerouter</para>
          </listitem>

          <listitem>
            <para><sgmltag>objecttype</sgmltag>: always
            "<sgmltag>rerouter</sgmltag>"</para>
          </listitem>

          <listitem>
            <para><sgmltag>objectid</sgmltag>: an edge id or a list of edge
            ids where vehicles shall be rerouted</para>
          </listitem>

          <listitem>
            <para><sgmltag>file</sgmltag>: path to the definition file</para>
          </listitem>

          <listitem>
            <para><sgmltag>probability</sgmltag>: the rpobability for vehicle
            rerouting (0-1)</para>
          </listitem>
        </itemizedlist>

        <para>A rerouter may work in several different ways. Assume you would
        give the following file as definition:</para>

        <programlisting><sgmltag>&lt;rerouter&gt;</sgmltag>
   <sgmltag>&lt;interval begin="<replaceable>&lt;BEGIN_TIME&gt;</replaceable>" end="<replaceable>&lt;END_TIME&gt;</replaceable>"/&gt;</sgmltag>
      <sgmltag>&lt;closing_reroute id="<replaceable>&lt;EDGE_ID&gt;</replaceable>" [to="<replaceable>&lt;EDGE_ID&gt;</replaceable>"]/&gt;</sgmltag>
   <sgmltag>&lt;/interval/&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/rerouter&gt;</sgmltag></programlisting>

        <para>A "<sgmltag>closing_reroute</sgmltag>" forces the rerouter to
        close the edge
        <sgmltag><replaceable>&lt;EDGE_ID&gt;</replaceable></sgmltag>.
        Vehicles which normally would pass this edge will get a new route as
        soon as they reach one of the edges given in the
        <sgmltag>objectid</sgmltag>-attribute of the rerouter's definition. If
        you change the <sgmltag>probability</sgmltag>-attribute within the
        rerouter's definition, only a part of the vehicles will be rerouted.
        The optional "<sgmltag>to</sgmltag>"-edge will be set as the new
        destination of the vehicle. If no new destination edge is given, the
        vehicle will keep his previous destaintion. The values for a closing
        reroute:</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>id</sgmltag>: the id of the closed edge</para>
          </listitem>

          <listitem>
            <para><sgmltag>to</sgmltag>: the destination to use (edge)</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </sect2>
    </sect1>

    <sect1 id="user_chp06-file_load_order">
      <title>Using the Files in a correct Way</title>

      <para>... to be described ...</para>
    </sect1>

    <sect1 id="user_chp06-other">
      <title>Other Topics</title>

      <para>This chapter includes some problems not described, yet.</para>

      <sect2 id="user_chp06-other-accidents">
        <title>Simulation of Accidents</title>

        <para>SUMO uses a collision-free traffic flow model. So if everything
        works as it should, no accidents should occure. If you want to model
        an accident you have the following possibilities:</para>

        <itemizedlist>
          <listitem>
            <para>Use variable speed signs to set a lane's maximum velocity
            down (see chapter "<ulink url="#user_chp06-trigger-vss">Variable
            Speed Signs</ulink>")</para>
          </listitem>

          <listitem>
            <para>Let a vehicle stop at a predefined position (see chapter
            "<ulink url="#user_chp06-trigger-public">Public
            Transport</ulink>")</para>
          </listitem>
        </itemizedlist>

        <para>Still, in some cases, for example if you insert a tls with no
        yellow phase, collisions may occure within the simulation. Earlier
        versions of <application>SUMO</application> reported an error in such
        cases and quit. We decided to change this behaviour. By now, the
        simulation reports a warning in such cases and tries to solve the
        problem internally, either by changing the position of the last car or
        - if this does not work because the lane the accident happened at is
        full - by removing one of the cars and trying to reinsert it as soon
        as possible (see also "Vehicle Teleportation" !!!). You still may
        force the simulation to quit as soon an "accident" happens using the
        option <option>--quit-on-accident</option>.</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp06-missing">
      <title>Missing</title>

      <para>--route-steps TBD</para>

      <para>--check-accidents TBD</para>

      <para>--too-slow-rtf TBD</para>

      <para>--no-duration-log TBD</para>

      <para>TBD: loading &amp; saving of states</para>

      <para>--time-to-teleport TBD</para>
    </sect1>
  </chapter>

  <chapter id="user_chp07">
    <title>Simulation-GUI</title>

    <para>The simulation-GUI (graphical user interface) is just a wrapper
    around the command line simulation. The normal procedure is to start the
    gui-version like any other Window-based application (double-click on it)
    and to load a simulation's description specified using a "normal"
    configuration-file as used by the simulation's command line version. After
    loading it - what may dure a longer time if the network is large or the
    simulation is forced to load many routes at once - the network shall
    appear. Your application should then look like displayed below (with your
    own network, of course).</para>

    <figure>
      <title>The GUI-Window with a loaded simulation (violet: names of the
      controls as used below)</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="./gfx/user/simcontrols.gif"
                     format="GIF" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>You can now start your simulation using the "play"-button and/or
    manoeuvre within the network pressing one of the mouse buttons and moving
    the mouse. When moving the mouse within the window with the left button
    pressed, you'll move the network to the direction you move the mouse. When
    the mouse is moved with the right button pressed, you change the scale the
    network is displayed in, zooming into and out of the network.</para>

    <para>We will now discuss the different possibilities to use the graphical
    user interface more deeply.</para>

    <sect1>
      <title>Main Window Interface</title>

      <sect2>
        <title>Menu Bar</title>

        <sect3>
          <title>File-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Open Simulation...</para>

                <para>Opens a file dialog that lets you choose a
                SUMO-configuration file that describes a complete simulation.
                The simulation described within this file will be loaded.
                Remark that you have to describe the simulation in full - no
                further extension is possible.</para>

                <para>You can of course load a simulation if another one is
                already loaded. In this case, the previous simulation will be
                closed.</para>
              </listitem>

              <listitem>
                <para>Reload Simulation <inlinegraphic
                fileref="./gfx/user/reload.gif" format="GIF" /></para>

                <para>Reloads the previously opened simulation.</para>
              </listitem>

              <listitem>
                <para>Close</para>

                <para>Closes the loaded simulation.</para>
              </listitem>

              <listitem>
                <para>[RECENT FILES]</para>

                <para>if you have opened at least one file before, it will be
                displayed within this list. The list may contain up to ten
                files read previously.</para>
              </listitem>

              <listitem>
                <para>Clear Recent Files</para>

                <para>Clears the list of recent files.</para>
              </listitem>

              <listitem>
                <para>Quit</para>

                <para>Quits the application.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>Edit-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Edit Chosen...</para>

                <para>Opens a dialog that lets you load/save and edit the list
                of chosen items.</para>
              </listitem>

              <listitem>
                <para>Edit Additional Weights...</para>

                <para>This menu enables you to edit additional weights for
                edges. These additional weight descriptions may be saved into
                a file and read by the <application>DUAROUTER</application>
                and his variants.</para>
              </listitem>

              <listitem>
                <para>Edit Breakpoints...</para>

                <para>This menu enables you to edit, load and save
                breakpoints. By now, the simulation will stop at one of the
                given brekpoints (simulation time steps) and can be then
                continued by pressing the "play"-button (<inlinegraphic
                fileref="./gfx/user/play.gif" format="GIF" />).</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>Settings-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Application Settings...</para>

                <para>By now, one can only set whether the application shall
                be closed automatically when the loaded simulation
                ends.</para>
              </listitem>

              <listitem>
                <para>Simulation Settings...</para>

                <para>Displays the settings as read from the configuration
                file. This item is only accessible if a simulation has been
                loaded.</para>

                <caution>
                  <para>Under current development. (Better do not use
                  it)</para>
                </caution>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>Windows-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Show Status Line</para>

                <para>By pressing this menu item, you can switch the status
                line off and on.</para>
              </listitem>

              <listitem>
                <para>Show Message Window</para>

                <para>By pressing this menu item, you can switch the message
                window off and on.</para>
              </listitem>

              <listitem>
                <para>Show Tool Bar</para>

                <para>By pressing this menu item, you can switch the toolbar
                off and on.</para>
              </listitem>

              <listitem>
                <para>Tile Horizontally</para>

                <para>Reorders the position of windows.</para>
              </listitem>

              <listitem>
                <para>Tile Vertically</para>

                <para>Reorders the position of windows.</para>
              </listitem>

              <listitem>
                <para>Cascade</para>

                <para>Reorders the position of windows.</para>
              </listitem>

              <listitem>
                <para>Close</para>

                <para>Closes the uppermost window.</para>
              </listitem>

              <listitem>
                <para>Clear Message Window</para>

                <para>Deletes all contents from the message window.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>Help-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>About</para>

                <para>Shows a small window with some information about
                SUMO.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>Tool Bar</title>

        <sect3>
          <title>File Operations</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Open Button</para>

                <para>Opens a file dialog that lets you choose a
                SUMO-configuration file that describes a complete simulation.
                The simulation described within this file will be loaded.
                Remark that you have to describe the simulation in full - no
                further extension is possible.</para>

                <para>You can of course load a simulation if another one is
                already loaded. In this case, the previous simulation will be
                closed.</para>
              </listitem>

              <listitem>
                <para>Reload Button <inlinegraphic
                fileref="./gfx/user/reload.gif" format="GIF" /></para>

                <para>Reloads the previously opened simulation.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>Simulation Operations</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Play Button <inlinegraphic fileref="./gfx/user/play.gif"
                format="GIF" /></para>

                <para>Starts the simulation. If a loaded simulation was not
                started before, it will begin with the step described by the
                b(egin)-parameter within the loaded configuration file. If the
                simulation was started and stopped, it will continue.</para>

                <caution>
                  <para>It is not possible to restart a simulation, you have
                  to reload it.</para>
                </caution>
              </listitem>

              <listitem>
                <para>Stop Button <inlinegraphic fileref="./gfx/user/stop.gif"
                format="GIF" /></para>

                <para>Stops a running application. A stopped application can
                be continued using the play-button (see above).</para>
              </listitem>

              <listitem>
                <para>Single Step Button <inlinegraphic
                fileref="./gfx/user/step.gif" format="GIF" /></para>

                <para>Performs a single simulation step.</para>
              </listitem>

              <listitem>
                <para>Current Step Field</para>

                <para>After the loaded simulation has been started, the
                information about the current time step is displayed
                herein.</para>
              </listitem>

              <listitem>
                <para>Simulation Speed Control</para>

                <para>The value you can change using this control is the time
                the application waits between two simulation steps. The higher
                the value, the slower the simulation will run.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>Window Operations</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>New Microscopic View - Button <inlinegraphic
                fileref="./gfx/user/new_window.gif" format="GIF" /></para>

                <para>Opens a new window which displays the streets and
                vehicles moving on them.</para>
              </listitem>

              <listitem>
                <para>New Lane-Aggregated View - Button <inlinegraphic
                fileref="./gfx/user/new_window.gif" format="GIF" /></para>

                <para>Opens a new window which displays the streets and
                vehicles moving on them.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Simulation Window Interfaces</title>

      <para>SUMO-GUI provides different views on the simulation. The
      microscopic view shows the vehicles running just the way as the
      simulation performs his work. Aggregated views show the situation on the
      streets by coloring lanes by an aggregated value. Vehicles are not shown
      within the aggregated view.</para>

      <caution>
        <para>Aggregated views need additional simulation time and memory. For
        larer netweorks it seems wise to switch them off using the menu-bar
        option <menuchoice>
            <guimenu>Settings-&gt;Application Settings-&gt;Allow aggregated
            Views</guimenu>
          </menuchoice></para>
      </caution>

      <sect2>
        <title>Common Controls</title>

        <sect3>
          <title>Tracking Settings</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Locate Junction - Button <inlinegraphic
                fileref="./gfx/user/locate_junction.gif"
                format="GIF" /></para>

                <para>Opens a window that allows to choose a junction name
                from the set of junctions the network consists of. Pressing ok
                with a chosen junction zooms the view to this junction.</para>
              </listitem>

              <listitem>
                <para>Locate Edge - Button <inlinegraphic
                fileref="./gfx/user/locate_edge.gif" format="GIF" /></para>

                <para>Opens a window that allows to choose an edge name from
                the set of junctions the network consists of. Pressing ok with
                a chosen edge zooms the view to this edge.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>View Settings</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Recenter View - Button <inlinegraphic
                fileref="./gfx/user/recenter_view.gif" format="GIF" /></para>

                <para>You can use this button to reset the view to show the
                whole network. After pressing this button, the view will be
                the same as after loading the simulation: The zoom factor will
                be reset to a value that lets the window display the whole
                simulation area and the middle of the loaded network will be
                place into the middle of the view.</para>
              </listitem>

              <listitem>
                <para>Show Legend - Button <inlinegraphic
                fileref="./gfx/user/show_legend.gif" format="GIF" /></para>

                <para>Switches the legend (only the scale) on and off.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>View Settings</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Change Lane Colouring Scheme - Button <inlinegraphic
                fileref="./gfx/user/colour_lane.gif" format="GIF" /></para>

                <para>The combobox allows you to choose how the view shall
                determine a displayed lane's colour. The following coluring
                schemes are avaliable for lanes:</para>

                <itemizedlist spacing="compact">
                  <listitem>
                    <para>black: All lanes are black</para>
                  </listitem>

                  <listitem>
                    <para>by purpose: normal lanes are coloured black, sources
                    green, sinks red and internal lanes blue</para>
                  </listitem>

                  <listitem>
                    <para>by speed: The lanes are coloured by the speed
                    allowed on them, blue for fast lanes, red for slow</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>Show Grid - Button <inlinegraphic
                fileref="./gfx/user/show_grid.gif" format="GIF" /></para>

                <para>Turns the visualisation f the grid the network is mapped
                onto on/off. This is rather a debugging feature.</para>
              </listitem>

              <listitem>
                <para>Show Tool Tips - Button <inlinegraphic
                fileref="./gfx/user/show_tooltips.gif" format="GIF" /></para>

                <para>If this button is activated, the id for the object the
                mouse pointer is over will be displayed.</para>
              </listitem>

              <listitem>
                <para>Show Full Geometry - Button <inlinegraphic
                fileref="./gfx/user/show_geometry.gif" format="GIF" /></para>

                <para>Switches between full and simple - geometry. The picture
                beyond shows the difference between full and simple geometry
                mode.</para>

                <figure>
                  <title>The difference between simple (left) and full (right)
                  geometry mode</title>

                  <mediaobject>
                    <imageobject>
                      <imagedata align="center"
                                 fileref="./gfx/user/simple_vs_full_geom.gif"
                                 format="GIF" />
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
            </itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>Additional Microscopic View Controls</title>

        <sect3>
          <title>Tracking Settings</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Locate Vehicle - Button <inlinegraphic
                fileref="./gfx/user/locate_vehicle.gif" format="GIF" /></para>

                <para>Opens a window that allows to choose a vehicle name from
                the set of vehicle currently driving within the simulation.
                Pressing ok with a chosen vehicle zooms the view to this
                vehicle.</para>

                <caution>
                  <para>Under current development. (Better do not use it, may
                  terminate the application with an error)</para>
                </caution>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>View Settings</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Change Vehicle Colouring Scheme - Button <inlinegraphic
                fileref="./gfx/user/colour_vehicle.gif" format="GIF" /></para>

                <para>The combobox allows you to choose how the view shall
                determine a displayed vehicle's colour. The following coluring
                schemes are avaliable for vehicles:</para>

                <itemizedlist spacing="compact">
                  <listitem>
                    <para>by speed: The vehicle colour change continuously
                    from blue to red with decreasing speed</para>
                  </listitem>

                  <listitem>
                    <para>specified: The loaded vehicle colours are
                    used</para>
                  </listitem>

                  <listitem>
                    <para>by type: The vehicles are coloured as defined within
                    the vehicle's type definition</para>
                  </listitem>

                  <listitem>
                    <para>by route: The vehicles are coloured as defined
                    within the vehicle's route definition</para>
                  </listitem>

                  <listitem>
                    <para>random#1: Vehicles are coloured randomly (each
                    vehicle has a certain colour)</para>
                  </listitem>

                  <listitem>
                    <para>random#2: Vehicles are coloured randomly (each
                    vehicle has a certain colour); Quite the same as
                    "random#1", but a different method is used to compute the
                    random colour</para>
                  </listitem>

                  <listitem>
                    <para>lanechange#1: ... to be described ...</para>
                  </listitem>

                  <listitem>
                    <para>lanechange#2: ... to be described ...</para>
                  </listitem>

                  <listitem>
                    <para>lanechange#3: ... to be described ...</para>
                  </listitem>

                  <listitem>
                    <para>waiting#1: ... to be described ...</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>Change Lane Colouring Scheme - Button <inlinegraphic
                fileref="./gfx/user/colour_lane.gif" format="GIF" /></para>

                <para>The combobox allows you to choose how the view shall
                determine a displayed lane's colour. The following coluring
                schemes are avaliable for lanes:</para>

                <itemizedlist spacing="compact">
                  <listitem>
                    <para>black: All lanes are black</para>
                  </listitem>

                  <listitem>
                    <para>by purpose: normal lanes are coloured black, sources
                    green, sinks red and internal lanes blue</para>
                  </listitem>

                  <listitem>
                    <para>by speed: The lanes are coloured by the speed
                    allowed on them, blue for fast lanes, red for slow</para>
                  </listitem>

                  <listitem>
                    <para>by selection: Selected lanes are coloures blueish,
                    the other black</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist></para>
        </sect3>
      </sect2>

      <sect2>
        <title>Additional Aggregated View Controls</title>

        <sect3>
          <title>View Settings</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Change Lane Colouring Scheme - Button <inlinegraphic
                fileref="./gfx/user/colour_lane.gif" format="GIF" /></para>

                <para>The combobox allows you to choose how the view shall
                determine a displayed lane's colour. The following coluring
                schemes are avaliable for lanes:</para>

                <itemizedlist spacing="compact">
                  <listitem>
                    <para>by density: The lanes are coloured by the mean
                    density of vehicles over them</para>
                  </listitem>

                  <listitem>
                    <para>by mean speed: The lanes are coloured by the mean
                    speed of vehicles passing them, blue for fast lanes, red
                    for slow</para>
                  </listitem>

                  <listitem>
                    <para>by mean halts: <caution>
                        <para>... not working, yet. ...</para>
                      </caution></para>
                  </listitem>

                  <listitem>
                    <para>black: All lanes are black</para>
                  </listitem>

                  <listitem>
                    <para>by purpose: normal lanes are coloured black, sources
                    green, sinks red and internal lanes blue</para>
                  </listitem>

                  <listitem>
                    <para>by speed: The lanes are coloured by the speed
                    allowed on them, blue for fast lanes, red for slow</para>
                  </listitem>

                  <listitem>
                    <para>by selection: Selected lanes are coloures blueish,
                    the other black</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>Remembering-factor dialer</para>

                <para>This dialer enables you to change the "memory" of the
                aggregated view.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Interacting with Objects</title>

      <sect2>
        <title>Display an Object's Name</title>

        <para>Each view has the possibility to display tool tips. If enabled
        using the "<guibutton>Show Tool Tips</guibutton>"-Button
        (<inlinegraphic fileref="./gfx/user/show_tooltips.gif"
        format="GIF" />) the name of an object will pop up in a yellow windows
        if the cursor is over the object. A second click on the
        "<guibutton>Show Tool Tips</guibutton>"-Button disables this
        feature.</para>

        <caution>
          <para>This feature does slow down the visualisation. Use should use
          this carefully and disable if not needed.</para>
        </caution>
      </sect2>

      <sect2>
        <title>Object Popup Menus</title>

        <para>If the cursor is over an object you can press down the right
        mouse button and after ahlf a second a popup menu will be shown that
        allows you some further interaction with the object. Normally, the
        following functions are available:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><guimenuitem>Center</guimenuitem> <inlinegraphic
              fileref="./gfx/user/recenter_view.gif" format="GIF" /></para>

              <para>Changes the view in a manner that the current object lies
              within the the view's center.</para>
            </listitem>

            <listitem>
              <para><guimenuitem>Add To Selected</guimenuitem> <inlinegraphic
              fileref="./gfx/user/show_grid.gif" format="GIF" /></para>

              <para>Adds the object to the list of selected objects.</para>
            </listitem>

            <listitem>
              <para><guimenuitem>Remove from Selected</guimenuitem>
              <inlinegraphic fileref="./gfx/user/show_tooltips.gif"
              format="GIF" /></para>

              <para>Removes the object from the list of selected
              objects.</para>
            </listitem>

            <listitem>
              <para><guimenuitem>Show Parameter </guimenuitem><inlinegraphic
              fileref="./gfx/user/show_geometry.gif" format="GIF" /></para>

              <para>Opens a window in which the object's fixed and dynamic
              parameter are displayed.</para>
            </listitem>
          </itemizedlist></para>

        <para>Further, some objects allow an interaction, that means to change
        some of the object's parameter. You can access this using the
        command:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><guimenuitem>Manipulate</guimenuitem> <inlinegraphic
              fileref="./gfx/user/manip.gif" format="GIF" /></para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2>
        <title>Object Selection</title>

        <para>From version 0.8. you are able to add every object that has a
        name (as shown if turning Tool Tips on) into a list of selected
        objects. You can select an object by holding the
        <keysym>Alt</keysym>-key and pressing the left mouse button when the
        mouse is over the object. Doing the same a second time will deselect
        the object again. You may wonder whether an object is selected or not.
        Use the lane colouring "<guilabel>by selection</guilabel>" from
        "<guimenuitem>Change Lane Colouring Scheme</guimenuitem>". When this
        colouring scheme is used, selected lanes are shown blueish, the other
        black.</para>

        <para>The menu entry <menuchoice>
            <guimenu>Edit-&gt;Edit Chosen...</guimenu>
          </menuchoice> allows you to edit the list of selected objects by
        deselected ones you don't need. It also allows you to save the list of
        selected objects. The resulting file contains the names of the
        selected objects predeccesed by the object's type, one per
        line.</para>

        <caution>
          <para><guibutton>Load</guibutton> is not implemented, yet.</para>
        </caution>

        <caution>
          <para>The handling of selected items is not yet designed cmopletely.
          Parts of the gui's behavior may change in the next time.</para>
        </caution>
      </sect2>

      <sect2>
        <title>Parameter Windows</title>

        <para>If you choose the option "<guimenuitem>Show
        Parameter</guimenuitem>" from an object's popup menu, a window like
        the one displayed below will appear:</para>

        <figure>
          <title>A sample Parameter Window (for an induct loop in this
          case)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/parameter_window.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>This window conatins some of each object's parameter, including
        the parameter's name, its current value and the information is static
        (marked with a <inlinegraphic fileref="./gfx/user/no.gif"
        format="GIF" />) or dynamic (marked with a <inlinegraphic
        fileref="./gfx/user/ok.gif" format="GIF" />) within a simulation
        run.</para>

        <para>Pressing the right mouse button when being over a line marked as
        dynamic will show a small popup window with only a single command:
        "<guimenuitem>Open in new Tracker</guimenuitem>". Choosing this option
        will allow you to open another window where this parameter's values
        will be shown as a time line over the simulation run.</para>

        <figure>
          <title>A sample Parameter Window (for the number of vehicles within
          a simulation in this case)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/tracker_example.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>You can change the aggregation time of the tracked values within
        this window using the combobox in this window's menu.</para>

        <figure>
          <title>A sample usage of the aggregation option (for an induct loop
          in this case, for aggregation times of 1s, 1min, 5min (from left to
          right))</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/tracker_agg.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>TL-Tracker Windows</title>

        <para>If you position your mouse over one of the red, green or yellow
        traffic light-bars that show the state of the traffic light and press
        the right mouse button for at least one second, the appearing pop-up
        includes a menu entry "<guimenuitem>Show Phases</guimenuitem>".
        Choosing this menu item will show up a diagram that shows the states
        of the tl chronologically. Each pixel in x-direction shows the state
        of the tls of one second. The display contains the tl-states from the
        time the tracker has been opened, no scrolling aorund is
        supported.</para>

        <figure>
          <title>A sample usage of the tls-tracker</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/tlstracker.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="user_chp08">
    <title>Tips, Tricks &amp; Tools</title>

    <para>We want to supply some additional information that did not fit into
    the descriptions within the previous chapters. The next chapters are
    possibly the most interesting ones of this document as they describe some
    possibilities to ease the work.</para>

    <para>We will now discuss the different possibilities to use the graphical
    user interface more deeply.</para>

    <sect1 id="user_chp08-configs">
      <title>Using Configuration Files</title>

      <para>Most simulations have to be executed more than only one time.
      Furthermore, some experiments require the execution of similar, slightly
      different settings, for example the same network with a different route
      set. To avoid the retyping of all the parameter at the input line, all
      of the main applications can be fed with a configuration file. This
      configuration file contains the values the user normally would give to
      the program at the command line. For example, instead of typing</para>

      <screen>duarouter --cell=<replaceable>myCellFile</replaceable> --net=<replaceable>mySUMONet.net.xml</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>0</replaceable> -e <replaceable>3600</replaceable></screen>

      <para>you can start the router with a configuration file only:</para>

      <screen>duarouter -c=<replaceable>myConfig.rou.cfg</replaceable></screen>

      <para>The <option>-c <replaceable>&lt;FILE&gt;</replaceable></option> -
      option may be passed to all of the package's main applications.</para>

      <para>Of course, you have to build the configuration file
      "<filename>myConfig.rou.cfg</filename>" first. You can find templates
      for configuration files within the data/cfg_templates - folder and all
      examples coming with the release contain configuration files,
      too.</para>

      <para>A configuration file is a simple XML-file in which each of the
      command line parameter is represented as a XML-element with the
      parameter's value being given as text between the begin and end tag of
      this parameter. So if you want to set a parameter "foo" to the value
      "bar" within your configuration file, write
      <sgmltag>&lt;foo&gt;bar&lt;foo/&gt;</sgmltag> into the configuration
      file. Do not forget that each XML-file has to have a root element, so
      that the whole configuration file would look like this:</para>

      <programlisting>&lt;configuration&gt;
   <sgmltag>&lt;foo&gt;</sgmltag>bar<sgmltag>&lt;foo/&gt;</sgmltag>
<sgmltag>&lt;/configuration&gt;</sgmltag></programlisting>

      <para>Between the starting at the ending tag, any type of values may be
      set, use a 'x' to mark boolean values as set. If a parameter allows a
      set of values (normally separated by a ';'), you have to use a single
      element and embed these value into it as you would on command line. A
      different approach will maybe be invented in future. You can find the
      templates for each of the package's application's configuration files
      within the folder
      "<filename>[SUMO]/data/cfg_templates</filename>".</para>
    </sect1>

    <sect1>
      <title>Using generated XML-Files</title>

      <para>All but imported files used by SUMO use XML as format. This makes
      their usage not as straightforward as plain CSV-file, for example, but
      with some additional tools, these files are far more flexible and
      powerful. Some tools can be found within the tools/-folder coming with
      the release.</para>
    </sect1>

    <sect1>
      <title>Additional Tools</title>

      <para>You can some find helpful tools within the
      <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools</filename>
      - folder. We will now introduce some of them. The following chapters are
      devided by the topic the tools cover.</para>

      <sect2>
        <title>Helpers for DUA-Computation</title>

        <sect3>
          <title>dua-iterate.pl</title>

          <para>This script performs a dua computation by runing the
          <application>DUAROUTER</application> and
          <application>SUMO</application> a given number of times and using
          the previous outputs. A detailed description may be found in the
          subchapter "<ulink url="#user_chp05-dua-iterate">Automatic Iteration
          using 'dua-iterate.pl'</ulink>".</para>

          <para><emphasis>Usage</emphasis>: <command>dua-iterate.pl
          <replaceable>&lt;PATH_TO_SUMO_BINARIES&gt;
          </replaceable><optional><replaceable>[&lt;BEGIN_ITERATION_STEP&gt;]
          </replaceable></optional><replaceable>&lt;END_ITERATION_STEP&gt;
          </replaceable></command></para>

          <para><emphasis>Output</emphasis>: see "<ulink
          url="#user_chp05-dua-iterate">Automatic Iteration using
          'dua-iterate.pl'</ulink>"</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/dua_tools</filename></para>
        </sect3>
      </sect2>

      <sect2>
        <title>Handling Routes and Route Alternatives</title>

        <sect3>
          <title>oldStyle2newStyle_Routes.pl</title>

          <para>This tool converts route files as generated by
          <application>DUAROUTER</application>/<application>JTRROUTER</application>
          from their old-style representation where the route and the
          according vehicle where in separate tags into the new style where
          the route-description is.</para>

          <para><emphasis>Usage</emphasis>:
          <command>oldStyle2newStyle_Routes.pl
          <replaceable>&lt;SUMO_ROUTES_FILE&gt;</replaceable></command></para>

          <para><emphasis>Output</emphasis>: The tool prints the modified
          route file in the new-style on the command line</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/route_tools</filename></para>
        </sect3>

        <sect3>
          <title>randomizeDepart.pl</title>

          <para>This tool randomizes the departure time of vehicles within a
          given route/route alternatives file.</para>

          <para><emphasis>Usage</emphasis>: <command>randomizeDepart.pl
          <replaceable>&lt;SUMO_ROUTES_FILE&gt;
          &lt;MAX_DEPARTURE_TIME&gt;</replaceable></command></para>

          <para><emphasis>Output</emphasis>: The tool prints the modified
          route / route alternatives file in the new-style on the command
          line</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/route_tools</filename></para>

          <caution>
            <para>This tool is meant to be used for tests only - routes in
            randomized order may yield in an unexpected behaviour!</para>
          </caution>
        </sect3>

        <sect3>
          <title>removeRouteId.pl</title>

          <para>Removes the ids of routes from their description within the
          given route file.</para>

          <para><emphasis>Usage</emphasis>: <command>removeRouteId.pl
          <replaceable>&lt;SUMO_ROUTES_FILE&gt;</replaceable></command></para>

          <para><emphasis>Output</emphasis>: The tool prints the modified
          route file in the new-style on the command line</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/route_tools</filename></para>

          <caution>
            <para>This tool is meant to be used for tests only - you may get
            an unexpected behaviour if you delete route ids which are still
            needed!</para>
          </caution>
        </sect3>

        <sect3>
          <title>removeRouteReference.pl</title>

          <para>Removes the references to routes from the descriptions of
          vehicles within the given route file.</para>

          <para><emphasis>Usage</emphasis>: removeRouteReference.pl<command>
          <replaceable>&lt;SUMO_ROUTES_FILE&gt;</replaceable></command></para>

          <para><emphasis>Output</emphasis>: The tool prints the modified
          route file in the new-style on the command line</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/route_tools</filename></para>

          <caution>
            <para>This tool is meant to be used for tests only - you may get
            an unexpected behaviour if you delete the information which route
            shall be used if it still needed!</para>
          </caution>
        </sect3>
      </sect2>
    </sect1>
  </chapter>

  <appendix id="user_apa">
    <title>Naming Conventions</title>

    <para>To ease the usage of the supplied files, all of which are within a
    XML-derivate, we use a naming convention for the file extensions to allow
    a distinction between the contents with a single look. The list of used
    extensions is showed below. We of course highly encourage you to use this
    pattern, but if you have a better idea, let us know.</para>

    <itemizedlist>
      <listitem>
        <para>Configuration files:<itemizedlist spacing="compact">
            <listitem>
              <para>*.sumo.cfg</para>

              <para>Configuration file for <application>SUMO</application>
              (both command line and GUI-version)</para>
            </listitem>

            <listitem>
              <para>*.netc.cfg</para>

              <para>Configuration file for
              <application>NETCONVERT</application></para>
            </listitem>

            <listitem>
              <para>*.netg.cfg</para>

              <para>Configuration file for
              <application>NETGEN</application></para>
            </listitem>

            <listitem>
              <para>*.dua.cfg (sometimes also *.rou.cfg)</para>

              <para>Configuration file for
              <application>DUAROUTER</application></para>
            </listitem>

            <listitem>
              <para>*.jtr.cfg</para>

              <para>Configuration file for
              <application>JTRROUTER</application></para>
            </listitem>

            <listitem>
              <para>*.od2t.cfg</para>

              <para>Configuration file for
              <application>OD2TRIPS</application></para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <para>Data files:<itemizedlist spacing="compact">
            <listitem>
              <para>*.net.xml</para>

              <para>SUMO - network file</para>

              <para><emphasis>Contents:</emphasis> the SUMO-network including
              definitions for all streets, lanes and junctions</para>

              <para><emphasis>Generated by:</emphasis>
              <application>NETCONVERT</application> or
              <application>NETGEN</application></para>

              <para><emphasis>Used by:</emphasis>
              <application>SUMO</application>,
              <application>GUISIM</application>,
              <application>DUAROUTER</application>,
              <application>JTRROUTER</application>,
              <application>OD2TRIPS</application></para>
            </listitem>

            <listitem>
              <para>*.rou.xml</para>

              <para>sumo - routes file</para>

              <para><emphasis>Contents:</emphasis> vehicle type definitions,
              route definitions, vehicle definitions</para>

              <para><emphasis>Generated by:</emphasis>
              <application>DUAROUTER</application>,
              <application>JTRROUTER</application> or the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>SUMO</application>,
              <application>GUISIM</application>,
              <application>DUAROUTER</application></para>
            </listitem>

            <listitem>
              <para>*.add.xml</para>

              <para>sumo - additional definitions file</para>

              <para><emphasis>Contents:</emphasis> The definitions of
              detectors to build, sources to build etc.</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>SUMO</application>,
              <application>GUISIM</application></para>
            </listitem>

            <listitem>
              <para>*.out.xml</para>

              <para>sumo - output file</para>

              <para><emphasis>Contents:</emphasis> The "raw" output with
              edges, lanes and vehicles on them</para>

              <para><emphasis>Generated by:</emphasis>
              <application>SUMO</application>,
              <application>GUISIM</application></para>

              <para><emphasis>Used by:</emphasis> the user</para>
            </listitem>

            <listitem>
              <para>*.edg.xml</para>

              <para><application>NETCONVERT</application> - edges file</para>

              <para><emphasis>Contents:</emphasis> definitions of edges to
              build the network from</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>NETCONVERT</application></para>
            </listitem>

            <listitem>
              <para>*.nod.xml</para>

              <para><application>NETCONVERT</application> - nodes file</para>

              <para><emphasis>Contents:</emphasis> definitions of nodes to
              build the network from</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>NETCONVERT</application></para>
            </listitem>

            <listitem>
              <para>*.con.xml</para>

              <para><application>NETCONVERT</application>- connection
              file</para>

              <para><emphasis>Contents:</emphasis> definitions of connections
              between edges</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>NETCONVERT</application></para>
            </listitem>

            <listitem>
              <para>*.trips.xml</para>

              <para>trip definitions for
              <application>DUAROUTER</application></para>

              <para><emphasis>Contents:</emphasis> A list of trip
              definitions</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>DUAROUTER</application></para>
            </listitem>

            <listitem>
              <para>*.flows.xml</para>

              <para>flow definitions for
              <application>JTRROUTER</application>/<application>DUAROUTER</application></para>

              <para><emphasis>Contents:</emphasis> A list of flow
              definitions</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>JTRROUTER</application>/<application>DUAROUTER</application></para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <para>Other used file types<itemizedlist spacing="compact">
            <listitem>
              <para>*.inp</para>

              <para>VISSIM network files</para>
            </listitem>

            <listitem>
              <para>*.net</para>

              <para>VISUM network files</para>
            </listitem>

            <listitem>
              <para>Destinations.txt, Detectors.txt, Flows.txt,
              Generators.txt, HVdests.txt, Incidents.txt, IntLinks.txt,
              Lanes.txt, Links.txt, Nodes.txt, Project Vars.txt, Signal
              Groups.txt, Signal Phases.txt, Signals.txt</para>

              <para>ARTEMIS input files</para>
            </listitem>

            <listitem>
              <para>*.edg</para>

              <para>CELL edge files</para>
            </listitem>

            <listitem>
              <para>*.nod</para>

              <para>CELL node files</para>
            </listitem>

            <listitem>
              <para>*.driver</para>

              <para>CELL driver files</para>
            </listitem>

            <listitem>
              <para>*.rinfo</para>

              <para>CELL route files</para>
            </listitem>

            <listitem>
              <para>*.rindex</para>

              <para>index files generated for CELL route files</para>
            </listitem>

            <listitem>
              <para>*.shp, *.shx, *.dbf</para>

              <para>ArcView-network descriptions (shapes, shape indices,
              definitions)</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
    </itemizedlist>
  </appendix>

  <appendix id="user_apb">
    <title>Included Data</title>

    <sect1>
      <title>Configuration File Templates</title>

      <para>You can find the templates for each of the package's application's
      configuration files within the folder
      <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/cfg_templates</filename>.
      These templates may be filled with your own values. Examples of fille
      configuration files may be found within the examples-section.</para>
    </sect1>

    <sect1>
      <title>Included Examples</title>

      <para>Several examples are included in the distribution. You may find
      them in
      <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples</filename>.
      The subfolders have the following contents:</para>

      <table>
        <title>Supported example folders</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry>Folder</entry>

              <entry>Contains examples for (topic)</entry>

              <entry>Contains examples for (application)</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><filename>dua</filename></entry>

              <entry>the dynamic user assignment</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application>,
              <application>DUAROUTER</application></entry>
            </row>

            <row>
              <entry><filename>emissions</filename></entry>

              <entry>vehicle emissions</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>

            <row>
              <entry><filename>extended</filename></entry>

              <entry>additional simulation structures</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>

            <row>
              <entry><filename>foreign</filename></entry>

              <entry>examples by other users</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>

            <row>
              <entry><filename>netbuild</filename></entry>

              <entry>network generation</entry>

              <entry><application>NETCONVERT</application>,
              <application>NETGEN</application></entry>
            </row>

            <row>
              <entry><filename>output_tests</filename></entry>

              <entry>different simulation outputs</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>

            <row>
              <entry><filename>real_world</filename></entry>

              <entry>networks from the real world</entry>

              <entry>all</entry>
            </row>

            <row>
              <entry><filename>router</filename></entry>

              <entry>route generation</entry>

              <entry><application>DUAROUTER</application>,
              <application>JTRROUTER</application><application>,
              DFROUTER</application></entry>
            </row>

            <row>
              <entry><filename>simple_nets</filename></entry>

              <entry>some simple simulations</entry>

              <entry>all</entry>
            </row>

            <row>
              <entry><filename>traffic_lights</filename></entry>

              <entry>traffic light algorithms</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <sect2>
        <title>SIMPLE_NETS: Basic Examples</title>

        <para>Some smaller networks, mainly for testing purposes, are included
        and may be found within the
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples</filename>
        - folder. In respect to their shape, they are named
        <filename>"eight..."</filename>, <filename>"cross..."</filename> and
        <filename>"box..."</filename>.</para>

        <para>You may have noticed, that different networks are supported with
        the same name begin. They differ in the number of lanes the edges have
        and whether a possibly existing junction is a simple right-of-way or a
        traffic light junction. The name pattern is as follows
        [SHAPE]<varname>X</varname>l for networks with right-of-way junctions,
        where <varname>X</varname> is the number of lanes and
        [SHAPE]<varname>X</varname>ltl for networks with a traffic light.
        [SHAPE] is the name of the coarse shape of the network.</para>
      </sect2>

      <sect2>
        <title>NETBUILD: Examples for NETCONVERT'S XML-Import</title>

        <para>These examples may be found in the folder
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding</filename>.
        They shall show how networks may be imported/defined using the
        <application>NETCONVERT</application> application.</para>

        <sect3>
          <title>"types": Using Type Definitions to describe edges</title>

          <para>Both of these two examples describe the same network (a simple
          cross), but "cross_notypes" describes each edge while
          "cross_usingtypes" uses types.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding/types</filename></para>
        </sect3>

        <sect3>
          <title>"speed_in_kmh": Defining Edges' Speed Limits in km/h</title>

          <para>Both of these two examples describe the same network (a simple
          cross) as the settings in
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding/types</filename>,
          but the speed is given in km/h, both within edge definitions
          (cross_notypes_kmh) and within the version using types
          (cross_usingtypes_kmh).</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding/speed_in_kmh</filename></para>
        </sect3>

        <sect3>
          <title>"shapes": Defining the Shapes of Edges</title>

          <para>One can pass an additional parameter to edges to describe a
          more complex shape. This example is one for using this
          attribute.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding/shapes/hokkaido-japan</filename></para>
        </sect3>
      </sect2>

      <sect2>
        <title>ROUTER: Examples for DUAROUTER and JTRROUTER</title>

        <para>These examples may be found in the folder
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router</filename>.
        They shall show how trips and flows may be used to define
        vehicles.</para>

        <sect3>
          <title>"trips2routes", "trips2routes_repetition", "flows2routes":
          Different Definition Types for the Same</title>

          <para>All these three examples generate 100 vehicles which all have
          the same route. In "trips2routes" each vehicle has an own route.
          They all are the same, only the vehicles' ids differ.
          "trips2routes_repetition" generates one vehicle but which is
          duplicated within the simulation 100 times. "flows2routes" generates
          100 vehicles and routes using a flow definition. The vehicles differ
          from those generated by "trips2routes" only by their ids.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router</filename></para>
        </sect3>

        <sect3>
          <title>"flows2routes" vs.
          "flows2routes_<replaceable>X</replaceable>s_interval" vs.
          "flows2routes_<replaceable>X</replaceable>s_interval_ext": Spreading
          vehicles over an interval</title>

          <para>These examples show the usage of the interval length in flows.
          While in "flows2routes" all vehicles are emitted at the same time,
          in "flows2routes_100s_interval" the departure times are spread over
          100s and in "flows2routes_200s_interval" over 200s. The example
          ending with "_ext" show how the interval may be defined using an
          enclosing element.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router</filename></para>
        </sect3>
      </sect2>

      <sect2>
        <title>EXTENDED: Examples for using additional SUMO-structures</title>

        <para>These examples may be found in the folder
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended</filename>.
        They show how simulations may be equipped with additional structures
        such as variable speed signs, bus routes etc..</para>

        <sect3>
          <title>"busses1" vs. "3busses1": Examples for Bus Stops</title>

          <para>"busses1" shows how bus stops are defined and a bus is forced
          to stop at these. "3busses1" is almost the same, but three busses
          are moving around. "3busses1" shows also that the length of bus
          stops determines how many busses may stop here.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended</filename></para>
        </sect3>

        <sect3>
          <title>"vehicle_stops": Defining Stop Positions for Vehicles</title>

          <para>"vehicle_stops" shows how a vehicle can be forced to stop at a
          certain postion.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended</filename></para>
        </sect3>
      </sect2>
    </sect1>
  </appendix>

  <appendix id="user_apc">
    <title>Error Messages</title>

    <para>Here, only errors that should occur to normal users are reported.
    Some more errors exist but should occur only if the network is invalid
    what should not happen when using networks generated by sumo-netconvert or
    sumo-netgen. As said before, we do not expect a normal user to build a
    network "by hand". If you are a developer and an error occurs that is not
    in the list below, take a look into the developer documentation.</para>

    <caution>
      <para>This list is not up-to-date. We have to rework it. Please contact
      us if an unlisted error occures.</para>
    </caution>

    <itemizedlist spacing="compact">
      <listitem>
        <para><errorcode>No option with the name '[NAME]'
        exists.</errorcode><blockquote>
            <para>You are trying to set an option on the command line that is
            not known to sumo.</para>

            <para>You may have dispelled an option. View Appendix A for a list
            of known options and their correct spelling.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The option '[NAME]' is not a boolean attribute and so
        needs a value.</errorcode><blockquote>
            <para>A non-boolean option has no parameter supplied. An example:
            you have typed "sumo -n", but the option "-n" needs a value like
            "-n ./nodes.xml".</para>

            <para>Always supply a parameter for parameterised options.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>A value for the option '[NAME]' was already set.
        Possible synonyms: [SYNONYMS]</errorcode><blockquote>
            <para>You are setting an option twice. An example: you have typed
            "sumo -n [FILE1] --net [FILE2]". This is not possible. A list of
            possible synonyms is supported.</para>

            <para>Set a value only once. When you are sure you have specified
            the value only once on the command line, your configuration file
            may contain two definitions for the value. A value may be defined
            as well in the configuration file as on the command line but never
            twice in each of them.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The current parameter '[NAME1]' and the
        parameter '[NAME2]' do both need a value.</errorcode><blockquote>
            <para>You are trying to use a single value for two parameters. An
            example: "sumo -nj [FILE1]" or "sumo -nj [FILE1] [FILE2]" is not
            allowed as the parameter may not be assigned to either the network
            or the junctions. Only boolean options may be coupled with other
            options.</para>

            <para>Split the options when using parameterised options.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The configurations file '[NAME]' could not be
        found.</errorcode><blockquote>
            <para>The name for the configuration file is not valid.</para>

            <para>Even if you did not specify a configuration file, it is
            loaded as default. Use the option "-C" when you don't wish to use
            any configuration file.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The named junctions folder '[NAME]' does not
        exist.</errorcode><blockquote>
            <para>You have specified a folder for your junction logics that
            does not exist.</para>

            <para>You have to use a valid folder for your junctions.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: No simulation file (-n)
        specified.</errorcode><blockquote>
            <para>You forgot to specify a file containing the road network to
            use. Attention! The file is not examined to be valid, this error
            only occurs when the user did not give the name of the file. When
            it does not exist or is invalid, other errors are produced.</para>

            <para>You have to specify a network file using "-n [FILE]" where
            [FILE] is the name of the network file.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The begin of the simulation (-b) is not
        specified.</errorcode><blockquote>
            <para>You forgot to specify the begin of the simulation.</para>

            <para>Use "-b [TIME]" to specify the simulation-time the
            simulation shall begin at where [TIME] is a numerical
            value.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The end of the simulation (-e) is not
        specified.</errorcode><blockquote>
            <para>You forgot to specify the end of the simulation.</para>

            <para>Use "-e [TIME]" to specify the simulation-time the
            simulation shall end at where [TIME] is a numerical value.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error: The output file '[NAME]' can not be
        build.</errorcode><blockquote>
            <para>The output file can not be build. This may be due to trying
            to save the file into a folder that does not exist.</para>

            <para>Use a valid name a file may be created under for your
            output. Check whether the folder you want to generate the file in
            exists.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Error during XML-initialisation: [MORE
        TEXT]</errorcode><blockquote>
            <para>An error while the initialisation of the XML-importer
            occurred.</para>

            <para>In fact, this is an error produced by XERCES. The only
            explanation we have is that you are using an inappropriate version
            of XERCES. Remember to use a C++ - XERCES version over 1.5 and
            fits to your system (Windows, Linux, Solaris etc.)</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>An exception occured! Type: UTFDataFormatException,
        Message: invalid byte 2 (L) of a
        2-byte-sequence.</errorcode><blockquote>
            <para>Your network obviously uses a name that contains non-latin
            characters. Older versions of xerces seemed to work with such
            names, although it's against the XML-specifications, newer are
            not. You have to convert them within your input files (mainly
            within the file used to build the network) and rebuild the network
            then.</para>

            <para>If you are a programme, you also may take a look at the
            conversion routine within the class
            <classname>StringUtils</classname> called
            <methodname>convertUmlaute</methodname> and try to patch the
            values to replace within him.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>An XML-error occurred: [MORE
        TEXT]</errorcode><blockquote>
            <para>Your file is corrupt in a way that our XML-importer XERCES
            is not able to parse it. This may happen when you forgot to open a
            tag before closing it or when using non-ASCII characters.</para>

            <para>This error always comes with a deeper explanation, so you
            may find the error quite easy. If you do not see any error, you
            have to look into an XML-description or try to load the document
            into A XML-development tool.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>"Empty route ([NAME])" or "The list belonging to the
        '[TYPE]' with the id '[NAME]' must not but is
        empty"</errorcode><blockquote>
            <para>You have specified an empty route. This is not valid.</para>

            <para>Remove the route or insert at least one edge into it.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The id of the object [TYPE] is missing in the
        description.</errorcode><blockquote>
            <para>An object from your definition which type is given in [TYPE]
            does not have an id (name).</para>

            <para>Insert ids for all used objects.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The description of the object '[TYPE]' with the id
        '[NAME]' is not complete.</errorcode><blockquote>
            <para>At least one of the needed values for an object is not
            given. The type of the object is given in [TYPE], it's name in
            [NAME]. In the case of a vehicle, this could be the type, the
            route or the depart time. The missing of the id is reported by
            another error message.</para>

            <para>Check your file for missing values.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The object [TYPE] with the id [NAME] is not
        known</errorcode><blockquote>
            <para>You have references an object of the type [TYPE] with the
            name [NAME] that you did not define in the file. Such an error may
            occur when you for instance wish to use a vehicle of the type "VW
            Beetle" but have not defined a vehicle type named "VW
            Beetle".</para>

            <para>Insert a definition for TYPE with the id NAME or use a given
            id in your file.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>Another [TYPE] with the id [NAME]
        exists</errorcode><blockquote>
            <para>You are using an id twice for two objects of the same
            type.</para>

            <para>All objects of a type have to have unique ids.</para>
          </blockquote></para>
      </listitem>

      <listitem>
        <para><errorcode>The list belonging to the '[TYPE]' with the id
        '[NAME]' must not but is empty</errorcode><blockquote>
            <para>The information you have specified needs values, you did not
            supply.</para>

            <para>Supply all needed information.</para>
          </blockquote></para>
      </listitem>
    </itemizedlist>
  </appendix>
</book>