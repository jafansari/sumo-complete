<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book>
  <bookinfo>
    <title>SUMO - Simulation of Urban MObility - User Documentation</title>

    <author>
      <firstname>Daniel</firstname>

      <surname>Krajzewicz</surname>

      <affiliation>
        <address><email>Daniel.Krajzewicz@dlr.de</email></address>
      </affiliation>
    </author>

    <author>
      <firstname>Christian</firstname>

      <surname>RÃ¶ssel</surname>

      <affiliation>
        <address><email>christian.roessel@dlr.de</email></address>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>
  </bookinfo>

  <toc></toc>

  <chapter id="user_chp01">
    <title>Introduction</title>

    <sect1 id="user_chp01-sumo" revision="0.9.6">
      <title>What is SUMO?</title>

      <para>SUMO is a microscopic road traffic simulation package. In the near
      future it will be extended to model other transit modes simultaneously
      with ordinary car traffic.</para>
    </sect1>

    <sect1 id="user_chp01-opensource">
      <title>Why open source?</title>

      <para>Two thoughts stood behind the release of the package as open
      source. At first the fact that every traffic research organisation is
      forced to implement an own simulation package; some people are
      interested in traffic light optimisation, other try to find mistakes
      made during the design of a road network. Both need some kind of a
      simulation package and have to implement a framework containing input
      and output functions and other things from scratch. So the first idea
      was to give them a basic framework - containing all needed methods for a
      simulation - they can put own ideas into. The second idea is to supply a
      common test bed for models, especially car models, to the community to
      make them comparable. Due to different architectures of traffic
      simulations such comparisons on a wide scale are not possible by
      now.</para>
    </sect1>

    <sect1 id="user_chp01-features">
      <title>Features</title>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>High portability (using standard - c++ and portable
            libraries only)</para>
          </listitem>

          <listitem>
            <para>Collision free vehicle movement</para>
          </listitem>

          <listitem>
            <para>Different vehicle types</para>
          </listitem>

          <listitem>
            <para>Single-vehicle routing</para>
          </listitem>

          <listitem>
            <para>Multi-lane streets with lane changing</para>
          </listitem>

          <listitem>
            <para>Junction-based right-of-way rules</para>
          </listitem>

          <listitem>
            <para>Hierarchy of junction types</para>
          </listitem>

          <listitem>
            <para>A fast openGL graphical user interface</para>
          </listitem>

          <listitem>
            <para>Dynamic routing</para>
          </listitem>

          <listitem>
            <para>Manages networks with several 10.000 edges (streets)</para>
          </listitem>

          <listitem>
            <para>Fast execution speed (up to 100.000 vehicle updates/s on a
            1GHz machine)</para>
          </listitem>

          <listitem>
            <para>Supports import of many network formats (Visum, Vissim,
            ArcView, XML-Descriptions)</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1 id="user_chp01-about_document">
      <title>About this Document</title>

      <para>This document describes how to use each of the applications that
      come with the SUMO-package. We should remark, that this document only
      covers the usage of the software and some descriptions of the used
      models.</para>

      <sect2 id="user_chp01-about_document-applications">
        <title>Described Applications</title>

        <table id="tab_described_apps">
          <title>Applications described within this document</title>

          <tgroup cols="5">
            <thead>
              <row>
                <entry>Application</entry>

                <entry>Application Name (Windows)</entry>

                <entry>Application Name (Linux/UNIX)</entry>

                <entry>Description</entry>

                <entry>Described in Chapter</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><application>NETCONVERT</application></entry>

                <entry>netconvert.exe</entry>

                <entry>sumo-netconvert</entry>

                <entry>A network converter/importer</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml">Chapter
                4</ulink></entry>
              </row>

              <row>
                <entry><application>NETGEN</application></entry>

                <entry>netgen.exe</entry>

                <entry>sumo-netgen</entry>

                <entry>A generator of abstract networks</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml">Chapter
                4</ulink></entry>
              </row>

              <row>
                <entry><application>DFROUTER</application></entry>

                <entry>dfrouter.exe</entry>

                <entry>sumo-dfrouter</entry>

                <entry>A router using detector flows</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml">Chapter
                5</ulink></entry>
              </row>

              <row>
                <entry><application>DUAROUTER</application></entry>

                <entry>duarouter.exe</entry>

                <entry>sumo-durarouter</entry>

                <entry>A router for dynamic user assignment</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml">Chapter
                5</ulink></entry>
              </row>

              <row>
                <entry><application>JTRROUTER</application></entry>

                <entry>jtrrouter.exe</entry>

                <entry>sumo-jtrrouter</entry>

                <entry>A router using junction turning ratios</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml">Chapter
                5</ulink></entry>
              </row>

              <row>
                <entry><application>SUMO</application></entry>

                <entry>sumo.exe</entry>

                <entry>sumo</entry>

                <entry>The microscopic simulation</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml">Chapter
                6</ulink></entry>
              </row>

              <row>
                <entry><application>GUISIM</application></entry>

                <entry>guisim.exe</entry>

                <entry>sumo-guisim</entry>

                <entry>The gui-version of the microscopic simulation</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp07.shtml">Chapter
                7</ulink></entry>
              </row>

              <row>
                <entry><application>POLYCONVERT</application></entry>

                <entry>polyconvert.exe</entry>

                <entry>sumo-polyconvert</entry>

                <entry>A tool for importing polygons from other
                formats</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp08.shtml#user_chp08-tools-polyconvert">Chapter
                8.3.1</ulink></entry>
              </row>

              <row>
                <entry><application>other</application></entry>

                <entry>---</entry>

                <entry>---</entry>

                <entry>---</entry>

                <entry><ulink
                url="http://sumo.sourceforge.net/docs/gen/user_chp08.shtml">Chapter
                8</ulink></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Please remark that you may also find the applications
        "<application>NETEDIT</application>" and
        "<application>GIANT</application>" within the source distribution.
        Both are not supported, not working properly and will be not
        discussed, herein.</para>
      </sect2>

      <sect2 id="user_chp01-about_document-notation">
        <title>Notation</title>

        <para>This document uses coloring to differ between different type of
        information. If you encounter something like this:</para>

        <screen>netconvert --visum=MyVisumNet.inp --output-file=MySUMONet.net.xml</screen>

        <para>you should know that this is a call on the command line. There
        may be also a '\' at the end of a line. This indicates that you have
        to continue typing without pressing return (ignoring both the '\' and
        the following newline). The following example means exactly the same
        as the one above:</para>

        <screen>netconvert --visum=MyVisumNet.inp \
   --output-file=MySUMONet.net.xml</screen>

        <para>Command line option names are normally coloured <option>this
        way</option>. Their values if optional <option><replaceable>&lt;LIKE
        THIS&gt;</replaceable></option>. XML-elements and attributes are shown
        are coloured <sgmltag>like this</sgmltag>. Their values if optional
        <sgmltag><replaceable>&lt;LIKE THIS&gt;</replaceable></sgmltag>.
        Complete examples of XML-Files are shown like the following:</para>

        <programlisting><sgmltag>&lt;MyType&gt;</sgmltag>

   <sgmltag>&lt;MyElem myAttr1="0" myAttr2="0.0"/&gt;</sgmltag>
   <sgmltag>&lt;MyElem myAttr1="1" myAttr2="-500.0"/&gt;</sgmltag>

<sgmltag>&lt;/MyType&gt;</sgmltag></programlisting>

        <para>You may also find some notations from the EBNF; brackets '[' and
        ']' indicate that the enclosed information is optional. Brackets
        '&lt;' and '&gt;' indicate a type - insert your own value in here...
        All applications are shown like <application>THIS</application>.
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable></filename> is
        the path you have saved your SUMO-package into.</para>
      </sect2>

      <sect2 id="user_chp01-about_document-status">
        <title>Status</title>

        <para>This document is still under development and grows with the
        software. Due to this, you may find it together with the sources
        within the SUMO repository at sourceforge (<ulink
        url="http://sumo.sourceforge.net">http://sumo.sourceforge.net/</ulink>).
        It should always describe the current version.</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp01-call4help">
      <title>Call for Help</title>

      <para>Please let us know when either the document remains at any point
      unclear or any of the applications does not behave as expected. We would
      be very happy if you report broken links or misspelled words. We also
      seek for some participants and further users, not only to share the
      development tasks, but also to gain some feedback and critics or some
      usage examples.</para>

      <para><emphasis>To summarize: every help is appreciated. Thank
      you.</emphasis></para>
    </sect1>
  </chapter>

  <chapter id="user_chp02">
    <title>First Steps</title>

    <sect1 id="user_chp02-install" revision="0.9.6">
      <title>Installing SUMO</title>

      <para>From version 0.8 on, we want not only supply the sources, but also
      the compiled binaries for MS Windows. We have abandonned the idea of
      releasing binaries for Linux due to large variety of the target
      systems.</para>

      <para>If you are a Windows user, you should decide whether you primary
      want to use the software only or also extend it. In the first case, you
      should download the binaries. All needed libraries are included. In the
      latter case, please download the source distribution and compile it for
      your own. The description of the building process is found within a
      separate document located <ulink
      url="http://sumo.sourceforge.net/docs/gen/sumo_howto_building.shtml">here</ulink>.
      If you have built the package on a system not included within our binary
      distribution, please let us know and send it to us, so that we can
      include it into the pages.</para>

      <para>When using Linux, you probably have to compile SUMO from the
      sources. A description about how to do this is located <ulink
      url="http://sumo.sourceforge.net/docs/gen/sumo_howto_building.shtml">here</ulink>.</para>

      <para>The SUMO-package also contains some further scripts which are
      located within the <filename>tools</filename>-folder. To execute them
      you'll need to have <ulink url="http://www.python.org/">python</ulink>
      and/or <ulink url="http://www.perl.org/">perl</ulink> installed.</para>
    </sect1>

    <sect1 id="user_chp02-running_examples">
      <title>Running the Examples</title>

      <para>You may find some examples within the folder
      <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data</filename>
      and its subfolders. Please remark that almost all applications are
      command line tools, what means that no window pops up if you start it,
      you have to open a shell window first.</para>

      <para>Most of the examples come with a configuration-file so that may be
      directly run from the command line. Read chapter "<ulink
      url="http://sumo.sourceforge.net/docs/gen/user_chp08.shtml#user_chp08-configs">Using
      Configuration Files</ulink>" for further information on how to use
      configuration files.</para>

      <para>We apologize that a documentation on the examples does not exist
      (yet). Nonetheless please feel invited to take a look at the <ulink
      url="http://sumo.sourceforge.net/wiki/index.php/Tutorial">tutorial</ulink>(s)
      available at our <ulink
      url="http://sumo.sourceforge.net/wiki/index.php/Main_Page">wiki</ulink>.</para>
    </sect1>
  </chapter>

  <chapter id="user_chp03">
    <title>Traffic Simulations and SUMO</title>

    <sect1 id="user_chp03-simulation_theory">
      <title>A short Introduction to Traffic Simulation Theory</title>

      <sect2 id="user_chp03-simulation_theory-simulation_types"
             revision="0.9.6">
        <title>Simulation types</title>

        <para>SUMO is a microscopic, space continuous and time discrete
        traffic simulation.</para>

        <para>In traffic research four classes of traffic flow models are
        distinguished according to the level of detail of the simulation. In
        <emphasis>macroscopic</emphasis> models traffic flow is the basic
        entity. <emphasis>Microscopic</emphasis> models simulate the movement
        of every single vehicle on the street, mostly assuming that the
        behaviour of the vehicle depends on both, the vehicle's physical
        abilities to move and the driver's controlling behaviour (see <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#ChowdhurySantenSchadschneider2000">[Chowdhury,
        Santen, Schadschneider, 2000]</ulink>). Within SUMO, the microscopic
        model developed by Stefan KrauÃ is used (see <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#Krauss1998_1">[Krauss1998_1]</ulink>,
        <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#Krauss1998_2">[Krauss1998_2]</ulink>),
        extended by some further assumptions. <emphasis>Mesoscopic</emphasis>
        simulations are located at the boundary between microscopic and
        macroscopic simulations. Herein, vehicle movement is mostly simulated
        using queue approaches and single vehicles are moved between such
        queues. <emphasis>Sub-microscopic</emphasis> models regard single
        vehicles like microscopic but extend them by dividing them into
        further substructures, which describe the engine's rotation speed in
        relation to the vehicle's speed or the driver's preferred gear
        switching actions, for instance. This allows more detailed
        computations compared to simple microscopic simulations. However,
        sub-microscopic models require longer computation times. This
        restrains the size of the networks to be simulated.</para>

        <figure id="img_simulation_granularities">
          <title>The different simulation granularities; from left to right:
          macroscopic, microscopic, sub-microscopic (within the circle:
          mesoscopic)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/3sims.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Within a space-continuous simulation each vehicle has a certain
        position described by a floating-point number. In contrast,
        space-discrete simulations are a special kind of cellular automata.
        They use to divide streets into cells and vehicles driving on the
        simulated streets "jump" from one cell to another.</para>

        <figure id="img_discrete-continuous">
          <title>The difference between a space-continuous (top) and a
          space-discrete (bottom) simulation</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/contdisc.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Almost every simulation package uses an own model for vehicle
        movement. Almost all models are so-called
        "<emphasis>car-following-models</emphasis>": the behaviour of the
        driver is herein meant to be dependent on his distance to the vehicle
        in front of him and of this leading vehicle's speed. Although SUMO is
        meant to be a test bed for such vehicle models, only one is
        implemented by now, an extension to the one developed by Stefan KrauÃ.
        Other obstacles, such as traffic lights, are of course considered
        herein, too.</para>

        <para>It seems obvious, that each driver is trying to use to shortest
        path through the network. But when all are trying to do this, some of
        the roads - mainly the arterial roads - would get congested reducing
        the benefit of using them. Solutions for this problem are known to
        traffic research as <emphasis>dynamic user assignment</emphasis>. For
        solving this, several approaches are available and SUMO uses the
        dynamic user assignment approach developed by Christian Gawron (see
        <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#Gawron1998_1">[Gawron1998_1]</ulink>).</para>
      </sect2>

      <sect2 id="user_chp03-simulation_theory-needed_data">
        <title>Needed Data</title>

        <para>At first, you need the network the traffic to simulate takes
        place on. As SUMO is meant to work with large networks, we mainly
        concentrated our work on importing networks and the computation of
        further needed values. Due to this, no graphical editor for networks
        is available, yet. Beside information about a network's roads,
        information about traffic lights is needed.</para>

        <para>Further, you need information about the traffic demand. While
        most traffic simulation use a statistical distribution which is laid
        over the network, each vehicle within SUMO knows its route. Within
        this approach, the route is a list of edges to pass. Although this
        approach is more realistic, it also induces a large amount of data
        needed to describe the vehicle movements. By now, routes are not
        compressed within SUMO and so may be several MB large. We will
        possibly change this in future.</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp03-simulation_workflow" revision="0.9.6">
      <title>The Workflow of Preparing a Simulation</title>

      <para>As shortly described above, you basically have to perform the
      following steps in order to make your simulation run:</para>

      <procedure>
        <step>
          <para>Build your network</para>

          <para>Use either own descriptions (described in chapter 4, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml#user_chp04-xml_descriptions">Building
          Networks from own XML-descriptions</ulink>") or if you have some
          digital networks SUMO can import, convert them (described in chapter
          4, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml#user_chp04-other_input">Converting
          other Input Data</ulink>")</para>
        </step>

        <step>
          <para>Build the demand</para>

          <para>Build your own movements using either by a) describing
          explicit vehicle routes (see chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-explicit">Using
          Trip Definitions</ulink>"), b) using flows and turning percentages
          only (see chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-own_routes-jtr">Using
          the Junction Turning Ratio - Router</ulink>"), c) generating random
          routes (see chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-own_routes-random">Generating
          random Routes</ulink>"), d) importing OD-matrices (see chapter
          "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-od2trips">Using
          OD2TRIPS</ulink>" or "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-explicite-flows">Using
          Flow Definitions</ulink>"), or e) importing routes you own (see
          chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-import_routes">Importing
          Routes</ulink>").</para>
        </step>

        <step>
          <para>If needed, compute the dynamic user assignment (described in
          chapter 5, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-dua">Dynamic
          User Assignment</ulink>")</para>
        </step>

        <step>
          <para>Perform the simulation (described in chapter 6, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml">Performing
          the Simulation</ulink>") to get your desired output</para>
        </step>
      </procedure>

      <para>This process is also visualised within the next figure.</para>

      <figure id="img_sim_process">
        <title>Process of simulation with SUMO; (rounded: definite data types;
        boxes: applications; octagons: abstract data types)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="./gfx/user/flow_complete_small.png"
                       format="PNG" width="500" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Please remark, that most of the tools are command-line tools by
      now. They do nothing if you just double-click them (besides printing
      errors). Do also notice, that the call parameter desribed in the
      following chapters may be also stored in so-called
      "<emphasis>configuration files</emphasis>" to allow their reuse. This
      possibility is described in chapter "<ulink
      url="http://sumo.sourceforge.net/docs/gen/user_chp08.shtml#user_chp08-configs">Using
      Configuration Files</ulink>".</para>
    </sect1>

    <sect1 id="user_chp03-sumo">
      <title>SUMO</title>

      <sect2 id="user_chp03-sumo-software_paradigms">
        <title>Main Software Paradigms</title>

        <para>Two basic design goals are approached: the software shall be
        fast and it shall be portable. Due to this, the very first versions
        were developed to be run from the command line only - no graphical
        interface was supplied at first and all parameter had to be inserted
        by hand. This should increase the execution speed by leaving off slow
        visualisation. Also, due to these goals, the software was split into
        several parts. Each of them has a certain purpose and must be run
        individually. This is something that makes SUMO different to other
        simulation packages where the dynamical user assignment is made within
        the simulation itself, not via an external application like here. This
        split allows an easier extension of each of the applications within
        the package because each is smaller than a monolithic application
        doing everything. Also, it also allows the usage of faster data
        structures, each adjusted to the current purpose, instead of using
        complicated and ballast-loaded ones. Still, this makes the usage of
        SUMO a little bit uncomfortable in comparison to other simulation
        packages. As there are still other things to do, we are not thinking
        of a redesign towards an integrated approach by now.</para>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="user_chp04">
    <title>Network Generation</title>

    <sect1 id="user_chp04-introduction" revision="0.9.7">
      <title>Introduction</title>

      <para>As <application><application>SUMO</application></application> uses
      an own road network description, networks must be converted from an
      existing dataset. Although being readable (xml) by human beings, the
      format of road networks used by <application>SUMO</application> is not
      meant to be edited by hand and will also not be described herein due to
      its complexity. SUMO networks can be build by either converting an
      existing map or by using <application>NETGEN</application> to generate
      basic, abstract road maps. The following figure shows the function of
      <application>NETCONVERT</application> and
      <application>NETGEN</application> within the procedure of building and
      running a simulation.</para>

      <figure id="img_network_building_process">
        <title>Building a network</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="./gfx/user/flow_network_small.png"
                       format="PNG" width="260" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Having data describing a road network, you may convert them into a
      network description readable by <application>SUMO</application> using
      the <application>NETCONVERT</application> tool. By now,
      <application>NETCONVERT</application> is capable to parse the following
      formats:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para><emphasis>ptv VISUM</emphasis> (a macroscopic traffic
            simulation package), see chapter "<ulink
            url="#user_chp04-other_input-visum">Importing
            VISUM-networks</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>ptv VISSIM</emphasis> (a microscopic traffic
            simulation package), see chapter "<ulink
            url="#user_chp04-other_input-vissim">Importing
            VISSIM-networks</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>ArcView</emphasis>-data base files, see chapter
            "<ulink url="#user_chp04-other_input">Importing
            ArcView-databases</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>XML</emphasis>-descriptions, see chapter "<ulink
            url="#user_chp04-xml_descriptions">Building Networks from own
            XML-descriptions</ulink>"</para>
          </listitem>

          <listitem>
            <para>Elmar Brockfelds <emphasis>unsplitted</emphasis> and
            <emphasis>splitted NavTeq-data</emphasis>, see chapter "<ulink
            url="#user_chp04-other_input-elmar">Importing Elmar's converted
            NavTech-Files</ulink>"</para>
          </listitem>

          <listitem>
            <para><emphasis>TIGER</emphasis> databases, see chapter "<ulink
            url="#user_chp04-other_input-tiger">Importing
            TIGER-databases</ulink>"</para>
          </listitem>
        </itemizedlist></para>

      <para>In most of these cases, <application>NETCOVERT</application> needs
      only two parameter: the option named as the source application/format
      followed by the name of the file to convert and the name of the output
      file (using the <option>--output-file</option> option). So if you want
      to import a file generated by the <application>VISUM</application>
      simulation package, simply write the following:</para>

      <screen>netconvert --visum=MyVisumNet.inp --output-file=MySUMONet.net.xml</screen>

      <para>The parameter <option>--output-file</option> has the default value
      "<filename>net.net.xml</filename>". That means that both
      <application>NETCONVERT</application> and
      <application>NETGEN</application> will save the generated file as
      "<filename>net.net.xm</filename>l" if the option is not set. Please
      note, that <application>NETCONVERT</application> has to be started from
      the command line. There is no graphical interface available, yet.</para>

      <para>The following subchapters will describe more deeply how
      <application>NETCONVERT</application> and
      <application>NETGEN</application> are used, also discussing some
      problems with each of the import formats
      <application>NETCONVERT</application> supports. Please remind the option
      to name the output generated by both applications:</para>

      <variablelist>
        <varlistentry>
          <term><option>( --output-file | --output | -o )
          <replaceable>&lt;OUTPUT_FILE&gt;</replaceable></option></term>

          <listitem>
            <para>Defines the file to write the computed network into. This
            file will contain the generated network if the conversion could be
            accomplished. <remark>Optional (pregiven), type:filename, default:
            "net.net.xml"</remark></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Recent changes:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>ARTEMIS network import is was removed from version
          0.9.7</para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="user_chp04-xml_descriptions">
      <title>Building Networks from own XML-descriptions</title>

      <para>All examples within the distribution were made by hand. For doing
      this, you need at least two files: one file for nodes and another one
      for the streets between them. Please notice that herein,
      "<emphasis>node</emphasis>" and "<emphasis>junction</emphasis>" mean the
      same as well as "<emphasis>edge</emphasis>" and
      "<emphasis>street</emphasis>" do. Besides defining the nodes and edges,
      you can also join edges by type and set explicit connections between
      lanes. We will describe how each of these four file types should look
      like in the following chapters.</para>

      <figure id="img_network_building_process__xml">
        <title>Building a network from XML-descriptions</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="./gfx/user/flow_network_xml_small.png"
                       format="PNG" width="390" />
          </imageobject>
        </mediaobject>
      </figure>

      <sect2 id="user_chp04-xml_descriptions-nodes">
        <title>Nodes Descriptions</title>

        <para>Within the nodes-files, normally having the extension
        "<filename>.nod.xml</filename>" (see Appendix "<ulink
        url="http://sumo.sourceforge.net/docs/gen/user_apa.shtml">Naming
        Conventions</ulink>"), every node is described in a single line which
        looks like this: <sgmltag>&lt;node
        id="<replaceable>&lt;STRING&gt;</replaceable>"
        x="<replaceable>&lt;FLOAT&gt;</replaceable>"
        y="<replaceable>&lt;FLOAT&gt;</replaceable>"
        [type="<replaceable>&lt;TYPE&gt;</replaceable>"]/&gt;</sgmltag> - the
        straight brackets ('[' and ']') indicate that the parameter is
        optional. Each of these attributes has a certain meaning and value
        range:</para>

        <para><itemizedlist>
            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the node; may be any
              character string</para>
            </listitem>

            <listitem>
              <para><sgmltag>x</sgmltag>: The x-position of the node on the
              plane in meters; must be a floating point number</para>
            </listitem>

            <listitem>
              <para><sgmltag>y</sgmltag>: The y-position of the node on the
              plane in meters; must be a floating point number</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: An optional type for the node. If
              you leave out the type of the node, it is automatically guessed
              by <application>NETCOVERT</application> but may not be the one
              you intentionally thought of. The following types are possible,
              any other string is counted as an error and will yield in a
              program stop:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>priority</sgmltag>: Vehicles have to wait
                  until vehicles right to them have passed the
                  junction.</para>
                </listitem>

                <listitem>
                  <para><sgmltag>traffic_light</sgmltag>: The junction is
                  controlled by a traffic light.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>When writing your nodes-file, please do not forget to
        embed your node definitions into an opening and a closing "tag". A
        complete file should like the example below, which is the node file
        "<filename>cross3l.nod.xml</filename>" for the examples
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_usingtypes/</filename>"
        and
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>"
        example.</para>

        <programlisting><sgmltag>&lt;nodes&gt;</sgmltag> <sgmltag>&lt;!-- The opening tag --&gt;</sgmltag>

   <sgmltag>&lt;node id="0" x="0.0" y="0.0" type="traffic_light"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "0" --&gt;</sgmltag>

   <sgmltag>&lt;node id="1" x="-500.0" y="0.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "1" --&gt;</sgmltag>
   <sgmltag>&lt;node id="2" x="+500.0" y="0.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "2" --&gt;</sgmltag>
   <sgmltag>&lt;node id="3" x="0.0" y="-500.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "3" --&gt;</sgmltag>
   <sgmltag>&lt;node id="4" x="0.0" y="+500.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "4" --&gt;</sgmltag>

   <sgmltag>&lt;node id="m1" x="-250.0" y="0.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "m1" --&gt;</sgmltag>
   <sgmltag>&lt;node id="m2" x="+250.0" y="0.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "m2" --&gt;</sgmltag>
   <sgmltag>&lt;node id="m3" x="0.0" y="-250.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "m3" --&gt;</sgmltag>
   <sgmltag>&lt;node id="m4" x="0.0" y="+250.0" type="priority"/&gt;</sgmltag> <sgmltag>&lt;!-- def. of node "m4" --&gt;</sgmltag>

<sgmltag>&lt;/nodes&gt;</sgmltag> <sgmltag>&lt;!-- The closing tag --&gt;</sgmltag></programlisting>

        <para>As you may notice, only the first node named "0", which is the
        node in the middle of the network, is a traffic light controlled
        junction. All other nodes are uncontrolled. You may also notice, that
        each of both ends of a street needs an according node. This is not
        really necessary as you may see soon, but it eases the understanding
        of the concept: every edge (street/road) is a connection between two
        nodes (junctions).</para>

        <para>You should also know something about the coordinate system: the
        higher a node on the screen shall be (the nearer to the top of your
        monitor), the higher his y-value must be. The more to left it shall
        be, the higher his x-value.</para>

        <figure id="img_coordinate_system">
          <title>Coordinate system used in SUMO</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/basic_coordinates.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Since version 0.9.4 you can also give the <sgmltag>x</sgmltag>-
        and <sgmltag>y</sgmltag>-coordinates using geocoordinates. In this
        case, the coordinates will be interpreted as long/lat in degrees. Read
        more on this in "<link
        linkend="user_chp04-further_options-geocoordinates">Converting from
        Geocoordinates</link>".</para>
      </sect2>

      <sect2 id="user_chp04-xml_descriptions-edges" revision="0.9.6">
        <title>Edges Descriptions</title>

        <para>Edges are described quite the same way as nodes, but posses
        other parameter. Within the edges file, each description of a single
        edge looks like this: <sgmltag>&lt;edge
        id="<replaceable>&lt;STRING&gt;</replaceable>"
        (fromnode="<replaceable>&lt;NODE_ID&gt;</replaceable>"
        tonode="<replaceable>&lt;NODE_ID&gt;</replaceable>" |
        xfrom="<replaceable>&lt;FLOAT&gt;</replaceable>"
        yfrom="<replaceable>&lt;FLOAT&gt;</replaceable>"
        xto="<replaceable>&lt;FLOAT&gt;</replaceable>"
        yto="<replaceable>&lt;FLOAT&gt;</replaceable>")
        [type="<replaceable>&lt;STRING&gt;</replaceable>" |
        nolanes="<replaceable>&lt;INT&gt;</replaceable>"
        speed="<replaceable>&lt;FLOAT&gt;</replaceable>"
        priority="<replaceable>&lt;UINT&gt;</replaceable>"
        length="<replaceable>&lt;FLOAT&gt;</replaceable>")]
        [shape="<replaceable>&lt;2D_POINT&gt; </replaceable>[
        <replaceable>&lt;2D_POINT&gt;</replaceable>]*"]
        [spread_type="center"]/&gt;</sgmltag>.</para>

        <para>What does it mean? Every one who knows how XML-files look like
        should have noticed brackets ('(' and ')') and pipes ('|') within the
        definition and these characters are not allowed within XML... What we
        wanted to show which parameter is optional. So for the definition of
        the origin and the destination node, you can either give their names
        using <sgmltag>fromnode="<replaceable>&lt;NODE_ID&gt;</replaceable>"
        tonode="<replaceable>&lt;NODE_ID&gt;</replaceable>" </sgmltag>or you
        give their positions using
        <sgmltag>xfrom="<replaceable>&lt;FLOAT&gt;</replaceable>"
        yfrom="<replaceable>&lt;FLOAT&gt;</replaceable>
        xto="<replaceable>&lt;FLOAT&gt;</replaceable>"
        yto="<replaceable>&lt;FLOAT&gt;</replaceable>"</sgmltag>. In the
        second case, nodes will be build automatically at the given positions.
        Each edge is unidirectional and starts at the
        "<sgmltag>from</sgmltag>"-node and ends at the
        "<sgmltag>to</sgmltag>"-node. If a name of one of the nodes can not be
        dereferenced (because they have not been defined within the nodes
        file) an error is generated (see also the documentation on
        "<option>--dismiss-loading-errors</option>" in subchapter "<link
        linkend="user_chp04-xml_descriptions-running">Building the
        Network</link>").</para>

        <para>For each edge, some further attributes should be supplied, being
        the number of lanes the edge has, the maximum speed allowed on the
        edge, the length the edge has (in meters). Furthermore, the priority
        may be defined optionally. All these values - beside the length in
        fact - may either be given for each edge using according attributes or
        you can omit them by giving the edge a "<sgmltag>type</sgmltag>". In
        this case, you should also write a type-file (see subchapter "<ulink
        url="#user_chp04-xml_descriptions-types">Types Descriptions</ulink>").
        A type with this name should of course be within the generated
        type-file, otherwise an error is reported. Even if you supply a type,
        you can still override the type's values by supplying any of the
        parameter <sgmltag>nolanes</sgmltag>, <sgmltag>speed</sgmltag> and
        <sgmltag>priority</sgmltag>. You may also leave the edge parameter
        completely unset. In this case, default-values will be used and the
        edge will have a single lane, a default (unset) priority and the
        maximum allowed speed on this edge will be 13.9m/s being around
        50km/h. The length of this edge will be computed as the distance
        between the starting and the end point.</para>

        <para>As an edge may have a more complicated geometry, you may supply
        the edge's shape within the <sgmltag>shape</sgmltag> tag. If the
        length of the edge is not given otherwise, the distances of the shape
        elements will be summed. The information
        <sgmltag>spread_type="center"</sgmltag> forces
        <application>NETCONVERT</application> to spread lanes to both sides of
        the connection between the begin node and the end node or from the
        list of lines making up the shape. If not given, lanes are spread to
        right, as default.</para>

        <para>Let's list an edge's attributes again:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the edge; may be any
              character string</para>
            </listitem>

            <listitem>
              <para>Origin and destination node descriptions</para>

              <para>Either:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>fromnode</sgmltag>: The name of a node within
                  the nodes-file the edge shall start at</para>
                </listitem>

                <listitem>
                  <para><sgmltag>tonode</sgmltag>: The name of a node within
                  the nodes-file the edge shall end at</para>
                </listitem>
              </itemizedlist>

              <para>or:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>xfrom</sgmltag>: The x-position of the node
                  the edge shall start at in meters; must be a floating point
                  number</para>
                </listitem>

                <listitem>
                  <para><sgmltag>yfrom</sgmltag>: The y-position of the node
                  the edge shall start at in meters; must be a floating point
                  number</para>
                </listitem>

                <listitem>
                  <para><sgmltag>xto</sgmltag>: The x-position of the node the
                  edge shall end at in meters; must be a floating point
                  number</para>
                </listitem>

                <listitem>
                  <para><sgmltag>yto</sgmltag>: The y-position of the node the
                  edge shall end at in meters; must be a floating point
                  number</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Descriptions of the edge's type and atomic
              attributes:</para>

              <para>Either:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>type</sgmltag>: The name of a type within the
                  types-file</para>
                </listitem>
              </itemizedlist>

              <para>or/and:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>nolanes</sgmltag>: The number of lanes of the
                  edge; must be an integer value</para>
                </listitem>

                <listitem>
                  <para><sgmltag>speed</sgmltag>: The maximum speed allowed on
                  the edge in m/s; must be a floating point number (see also
                  <ulink url="#user_chp04-further_options-kmh_speed">"Using
                  Edges' maximum Speed Definitions in km/h"</ulink>)</para>
                </listitem>

                <listitem>
                  <para><sgmltag>priority</sgmltag>: The priority of the edge;
                  must be a positive integer value</para>
                </listitem>

                <listitem>
                  <para><sgmltag>length</sgmltag>: The length of the edge in
                  meter; must be an float value</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>The edges shape:</para>

              <itemizedlist>
                <listitem>
                  <para><sgmltag>shape</sgmltag>: List of positions; each
                  position is encoded in x,y (do not separate the numbers with
                  a space!) in meters; the start and end node are omitted from
                  the shape definition; an example: <sgmltag>&lt;edge id="e1"
                  fromnode="0" tonode="1" shape="0,0 0,100"/&gt;</sgmltag>
                  describes an edge that after starting at node 0, first
                  visits position 0,0 than goes one hundred meters to the
                  right before finally reaching the position of node 1.</para>
                </listitem>

                <listitem>
                  <para><sgmltag>spread_type</sgmltag>: The description of how
                  to spread the lanes; "<sgmltag>center</sgmltag>" spreads
                  lanes to both directions of the shape, any other value will
                  be interpreted as "<sgmltag>right</sgmltag>".</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>The priority plays a role during the computation of
        the way-giving rules of a node. Normally, the allowed speed on the
        edge and the edge's number of lanes are used to compute which edge has
        a greater priority on a junction. Using the priority attribute, you
        may increase the priority of the edge making more lanes yielding in it
        or making vehicles coming from this edge into the junction not
        wait.</para>

        <para>Also the definitions of edges must be embedded into an opening
        and a closing tag and for the example
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>"
        the whole edges-file looks like this
        ("<filename>cross3l.edg.xml</filename>"):</para>

        <programlisting><sgmltag>&lt;edges&gt;</sgmltag>

   <sgmltag>&lt;edge id="1fi" fromnode="1" tonode="m1" priority="2" nolanes="2" speed="11.11"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="1si" fromnode="m1" tonode="0" priority="3" nolanes="3" speed="13.89"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="1o" fromnode="0" tonode="1" priority="1" nolanes="1" speed="11.11"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="2fi" fromnode="2" tonode="m2" priority="2" nolanes="2" speed="11.11"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="2si" fromnode="m2" tonode="0" priority="3" nolanes="3" speed="13.89"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="2o" fromnode="0" tonode="2" priority="1" nolanes="1" speed="11.11"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="3fi" fromnode="3" tonode="m3" priority="2" nolanes="2" speed="11.11"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="3si" fromnode="m3" tonode="0" priority="3" nolanes="3" speed="13.89"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="3o" fromnode="0" tonode="3" priority="1" nolanes="1" speed="11.11"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="4fi" fromnode="4" tonode="m4" priority="2" nolanes="2" speed="11.11"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="4si" fromnode="m4" tonode="0" priority="3" nolanes="3" speed="13.89"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="4o" fromnode="0" tonode="4" priority="1" nolanes="1" speed="11.11"/&gt;</sgmltag>

<sgmltag>&lt;/edges&gt;</sgmltag>
</programlisting>

        <para>Within this example, we have used explicit definitions of edges.
        An example for using types is described in the chapter "<ulink
        url="#user_chp04-xml_descriptions-types">Types
        Descriptions</ulink>".</para>

        <caution>
          <para>There are some constraints about the streets' ids. They must
          not contain any of the following characters: '_' (underline - used
          for lane ids), '[' and ']' (used for enumerations), ' ' (space -
          used as list divider), '*' (star, used as wildcard), ':' (used as
          marker for internal lanes).</para>
        </caution>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>The <sgmltag>function</sgmltag>-tag was added for version
            0.9.4 and was revalidated for version 0.9.5</para>
          </listitem>

          <listitem>
            <para>11.03.2008: False documentation updated:
            <option>--omit-corrupt-edges</option> is outdated; use
            <option>--dismiss-loading-errors</option> instead</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>function</sgmltag>-tag was removed for version
            0.9.9; a warning is generated when this attribute is used</para>
          </listitem>
        </itemizedlist>

        <sect3 id="user_chp04-xml_descriptions-edges-vclasses">
          <title>Defining allowed Vehicle Types</title>

          <para>Since version 0.9.5 you may allow/forbid explicite vehicle
          classes to use a lane. The information which vehicle classes are
          allowed on a lane may be specified within an edges descriptions file
          by embedding the list of lanes together with vehicle classes
          allowed/forbidden on them into these lanes' edge. Assume you want to
          allow only busses to use the leftmost lane of edge "2si" from the
          example above. Simply change this edge's definition into:</para>

          <programlisting>... previous definitions ...
   <sgmltag>&lt;edge id="2si" fromnode="m2" tonode="0" priority="3" nolanes="3" speed="13.89"&gt;</sgmltag>
      <sgmltag>&lt;lane id="2" allow="bus"/&gt;</sgmltag>
   <sgmltag>&lt;edge&gt;</sgmltag>
... further definitions ...
</programlisting>

          <para>If you would like to disallow passenger cars and taxis, the
          following snipplet would do it:</para>

          <programlisting>... previous definitions ...
   <sgmltag>&lt;edge id="2si" fromnode="m2" tonode="0" priority="3" nolanes="3" speed="13.89"&gt;</sgmltag>
      <sgmltag>&lt;lane id="2" disallow="passenger;taxis"/&gt;</sgmltag>
   <sgmltag>&lt;edge&gt;</sgmltag>
... further definitions ...
</programlisting>

          <para>The definition of a lane contains by now the following
          attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: The enumeration id of the lane (0
              is the rightmost lane,
              <replaceable>&lt;NUMBER_LANES&gt;</replaceable>-1 is the
              leftmost one)</para>
            </listitem>

            <listitem>
              <para><sgmltag>allow</sgmltag>: The list of explicitely allowed
              vehicle classes</para>
            </listitem>

            <listitem>
              <para><sgmltag>disallow</sgmltag>: The list of explicitely
              disallowed vehicle classes</para>
            </listitem>
          </itemizedlist>

          <para>Both the allowed and the disallowed attributes assume to get a
          list of vehicle class names devided by a ';'. See "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml#user_chp06-management-vclasses">Vehicle
          Classes</ulink>" for further information about allowed vehicle
          classes and their usage.</para>

          <caution>
            <para>This is a new feature. Its usage and the way it works will
            surely change in the future.</para>
          </caution>

          <para>Examples: none yet</para>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>The possibility to define which vehicle classes are
              allowed on a lane was added in version 0.9.5</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>

      <sect2 id="user_chp04-xml_descriptions-types" revision="0.9.6">
        <title>Types Descriptions</title>

        <para>As mentioned, road types are meant to be used to ease the
        definition of edges. As described above, the description of an edge
        should include information about the number of lanes, the maximum
        speed allowed on this edge and the edge's priority. To avoid the
        explicit definition of each parameter for every edge, one can use road
        types, which encapsulate these parameter under a given name. The
        format of this definition is: <sgmltag>&lt;type
        id="<replaceable>&lt;STRING&gt;</replaceable>"
        nolanes="<replaceable>&lt;INT&gt;</replaceable>"
        speed="<replaceable>&lt;FLOAT&gt;</replaceable>"
        priority="<replaceable>&lt;UINT&gt;</replaceable>"/&gt;</sgmltag>.</para>

        <para>The attributes of a type are of course exactly the same as for
        edges themselves:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the road type; may be
              any character string</para>
            </listitem>

            <listitem>
              <para><sgmltag>nolanes</sgmltag>: The number of lanes of the
              referencing must be an integer value</para>
            </listitem>

            <listitem>
              <para><sgmltag>speed</sgmltag>: The maximum speed allowed on the
              referencing edge in m/s; must be a floating point number</para>
            </listitem>

            <listitem>
              <para><sgmltag>priority</sgmltag>: The priority of the
              referencing edge; must be a positive integer value</para>
            </listitem>
          </itemizedlist>The information about the nodes the edge starts and
        ends at is not given within the types' descriptions. They can only be
        set within the edge's attributes. Here's an example on referencing
        types in edge definitions:</para>

        <programlisting><sgmltag>&lt;edges&gt;</sgmltag>

   <sgmltag>&lt;edge id="1fi" fromnode="1" tonode="m1" type="b"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="1si" fromnode="m1" tonode="0" type="a"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="1o" fromnode="0" tonode="1" type="c"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="2fi" fromnode="2" tonode="m2" type="b"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="2si" fromnode="m2" tonode="0" type="a"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="2o" fromnode="0" tonode="2" type="c"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="3fi" fromnode="3" tonode="m3" type="b"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="3si" fromnode="m3" tonode="0" type="a"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="3o" fromnode="0" tonode="3" type="c"/&gt;</sgmltag>

   <sgmltag>&lt;edge id="4fi" fromnode="4" tonode="m4" type="b"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="4si" fromnode="m4" tonode="0" type="a"/&gt;</sgmltag>
   <sgmltag>&lt;edge id="4o" fromnode="0" tonode="4" type="c"/&gt;</sgmltag>

<sgmltag>&lt;/edges&gt;</sgmltag>
</programlisting>

        <para>The according types file looks like this:</para>

        <programlisting><sgmltag>&lt;types&gt;</sgmltag>

   <sgmltag>&lt;type id="a" priority="3" nolanes="3" speed="13.889"/&gt;</sgmltag>
   <sgmltag>&lt;type id="b" priority="2" nolanes="2" speed="11.111"/&gt;</sgmltag>
   <sgmltag>&lt;type id="c" priority="1" nolanes="1" speed="11.111"/&gt;</sgmltag>

<sgmltag>&lt;/types&gt;</sgmltag>
</programlisting>

        <para>As you can see, we have joined the edges into three classes "a",
        "b", and "c" and have generated a description for each of these
        classes. Doing this, the generated net is similar to the one generated
        using the settings described above (example
        "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>"
        ).</para>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>The basic usage of types is shown in
            <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>
            where the same network is constructed once not using types
            (subfolder "<filename>cross_notypes</filename>") and once using
            them (subfolder "<filename>cross_usingtypes</filename>").</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>The <sgmltag>function</sgmltag>-tag was added for version
            0.9.5</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>function</sgmltag>-tag was removed for version
            0.9.9; a warning is generated when this attribute is used</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-xml_descriptions-connections">
        <title revision="0.9.6">Connection Descriptions</title>

        <sect3 id="user_chp04-xml_descriptions-connections-connections">
          <title>Explicite setting which Edge / Lane is connected to
          which</title>

          <para>If you have tried the version 0.7 you have possibly missed the
          possibility to specify the connections between the edges for
          yourself. This is now possible using a further file, the connections
          file. The connection file specifies which edges outgoing from a
          junction may be reached by a certain edge incoming into this
          junction and optionally also which lanes shall be used on both
          sides.</para>

          <para>If you only want to describe which edges may be reached from a
          certain edge, this definition could look something like this:
          <sgmltag>&lt;connection
          from="<replaceable>&lt;FROM_EDGE_ID&gt;</replaceable>"
          to="<replaceable>&lt;T0_EDGE_ID&gt;</replaceable>"/&gt;</sgmltag>.
          This tells <application>NETCONVERT</application> not only that
          vehicles shall be allowed to drive from the edge named
          <sgmltag><replaceable>&lt;FROM_EDGE_ID&gt;</replaceable></sgmltag>
          to the edge named
          <sgmltag><replaceable>&lt;TO_EDGE_ID&gt;</replaceable></sgmltag>,
          but also prohibits all movements to other edges from
          <sgmltag><replaceable>&lt;FROM_EDGE_ID&gt;</replaceable></sgmltag>,
          unless they are specified within this file. Let's repeat the
          parameters:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>from</sgmltag>: The name of the edge the vehicles
              leave</para>
            </listitem>

            <listitem>
              <para><sgmltag>to</sgmltag>: The name of the edge the vehicles
              may reach when leaving "from"</para>
            </listitem>
          </itemizedlist>

          <para>When using this kind of input,
          <application>NETCONVERT</application> will compute which lanes shall
          be used if any of the connected edges has more than one lane. If you
          also want to override this computation and set the lanes by hand,
          use the following: <sgmltag>&lt;connection
          from="&lt;FROM_EDGE_ID&gt;" to="&lt;T0_EDGE_ID&gt;"
          lane="&lt;INT_1&gt;:&lt;INT_2&gt;"/&gt;</sgmltag>. Here, a
          connection from the edge's
          "<sgmltag><replaceable>&lt;FROM_EDGE_ID&gt;</replaceable></sgmltag>"
          lane with the number
          <sgmltag><replaceable>&lt;INT_1&gt;</replaceable></sgmltag> is build
          to the lane
          <sgmltag><replaceable>&lt;INT_2&gt;</replaceable></sgmltag> of the
          edge
          "<sgmltag><replaceable>&lt;TO_EDGE_ID</replaceable>&gt;</sgmltag>".
          Lanes are counted from the right (outer) to the left (inner) side of
          the road beginning with 0. Again the parameter:</para>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para><sgmltag>from</sgmltag>: The name of the edge the
                vehicles leave</para>
              </listitem>

              <listitem>
                <para><sgmltag>to</sgmltag>: The name of the edge the vehicles
                may reach when leaving "from"</para>
              </listitem>

              <listitem>
                <para><sgmltag>lane</sgmltag>: the numbers of the connected
                lanes, separated with ':'; lanes are counter from right to
                left beginning with 0</para>
              </listitem>
            </itemizedlist></para>

          <para>There are two examples within the distribution. Both use the
          nodes and edges descriptions from the example located in
          "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename>".
          The junction in the center of this example looks like shown within
          the next figure. We will now call it the "unconstrained network"
          because all connections and turnarounds are computed using the
          default values.</para>

          <figure id="img_connections_unconstrained">
            <title>Unconstrained Network (zoom=2200)</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="./gfx/user/cross3l_unconstrained_small.gif"
                           format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The example
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_edge2edge_conns/</filename>"
          shows what happens when one uses connections to limit the number of
          reachable edges. To do this we built a connections file where we say
          that the horizontal edges ("1si" and "2si") have only connections to
          the edges right to them and the edge in straight direction. The file
          looks like this:</para>

          <programlisting><sgmltag>&lt;connections&gt;</sgmltag>

   <sgmltag>&lt;connection from="1si" to="3o"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="1si" to="2o"/&gt;</sgmltag>

   <sgmltag>&lt;connection from="2si" to="4o"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="2si" to="1o"/&gt;</sgmltag>

<sgmltag>&lt;/connections&gt;</sgmltag>
</programlisting>

          <para>As you may see in the next picture, the horizontal edges
          within the result network contain no left-moving connections.</para>

          <figure id="img_connections_edge2edge">
            <title>Network with explicit edge-2-edge connections</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="./gfx/user/cross3l_edge2edge_conns_small.gif"
                           format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>In the second example located in
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_laneslane_conns/</filename>"
          we additionally describe which lanes shall be connected. The
          according connections file says that the connections going straight
          shall be start at the second lane of the incoming edges:</para>

          <programlisting><sgmltag>&lt;connections&gt;</sgmltag>

   <sgmltag>&lt;connection from="1si" to="3o" lane="0:0"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="1si" to="2o" lane="2:0"/&gt;</sgmltag>

   <sgmltag>&lt;connection from="2si" to="4o" lane="0:0"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="2si" to="1o" lane="2:0"/&gt;</sgmltag>

<sgmltag>&lt;/connections&gt;</sgmltag>
</programlisting>

          <para>The built network looks like this:</para>

          <figure id="img_connections_lane2lane">
            <title>Network with explicit lane-2-lane connections</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="./gfx/user/cross3l_lane2lane_conns_small.gif"
                           format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <warning>
            <para>Please do not use both types of connection declarations
            (those with an <sgmltag>lane</sgmltag> attribute and those
            without) for the same from-edge! The behaviour is not verified and
            tested for these settings.</para>
          </warning>

          <para>Examples (compare both to
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_unconstrained/</filename>):</para>

          <itemizedlist>
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_edge2edge_conns/</filename>
              shows how edge-to-edge connections may be specified</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_lane2lane_conns/</filename>
              shows how lane-to-lane connections may be specified</para>
            </listitem>
          </itemizedlist>

          <para>Recent Changes:</para>

          <itemizedlist>
            <listitem>
              <para>A bug which sometimes yielded in a reassignment of
              connections is patched in version 0.9.3</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp04-xml_descriptions-connections-prohibitions">
          <title>Setting Connection Priorities</title>

          <para>Since version 0.9.6 you can also let vehicles passing a
          connection between two edges wait for another stream. Let's take
          another look at "Network with explicit edge-2-edge connections"
          above. Here, all right-moving vehicles may drive. The following
          definition within the connections file lets vehicles on vertical
          edges moving right wait for those which move straight on horizontal
          edges:</para>

          <programlisting><sgmltag>&lt;connections&gt;</sgmltag>

   <remark>&lt;!-- The next four connection definitions are same as in 
        "Network with explicit edge-2-edge connections" --&gt;</remark>
   <sgmltag>&lt;connection from="1si" to="3o"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="1si" to="2o"/&gt;</sgmltag>

   <sgmltag>&lt;connection from="2si" to="4o"/&gt;</sgmltag>
   <sgmltag>&lt;connection from="2si" to="1o"/&gt;</sgmltag>

   <remark>&lt;!-- now, let's prohibit the vertical connections by the horizontal --&gt;</remark>
   <remark>&lt;!-- prohibit moving right from top to left by straight from right to left --&gt;</remark>
   &lt;prohibition prohibitor="2si-&gt;1o" prohibited="4si-&gt;1o"/&gt;
   <remark>&lt;!-- prohibit moving straight from top to bottom by straight from right to left --&gt;</remark>
   &lt;prohibition prohibitor="2si-&gt;1o" prohibited="4si-&gt;3o"/&gt;
   <remark>&lt;!-- prohibit moving left from top to right by straight from right to left --&gt;</remark>
   &lt;prohibition prohibitor="2si-&gt;1o" prohibited="4si-&gt;2o"/&gt;

   <remark>&lt;!-- prohibit moving right from bottom to right by straight from left to right --&gt;</remark>
   &lt;prohibition prohibitor="1si-&gt;2o" prohibited="3si-&gt;2o"/&gt;
   <remark>&lt;!-- prohibit moving straight from bottom to top by straight from left to right --&gt;</remark>
   &lt;prohibition prohibitor="1si-&gt;2o" prohibited="3si-&gt;4o"/&gt;
   <remark>&lt;!-- prohibit moving left from bottom to right by straight from left to right --&gt;</remark>
   &lt;prohibition prohibitor="1si-&gt;2o" prohibited="3si-&gt;1o"/&gt;

<sgmltag>&lt;/connections&gt;</sgmltag>
</programlisting>

          <para>As one may see, it was necessary to prohibit all connections
          from a vertical edge by the counter-clockwise straight connection on
          a horizontal edge because otherwise the vehicles on the horizontal
          edge want to wait due to right-before-left - rule. The network looks
          like this:</para>

          <figure id="img_connections_prohibitions">
            <title>Network with explicite prohibitions</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="./gfx/user/cross3l_prohibitions_small.gif"
                           format="GIF" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>The syntax of a prohibition-tag is: <sgmltag>&lt;prohibition
          prohibitor="<replaceable>&lt;PROHIBITING_FROM_EDGE_ID&gt;</replaceable>-&gt;<replaceable>&lt;PROHIBITING_TO_EDGE_ID&gt;</replaceable>"
          prohibited="<replaceable>&lt;PROHIBITED_FROM_EDGE_ID&gt;</replaceable>-&gt;<replaceable>&lt;PROHIBITED_TO_EDGE_ID&gt;</replaceable>"/&gt;</sgmltag>.
          This means we define two connections (edge-to-edge), the prohibiting
          one (<sgmltag>prohibitor</sgmltag>) and the prohibited
          (<sgmltag>prohibited</sgmltag>). Each connection is defined by a
          from-edge and a to-edge, divided by "-&gt;".</para>

          <para>Examples (compare to
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_unconstrained/</filename>):</para>

          <itemizedlist>
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/connections/cross3l_prohibitions/</filename>
              shows how prohibitions may be specified</para>
            </listitem>
          </itemizedlist>

          <para>Recent Changes:</para>

          <itemizedlist>
            <listitem>
              <para>The possibility to add prohibitions was implemented for
              version 0.9.6</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>

      <sect2 id="user_chp04-xml_descriptions-running" revision="0.9.5">
        <title>Building the Network</title>

        <para>After you have generated the files you need being at least the
        edges and the nodes-files and optionally also a type and/or a
        connections file you should run <application>NETCONVERT</application>
        to build the network. The call should look like:</para>

        <screen>netconvert --xml-node-files=MyNodes.nod.xml --xml-edge-files=MyEdges.edg.xml \
   --output-file=MySUMONet.net.xml</screen>

        <para>if you only use edges and nodes. Types and connections may be
        given as:</para>

        <screen>netconvert --xml-node-files=MyNodes.nod.xml --xml-edge-files=MyEdges.edg.xml \
   --xml-connection-files=MyConnections.con.xml --xml-type-files=MyTypes.typ.xml \
   --output-file=MySUMONet.net.xml</screen>

        <para>Maybe your edge definitions are incomplete or buggy. If you
        still want to import your network, you can try passing
        "<option>--dismiss-loading-errors</option>" to
        <application>NETCONVERT</application>. In this case, edges which are
        not defined properly, are omitted, but
        <application>NETCONVERT</application> tries to build the network
        anyway. You may also flip the network around the horizontal axis. Use
        option "<option>--flip-y</option>" for this.</para>

        <para>You may also use abbreviations for the option names. These
        abbreviations and options used when building SUMO-networks from own
        XML-descriptions are:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --xml-node-files | --xml-nodes | -n )
            <replaceable>&lt;NODES_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the given file as the source of specification node
              positions and types. <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --xml-edge-files | --xml-edges | -e )
            <replaceable>&lt;EDGES_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the given file as the source of specification of
              roads connecting nodes. <remark>Optional, type:filename,
              default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --xml-connection-files | --xml-connections | -x )
            <replaceable>&lt;CONNECTIONS_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the given file as the source of specification how
              roads are connected (which lanes may be reached from which
              lanes). <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --xml-type-files | --types | -t )
            <replaceable>&lt;TYPES_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the given file as the source of edge types.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--dismiss-loading-errors</option></term>

            <listitem>
              <para>Continues with parsing although a corrupt edge occurred.
              This edge is not inserted and a warning is printed.
              <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--flip-y</option></term>

            <listitem>
              <para>Flips the y-position of nodes (and edges) along the
              y=zero-line. <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink url="#user_chp04-further_options-defaults">Setting
            default Values</ulink>"</para>
          </listitem>

          <listitem>
            <para><ulink url="#user_chp04-further_options-kmh_speed">"Using
            Edges' maximum Speed Definitions in km/h"</ulink></para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>
        </itemizedlist>

        <para>Examples:</para>

        <para>Almost all networks within the
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/</filename>
        - folder. Additionally some examples that cover the mentioned topics
        are:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>On using types:</para>

            <itemizedlist>
              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_notypes/</filename></para>
              </listitem>

              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/types/cross_usingtypes/</filename></para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>On using speed definition in km/h</para>

            <itemizedlist>
              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/cross_notypes_kmh/</filename></para>
              </listitem>

              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/cross_usingtypes_kmh/</filename></para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>On using edge shapes</para>

            <itemizedlist>
              <listitem>
                <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuild/shapes/hokkaido-japan/</filename></para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><option>--xml-type-files</option> was named
            <option>--type-file</option> in versions earlier than 0.9.2</para>
          </listitem>

          <listitem>
            <para>In the previous examples the option for nodes inclusion was
            misspelled (<option>--xml-nodes-files</option> is incorrect,
            <option>--xml-node-files</option> is right). Thanks to Leander
            Verhofstadt to recognize this.</para>
          </listitem>

          <listitem>
            <para>An error in this documentation has been removed for version
            0.9.5</para>
          </listitem>

          <listitem>
            <para>11.03.2008: False documentation updated:
            <option>--omit-corrupt-edges</option> is outdated; use
            <option>--dismiss-loading-errors</option> instead</para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>

    <sect1 id="user_chp04-other_input">
      <title>Converting other Input Data</title>

      <para>Large maps cannot be written by hand. We use maps from NavTech
      stored in the ArcView database format and maps from other simulation
      suppliers such as ptv within our projects and both are too large for
      this. We will now explain how to convert such data. We will not give any
      introduction into the formats/simulations themselves or compare their
      quality, but we will describe what is being imported and what problems
      may arise during the conversion.</para>

      <sect2 id="user_chp04-other_input-arcview" revision="0.9.5">
        <title>Importing ArcView-databases</title>

        <para><application>NETCONVERT</application> is able to directly read
        binary NavTech's ArcView databases. To convert such databases, you
        need at least three files: a file with the extension
        "<filename>.dbf</filename>", one with the extension
        ".<filename>shp</filename>" and one with the extension
        "<filename>.shx</filename>". Additionally, having a projection file
        with the extension ".proj" is of benefit. Since version 0.9.2 we do
        not suply the possibility to use different names for the files, so all
        files should have the same name besides the extension. To build your
        network from an ArcView-database use the option
        "<option>--arcview=<replaceable>&lt;FILENAME_WITHOUT_EXTENSION&gt;</replaceable></option>":</para>

        <screen>netconvert --arcview=MyArcViewDB --output-file=MySUMONet.net.xml</screen>

        <para>This call will force <application>NETCONVERT</application> to
        read the files "<filename>MyArcViewDB.dbf</filename>",
        "<filename>MyArcViewDB.shx</filename>", and
        "<filename>MyArcViewDB.shp</filename>" (and possibly
        "<filename>MyArcViewDB.proj</filename>" and to generate a network
        named "<filename>MySUMONet.net.xml</filename>". We have been asked
        which fields are read from ArcView-files. As said before, the reader
        was build to read ArcView-files containing road networks from NavTech.
        Due to this the following fields are used as default:</para>

        <table id="tab_read_arcview_entries">
          <title>Entries read by NETCONVERT</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>Entity Name</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>LINK_ID</entry>

                <entry>The id of an edge</entry>
              </row>

              <row>
                <entry>ST_NAME</entry>

                <entry>The name of an edge (not really used)</entry>
              </row>

              <row>
                <entry>REF_IN_ID</entry>

                <entry>The name of the node the edge starts at</entry>
              </row>

              <row>
                <entry>NREF_IN_ID</entry>

                <entry>The name of the node the edge ends at</entry>
              </row>

              <row>
                <entry>ST_TYP_AFT</entry>

                <entry>The type of the street (not really used)</entry>
              </row>

              <row>
                <entry>SPEED_CAT</entry>

                <entry>Speed category</entry>
              </row>

              <row>
                <entry>LANE_CAT</entry>

                <entry>Lane category</entry>
              </row>

              <row>
                <entry>FUNC_CLASS</entry>

                <entry>Road class, used to determine the priority</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>The problem is, that not all networks stored as
        ArcView-databases also use this naming scheme. During some further
        work with ArcView-networks, some further options got necessary which
        allow to name the fields the used database contains. The column the
        street name shall be read from may be specified using
        <option>--arcview.street-id
        <replaceable>&lt;STREET_NAME_COLUMN_NAME&gt;</replaceable></option>.
        You can also name the columns the names of the edges' origin and
        destination nodes shall be read from using <option>--arcview.from-id
        <replaceable>&lt;START_NODE_ID_COLUMN_NAME&gt;</replaceable></option>
        and <option>--arcview.to-id
        <replaceable>&lt;END_NODE_ID_COLUMN_NAME&gt;</replaceable></option>.
        If the no information about the starting/ending nodes is given and
        your database does not contain the columns "REF_IN_ID" and
        "NREF_IN_ID", nodes will be placed into the network at the positions
        the streets end.</para>

        <para>Since version 0.9.2 we also allow to override the rather "fuzzy"
        information about an edge's attributes from NavTech using own
        fields:</para>

        <table id="tab_overriding_navteq_entries">
          <title>Possible entries to override NavTech-information</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>Entity Name</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>SPEED</entry>

                <entry>The speed in m/s (see also <ulink
                url="#user_chp04-further_options-kmh_speed">"Using Edges'
                maximum Speed Definitions in km/h"</ulink>)</entry>
              </row>

              <row>
                <entry>NOLANES</entry>

                <entry>The number of lanes</entry>
              </row>

              <row>
                <entry>rnol</entry>

                <entry>The number of lanes</entry>
              </row>

              <row>
                <entry>PRIORITY</entry>

                <entry>The priority</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>This idea came from John Michael Calandrino.</para>

        <para>Some databases do not contain explicite information about the
        edges' attributes (number of lanes, priority, allowed speed) at all.
        Since version 0.9.4 you can use types as described in "<link
        linkend="user_chp04-xml_descriptions-types">Types Descriptions</link>"
        to describe your edges' attributes. You have to name the column to
        retrieve the information about a street's type from using
        <option>--arcview.type-id
        <replaceable>&lt;TYPE_ID_COLUMN_NAME&gt;</replaceable></option>. Of
        course, you have then to supply a type-file using
        <option>--xml-type-files
        <replaceable>&lt;TYPES_FILE&gt;</replaceable></option> (or
        <option>--types</option> or <option>-t</option> ). If something fails
        with the types or the explicite values, you can catch it using
        <option>--arcview.use-defaults-on-failure</option>. Besides this, you
        can specify your own connections using <option>--xml-connection-files
        <replaceable>&lt;CONNECTIONS_FILE&gt;</replaceable></option> (or
        <option>--xml-connections</option> or <option>-x</option>, see "<ulink
        url="#user_chp04-xml_descriptions-connections">Connection
        Descriptions</ulink>").</para>

        <para>ArcView-networks are (mostly?) encoded using geocoordinates
        which have to be converted to the cartesian coordinates system used by
        <application>SUMO</application>. Our current implementation is not yet
        fully developed, it works for the most cases, but you should not be
        surprised if it fails with a certain network. Contact us in this case,
        please. To describe how to convert the coordinates, you should know in
        which UTM-zone your network is located. Pass this to
        <application>NETCONVERT</application> using <option>--arcview.utm
        <replaceable>&lt;ORIGINAL_UTM_ZONE&gt;</replaceable></option>. If the
        conversion can not be initialised, you may additionally use
        <option>--arcview.guess-projection</option> to let
        <application>NETCONVERT</application> guess the conversion by him
        own.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--arcview
            <replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Loads definitions from
              "<filename><replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable>.shp</filename>",
              "<filename><replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable>.dbf</filename>"
              and
              "<filename><replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable>.shx</filename>".
              <remark>Optional, type:filename-prefix, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.street-id
            <replaceable>&lt;STREET_NAME_COLUMN_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>This option tells <application>NETCONVERT</application>
              which of the columns within the ArcView-database to read shall
              be used as the source of street names. If given, your database
              must contain this column, and the values must be unique for each
              street. <remark>Optional, type:string, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.from-id
            <replaceable>&lt;START_NODE_ID_COLUMN_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>This option tells <application>NETCONVERT</application>
              which of the columns within the ArcView-database to read shall
              be used as the source of the information from which node the
              street starts. If given, your database must contain this column.
              <remark>Optional, type:string, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.to-id
            <replaceable>&lt;END_NODE_ID_COLUMN_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>This option tells <application>NETCONVERT</application>
              which of the columns within the ArcView-database to read shall
              be used as the source of the information at which node the
              street ends. If given, your database must contain this column.
              <remark>Optional, type:string, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.type-id
            <replaceable>&lt;TYPE_ID_COLUMN_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>This option tells <application>NETCONVERT</application>
              which of the columns within the ArcView-database to read shall
              be used as the source of the information about the edge's type.
              Using this information, you can use type definitions as
              described in "<link
              linkend="user_chp04-xml_descriptions-types">Types
              Descriptions</link>" to determine your edges' attributes. If
              given, your database must contain this column. <remark>Optional,
              type:string, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.use-defaults-on-failure</option></term>

            <listitem>
              <para>If a type could not be resolved or is invalid or any of
              the explicite information about an edge was invalid, this option
              forces NETCONVERT to use the default type values for the current
              street. If not set, and one of the cases occures, the
              application's behaviour is not determined. <remark>Optional,
              type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.all-bidi</option></term>

            <listitem>
              <para>Forces <application>NETCONVERT</application> to insert all
              edges bidirectional. <remark>Optional (pregiven), type:bool,
              default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.utm
            <replaceable>&lt;ORIGINAL_UTM_ZONE&gt;</replaceable></option></term>

            <listitem>
              <para>This value describes in which UTM-zone your network is
              located. The default is 32 being a place somwhere in western
              Germany. You should change this value if importing networks
              located somewhere else in the world. <remark>Optional
              (pregiven), type:int, default: 32</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--arcview.guess-projection</option></term>

            <listitem>
              <para>If building a converter using the given UTM-zone fails,
              this option tries to guess the project if set. Of course, this
              may also fail... <remark>Optional (pregiven), type:bool,
              default: false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para><ulink url="#user_chp04-further_options-kmh_speed">"Using
            Edges' maximum Speed Definitions in km/h"</ulink></para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-xml_descriptions-types">Types
            Descriptions</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-xml_descriptions-connections">Connection
            Descriptions</ulink>"</para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>versions earlier than 0.9.2 allow to use an explicit
            filename for both the .dbf and the .shp file using
            "<option>--arcview-dbf</option>" and
            "<option>--arcview-shp</option>". This was abondonned, because of
            the need to use .shx-files, also.</para>
          </listitem>

          <listitem>
            <para>ArcView-import has been completely redesigned for version
            0.9.4. All options but "<option>--arcview
            <replaceable>&lt;ARCVIEW_PREFIX&gt;</replaceable></option>" are
            not available in versions prior to 0.9.4</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-other_input-vissim">
        <title>Importing VISSIM-networks</title>

        <para>Although Vissim is a microscopic simulation as SUMO is, it
        follows a completely different concept of modelling traffic. Due to
        this, the import is quite clumsy and may not work with all networks.
        Also, we have to insert additional edges into our networks to simulate
        the Vissim-parking places, originally being nodes, which we do not
        have. An usage example could be this one:</para>

        <screen>netconvert --vissim=<replaceable>&lt;VISSIM_FILE&gt;</replaceable> --output-file=<replaceable>MySUMOFile.net.xml</replaceable></screen>

        <para>Vissim-networks do possibly not contain explicit definitions of
        an edge's speed. We have to propagate once set velocities, but even
        then some edges' speeds may not be defined. The option
        "<option>--vissim.default-speed</option>" may change the default speed
        used in the case an edge's speed is not defined. The default value for
        this parameter is 13.89m/s, being around 50km/h. The second parameter
        "<option>--vissim.speed-norm</option>" describes the factor to
        multiply a described flows maximum velocity to gain the velocity to
        use. The default value is 1.</para>

        <para>Furthermore, as we have to use geometrical heuristics, a further
        factor steers the process of converting Vissim-networks: simply
        spoken, "<option>--vissim.offset</option>" holds the information how
        near two nodes must be (in meters) to be joined.</para>

        <para>During import, different actions must be done which may yield in
        some loss of data and may be watched in part by setting the verbose
        option. The additional warnings the import of Vissim-networks
        generates will be described in a further document.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--vissim
            <replaceable>&lt;FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Loads definitions from the given file (should end with
              ".inp"). <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--vissim.speed-norm
            <replaceable>&lt;SPEED_NORM_FACTOR&gt;</replaceable></option></term>

            <listitem>
              <para>A factor that is multiplied with a streams maximum
              velocity to determine the velocity to use for an edge.
              <remark>Optional (pregiven), type:float, default:
              1</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--vissim.default-speed
            <replaceable>&lt;DEFAULT_SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>The default speed to use for a street when no information
              is available. <remark>Optional (pregiven), type:float, default:
              13.89 (m/s)</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--vissim.offset
            <replaceable>&lt;MAX_JOIN_DISTANCE&gt;</replaceable></option></term>

            <listitem>
              <para>This value is used to determine whether two
              Vissim-structures are near enough to be joined into a node.
              <remark>Optional (pregiven), type:float, default: 5
              (m)</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Known problems:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Works with German networks only</para>
          </listitem>

          <listitem>
            <para>All actuated traffic lights are mapped onto the same type of
            traffic light (MSActuatedTrafficLight)</para>
          </listitem>

          <listitem>
            <para>Additional source and sink links must be build</para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet (we do not own a network we could give away
        for legal reasons)</para>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para><option>--vissim.speed-norm</option>,
            <option>--vissim.default-speed</option>, and
            <option>--vissim.offset</option> were named
            <option>--vissim-speed-norm</option>,
            <option>--vissim-default-speed</option>, and
            <option>--vissim-offset</option> in version prior to 0.9.6.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-other_input-visum">
        <title>Importing VISUM-networks</title>

        <para>Visum is a macroscopic simulation developed by ptv.
        <application>NETCONVERT</application> is capable to read
        VISUM-networks written as <filename>.net</filename> files. An usage
        import call could be this one:</para>

        <screen>netconvert --visum=<replaceable>&lt;VISUM_FILE&gt;</replaceable> --output-file=<replaceable>MySUMOFile.net.xml</replaceable></screen>

        <para>As the network description may not contain any information about
        the number of lanes, we have to generate it from the street's flow.
        The computation is done by dividing the flow through a fix value, 2000
        by default. This yields in a realistic network but fails on 'feeder
        roads' where vehicles are emitted.</para>

        <para>You can also specify your own connections using
        <option>--xml-connection-files
        <replaceable>&lt;CONNECTIONS_FILE&gt;</replaceable></option> (or
        <option>--xml-connections</option> or <option>-x</option>, see "<ulink
        url="#user_chp04-xml_descriptions-connections">Connection
        Descriptions</ulink>").</para>

        <para>Not all parts of the Visum-Format are read; below you'll find a
        table which contains the information which Visum-tables are
        imported.</para>

        <table id="tab_imported_visum_tables">
          <title>Imported VISUM-tables</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry>Table Name</entry>

                <entry>Description</entry>

                <entry>Imported values</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>VSYS</entry>

                <entry>Traffic modes</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>VSysCode (CODE)</entry>
                    </row>

                    <row>
                      <entry>VSysMode (TYP)</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>STRECKENTYP</entry>

                <entry>Edge types</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>Nr</entry>
                    </row>

                    <row>
                      <entry>v0-IV (V0IV)</entry>
                    </row>

                    <row>
                      <entry>Rang</entry>
                    </row>

                    <row>
                      <entry>Kap-IV (KAPIV)</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>KNOTEN</entry>

                <entry>Nodes</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>Nr</entry>
                    </row>

                    <row>
                      <entry>XKoord</entry>
                    </row>

                    <row>
                      <entry>YKoord</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>BEZIRK</entry>

                <entry>Districts</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>Nr</entry>
                    </row>

                    <row>
                      <entry>NAME (unused later)</entry>
                    </row>

                    <row>
                      <entry>Proz_Q</entry>
                    </row>

                    <row>
                      <entry>Proz_Z</entry>
                    </row>

                    <row>
                      <entry>XKoord</entry>
                    </row>

                    <row>
                      <entry>YKoord</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>STRECKE (STRECKEN)</entry>

                <entry>Edges</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>Nr</entry>
                    </row>

                    <row>
                      <entry>VonKnot (VonKnotNr)</entry>
                    </row>

                    <row>
                      <entry>NachKnot (NachKnotNr)</entry>
                    </row>

                    <row>
                      <entry>Typ (TypNr)</entry>
                    </row>

                    <row>
                      <entry>Einbahn</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>ANBINDUNG</entry>

                <entry>District connections</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>BezNr</entry>
                    </row>

                    <row>
                      <entry>KnotNr</entry>
                    </row>

                    <row>
                      <entry>Proz</entry>
                    </row>

                    <row>
                      <entry>t0-IV</entry>
                    </row>

                    <row>
                      <entry>Typ</entry>
                    </row>

                    <row>
                      <entry>Richtung</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>ABBIEGEBEZIEHUNG (ABBIEGER)</entry>

                <entry>Edge Connections</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>VonKnot (VonKnotNr)</entry>
                    </row>

                    <row>
                      <entry>UeberKnot (UeberKnotNr)</entry>
                    </row>

                    <row>
                      <entry>NachKnot (NachKnotNr)</entry>
                    </row>

                    <row>
                      <entry>VSysCode (VSYSSET)</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>STRECKENPOLY</entry>

                <entry>Edge geometries</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>VonKnot (VonKnotNr)</entry>
                    </row>

                    <row>
                      <entry>NachKnot (NachKnotNr)</entry>
                    </row>

                    <row>
                      <entry>INDEX</entry>
                    </row>

                    <row>
                      <entry>XKoord</entry>
                    </row>

                    <row>
                      <entry>YKoord</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>FAHRSTREIFEN</entry>

                <entry>Lane descriptions</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>KNOTNR</entry>
                    </row>

                    <row>
                      <entry>STRNR</entry>
                    </row>

                    <row>
                      <entry>FSNR</entry>
                    </row>

                    <row>
                      <entry>RICHTTYP</entry>
                    </row>

                    <row>
                      <entry>LAENGE</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>LSA (SIGNALANLAGE)</entry>

                <entry>TLS</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>Nr</entry>
                    </row>

                    <row>
                      <entry>Umlaufzeit (UMLZEIT)</entry>
                    </row>

                    <row>
                      <entry>StdZwischenzeit (STDZWZEIT)</entry>
                    </row>

                    <row>
                      <entry>PhasenBasiert</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>KNOTENZULSA (SIGNALANLAGEZUKNOTEN)</entry>

                <entry>Nodes-&gt;TLS</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>KnotNr</entry>
                    </row>

                    <row>
                      <entry>LsaNr</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>LSASIGNALGRUPPE (SIGNALGRUPPE)</entry>

                <entry>Signal groups</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>Nr</entry>
                    </row>

                    <row>
                      <entry>LsaNr</entry>
                    </row>

                    <row>
                      <entry>GzStart (GRUENANF)</entry>
                    </row>

                    <row>
                      <entry>GzEnd (GRUENENDE)</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>ABBZULSASIGNALGRUPPE (SIGNALGRUPPEZUABBIEGER)</entry>

                <entry>Edge connections-&gt;TLS</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>SGNR (SIGNALGRUPPENNR)</entry>
                    </row>

                    <row>
                      <entry>LsaNr</entry>
                    </row>

                    <row>
                      <entry>VonKnot / VONSTRNR</entry>
                    </row>

                    <row>
                      <entry>NachKnot / NACHSTRNR</entry>
                    </row>

                    <row>
                      <entry>UeberKnot (UeberKnotNr)</entry>
                    </row>

                    <row>
                      <entry>LsaNr</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>LSAPHASE (PHASE)</entry>

                <entry>Signal phases</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>Nr</entry>
                    </row>

                    <row>
                      <entry>LsaNr</entry>
                    </row>

                    <row>
                      <entry>GzStart (GRUENANF)</entry>
                    </row>

                    <row>
                      <entry>GzEnd (GRUENENDE)</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>LSASIGNALGRUPPEZULSAPHASE</entry>

                <entry>Signal groups-&gt;phases</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>PsNr</entry>
                    </row>

                    <row>
                      <entry>LsaNr</entry>
                    </row>

                    <row>
                      <entry>SGNR</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>

              <row>
                <entry>FAHRSTREIFENABBIEGER</entry>

                <entry>Lane-to-lane descriptions</entry>

                <entrytbl cols="1">
                  <tbody>
                    <row>
                      <entry>KNOT (KNOTNR)</entry>
                    </row>

                    <row>
                      <entry>VONSTR (VONSTRNR)</entry>
                    </row>

                    <row>
                      <entry>NACHSTR (NACHSTRNR)</entry>
                    </row>

                    <row>
                      <entry>VONFSNR</entry>
                    </row>

                    <row>
                      <entry>NACHFSNR</entry>
                    </row>
                  </tbody>
                </entrytbl>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--visum
            <replaceable>&lt;FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Loads definitions from the given file (should end with
              ".net"). <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-xml_descriptions-connections">Connection
            Descriptions</ulink>"</para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet (we do not own a network we could give away
        for legal reasons)</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Since version 0.9.4, <application>NETCONVERT</application>
            can also convert VISION-networks (VISUM version 0.9.3). Please
            remark for this case, that we do not have a VISION-network which
            contains TLS-definitions and due to this the import of these may
            fail.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-other_input-elmar">
        <title>Importing Elmar's converted NavTech-Files</title>

        <para>You can convert both the splitted and the unsplitted version of
        files generated by Elmar from NavTech-files. There seems to be no
        difference between the results in the networks' topologies, but the
        names of junctions and roads change. The option
        <option>--elmar</option> loads the splitted definitions,
        <option>--elmar2</option> the unsplitted. Both options await the
        prefix as generated by Elmar's converter, an optional path is allowed.
        Example:</para>

        <screen>netconvert --elmar=berlin_ --output-file=MySUMOFile.net.xml</screen>

        <para>Imports the descriptions of nodes from
        "<filename>berlin_nodes.txt</filename>" and the edges from
        "<filename>berlin_links.txt</filename>".</para>

        <para>You can also specify your own connections using
        <option>--xml-connection-files
        <replaceable>&lt;CONNECTIONS_FILE&gt;</replaceable></option> (or
        <option>--xml-connections</option> or <option>-x</option>, see "<ulink
        url="#user_chp04-xml_descriptions-connections">Connection
        Descriptions</ulink>").</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--elmar
            <replaceable>&lt;NET_PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Loads the splitted versions of the files behind
              <replaceable>&lt;NET_PREFIX&gt;</replaceable>. <remark>Optional,
              type:filename-prefix, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--elmar2
            <replaceable>&lt;NET_PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Loads the unsplitted versions of the files behind
              <replaceable>&lt;NET_PREFIX&gt;</replaceable>. <remark>Optional,
              type:filename-prefix, default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-xml_descriptions-connections">Connection
            Descriptions</ulink>"</para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet (we do not own a network we could give away
        for legal reasons)</para>
      </sect2>

      <sect2 id="user_chp04-other_input-tiger">
        <title>Importing TIGER-databases</title>

        <para>This import function is in a rather experimental state. We need
        someone who owns a network she/he knows and who could give us an
        advice whether the import work as expected. You still may try it out
        using the option
        <option>--tiger=<replaceable>&lt;FILE_PREFIX&gt;</replaceable></option>.</para>

        <para>You can also specify your own connections using
        <option>--xml-connection-files
        <replaceable>&lt;CONNECTIONS_FILE&gt;</replaceable></option> (or
        <option>--xml-connections</option> or <option>-x</option>, see "<ulink
        url="#user_chp04-xml_descriptions-connections">Connection
        Descriptions</ulink>").</para>

        <para>See also:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-importing_notls">Importing
            Networks without Traffic Light Logics</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-further_options-guessing_ramps">Guessing On- and
            Off-Ramps</ulink>"</para>
          </listitem>

          <listitem>
            <para>"<ulink url="#user_chp04-further_options-turnarounds">Adding
            Turnarounds</ulink>"</para>
          </listitem>

          <listitem>
            <para><link
            linkend="user_chp04-further_options-geocoordinates">Converting
            from Geocoordinates</link></para>
          </listitem>

          <listitem>
            <para>"<ulink
            url="#user_chp04-xml_descriptions-connections">Connection
            Descriptions</ulink>"</para>
          </listitem>
        </itemizedlist>

        <para>Examples: none yet</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp04-further_options">
      <title>Further NETCONVERT Options</title>

      <para><application>NETCONVERT</application> offers some more options to
      describe how the network shall be imported. The scope of some options
      does not cover all import types, though a list of valid import types for
      each option set is given.</para>

      <sect2 id="user_chp04-further_options-defaults">
        <title revision="0.9.6">Setting default Values</title>

        <para>We have mentioned, that edge parameter may be omitted and
        defaults will be used in this case. You have the possibility to define
        these defaults using the following options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --type | -T )
            <replaceable>&lt;DEFAULT_TYPE_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>The name of the default type of edges. <remark>Optional
              (pregiven), type:string, default: "Unknown"</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --lanenumber | -L )
            <replaceable>&lt;DEFAULT_LANE_NUMBER&gt;</replaceable></option></term>

            <listitem>
              <para>The number of lanes an edge has to use as default.
              <remark>Optional (pregiven), type:int, default:
              1</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --speed | -S )
            <replaceable>&lt;DEFAULT_MAX_SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>The maximum speed allowed on an edge in m/s to use as
              default. <remark>Optional (pregiven), type:float, default:
              13.9</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --priority | -P )
            <replaceable>&lt;DEFAULT_PRIORITY&gt;</replaceable></option></term>

            <listitem>
              <para>The default priority of an edge. <remark>Optional
              (pregiven), type: positive int, default: -1
              (unset)</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>These options may be used while importing the following
        formats:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>XML-descriptions</para>
            </listitem>
          </itemizedlist></para>

        <para>Examples: none yet</para>
      </sect2>

      <sect2 id="user_chp04-further_options-turnarounds">
        <title>Adding Turnarounds</title>

        <para>Normally, turnarounds are added as a possible edge continuations
        and play an important role during network building (see <ulink
        url="http://sumo.sourceforge.net/docs/bibliography.shtml#Krajzewicz2005_2">[Krajzewicz_et_al2005_2]</ulink>).
        Still, one may want not to add them. In this cases, it is possible to
        disallow their appending using option
        "<option>--no-turnarounds</option>".</para>

        <para>Specific option:</para>

        <variablelist>
          <varlistentry>
            <term>--no-turnarounds</term>

            <listitem>
              <para><remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>This options may be used while importing the following
        formats:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>ARCVIEW-data base files</para>
            </listitem>

            <listitem>
              <para>XML-descriptions</para>
            </listitem>
          </itemizedlist></para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>in versions earlier than 0.9.3, turnarounds were not added
            per default. Instead the option
            "<option>--append-turnarounds</option>" has forced
            <application>NETCONVERT</application> to add them.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-nogeometry">
        <title>Removing Geometry Nodes</title>

        <para>In most input networks one may find nodes where one street comes
        in and one with the same attributes goes out or where two parallel
        edges come in and two (with the same attributes) come out. Such nodes
        have mostly no meaning (maybe besides the additional possibility to
        make a U-turn) and may be removed. The removal of such nodes increases
        the simulation speed due to a smaller number of edges to process
        during each time step. To remove such nodes and join the incoming and
        outgoing edges use "<option>--remove-geometry</option>". The removal
        of nodes preserves the geometry of edges by ading a further geometry
        point at the removed node's position.</para>

        <para>Specific option:</para>

        <variablelist>
          <varlistentry>
            <term>( --remove-geometry | -R )</term>

            <listitem>
              <para><remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>This options may be used in conjunction with all import
        formats.</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>in versions earlier than 0.9.3, geometry nodes were removed
            by default. One could change this behaviour using the
            "<option>--no-node-removal</option>" option.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-kmh_speed">
        <title>Using Edges' maximum Speed Definitions in km/h</title>

        <para>Some people do not like to use speed definitions in m/s. If you
        want to define the speeds allowed on your edges in km/h instead, you
        should pass the following option to
        <application>NETCONVERT:</application></para>

        <variablelist>
          <varlistentry>
            <term>--speed-in-kmh</term>

            <listitem>
              <para><remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>This option may be used while importing the following
        formats:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>ARCView-databases</para>
            </listitem>

            <listitem>
              <para>XML-descriptions</para>
            </listitem>
          </itemizedlist></para>

        <para>Examples:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>\data\examples\netbuild\cross_notypes_kmh</filename>
              in comparison to
              <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>\data\examples\netbuild\cross_notypes</filename></para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>\data\examples\netbuild\cross_usingtypes_kmh</filename>
              in comparison to
              <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>\data\examples\netbuild\cross_usingtypes</filename></para>
            </listitem>
          </itemizedlist></para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><option>--speed-in-kmh</option> was named
            <option>--speed-in-km</option> in versions earlier than
            0.9.2</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-importing_notls">
        <title>Importing Networks without Traffic Light Logics</title>

        <para>Some of the supported network formats supply information about
        the logic of the traffic lights, other do not. Due to this, we have to
        compute the traffic lights by our own. Doing this, we do not only have
        to compute the plans, but of course also, on which junction traffic
        lights are positioned. There are several options steering this
        procedure. At first, you have to tell
        <application>NETCONVERT</application>/<application>NETGEN</application>
        that you wish him to guess positions of traffic lights. This is done
        using the "<option>--guess-tls</option>"-option. Then, you have the
        possibility to describe the junctions at which you think a tls shall
        be placed using description of incoming and outgoing edges:
        "<option>--tls-guess.no-incoming-min</option>",
        "<option>--tls-guess.no-incoming-max</option>",
        "<option>--tls-guess.no-outgoing-min</option>" and
        "<option>--tls-guess.no-outgoing-max</option>" constraint the building
        of a tls by the number of the lanes incoming/outgoing edges have. All
        these four options require an int as parameter. Furthermore, you may
        constraint the junctions by giving the minimum/maximum of allowed
        speed on edges that participate:
        "<option>--tls-guess.min-incoming-speed</option>",
        "<option>--tls-guess.max-incoming-speed</option>",
        "<option>--tls-guess.min-outgoing-speed</option>", and
        "<option>--tls-guess.max-outgoing-speed</option>".</para>

        <caution>
          <para>No, we do not have a validated set of these option's settings,
          yet.</para>
        </caution>

        <para>You may also set junctions as tls-controlled using
        "<option>--explicite-tls</option>" or as uncontrolled using
        "<option>--explicite-no-tls</option>". Both options assume to get a
        list of node names divided by ',' as parameter. The behaviour when a
        node is in both lists is undefined.</para>

        <para>If you want to know where traffic lights have been inserted and
        your network is too large to evaluate this by hand, you can force
        <application>NETCONVERT</application> to write a list of POIs where
        each POI is placed on a tls-controlled junction. This allows you to
        tae a look at all the positions tls have been inserted at. The option
        for doing this is <option>--tls-poi-output
        <replaceable>&lt;FILENAME&gt;</replaceable></option> where
        <replaceable>&lt;FILENAME&gt;</replaceable> is the filename to write
        the POIs into.</para>

        <para>Normally, only one traffic lights logic (phases definition) is
        computed per a traffic lights controlled junction, but the algorithm
        we use is able to compute several logics. To force the computation of
        all possible logics, use "<option>--all-logics</option>". Remind, that
        all logics will be written to the network file and that we have no
        tools for further procesing of these logics.</para>

        <para>During the computation of tls-logics among other information we
        have to guess the duration of the phases. The options
        "<option>--traffic-light-green</option>" and
        "<option>--traffic-light-yellow</option>" allow you to give the
        durations of green and yellow lights. Both options assume the duration
        in s as an int as parameter. The duration of having red is dependant
        to the number of other phases and their green and yellow phase
        durations. The green phase length has a default of 20s, yellow lights
        are - if no value is set for this option - computed using the
        "<option>--min-decel</option>" - value described below.</para>

        <para>One has to remind one thing: dead times are necessary to avoid
        collisions of vehicles which do not manage to break as they are too
        near to the traffic light when it switches to red. This time may be
        computed, and is, but depends on the maximum deceleration possibility
        of the vehicles used. As this parameter is not known to the network
        builder at all - the vehicle types are supported to the simulation
        only - the option "<option>--min-decel</option>" (or
        <option>-D</option> for short) is used to set the minimum deceleration
        of vehicles. The default is 3.0 in m/s^2.</para>

        <para>There is no possibility to compute or estimate green light
        districts, yet. You have only the options to shift the computed phases
        by half of their duration or by a quarter of their duration. The
        options for this are: "<option>--tl-logics.half-offset</option>" and
        "<option>--tl-logics.quarter-offset</option>". Both options assume to
        get a list of node names divided by ',' as parameter. The behaviour
        when a node is in both lists or if the node is not meant to be
        controlled by a tls is undefined.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--guess-tls</option></term>

            <listitem>
              <para>Forces NETCONVERT/NETGEN to guess whether a junction is
              controlled by a tls or not. <remark>Optional, type:bool,
              default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--tls-guess.min-incoming-speed
            <replaceable>&lt;SPEED&gt;</replaceable>,
            --tls-guess.max-incoming-speed
            <replaceable>&lt;SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>Sets the minimum and the maximum of the velocity a
              junction's incoming edges may have if the junction shall be
              tls-controlled in m/s. <remark>Optional (pregiven), type:float,
              defaults: --tls-guess.min-incoming-speed: 40/3.6,
              --tls-guess.min-incoming-speed: 69/3.6</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--tls-guess.min-outgoing-speed
            <replaceable>&lt;SPEED&gt;</replaceable>,
            --tls-guess.max-outgoing-speed
            <replaceable>&lt;SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>Sets the minimum and the maximum of the velocity a
              junction's outgoing edges may have if the junction shall be
              tls-controlled in m/s. <remark>Optional (pregiven), type:float,
              defaults: --tls-guess.min-outgoing-speed: 40/3.6,
              --tls-guess.max-outgoing-speed: 69/3.6</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--tls-guess.no-incoming-min
            <replaceable>&lt;LANE_NUMBER&gt;</replaceable>,
            --tls-guess.no-incoming-max
            <replaceable>&lt;LANE_NUMBER&gt;</replaceable></option></term>

            <listitem>
              <para>Sets the minimum and the maximum number of a junction's
              incoming edges to allow the junction to be controlled by a tls.
              <remark>Optional (pregiven), type:int, defaults:
              --tls-guess.no-incoming-min: 2, --tls-guess.no-incoming-max:
              5</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--tls-guess.no-outgoing-min
            <replaceable>&lt;LANE_NUMBER&gt;</replaceable>,
            --tls-guess.no-outgoing-max
            <replaceable>&lt;LANE_NUMBER&gt;</replaceable></option></term>

            <listitem>
              <para>Sets the minimum and the maximum number of a junction's
              outgoing edges to allow the junction to be controlled by a tls.
              <remark>Optional (pregiven), type:int, defaults:
              --tls-guess.no-outgoing-min: 1, --tls-guess.no-outgoing-max:
              5</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--explicite-tls
            <replaceable>&lt;JUNCTION_ID&gt;</replaceable>[,<replaceable>&lt;JUNCTION_ID&gt;</replaceable>]*</option></term>

            <listitem>
              <para>Informs the network builder that the given junctions shall
              be treated as being controlled by traffic lights, even if they
              do not match the tls-guess rules. <remark>Optional, type:list of
              strings, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--explicite-no-tls
            <replaceable>&lt;JUNCTION_ID&gt;</replaceable>[,<replaceable>&lt;JUNCTION_ID&gt;</replaceable>]*</option></term>

            <listitem>
              <para>Informs the network builder that the given junctions shall
              be treated as NOT being controlled by traffic lights, even if
              they match the tls-guess rules. <remark>Optional, type:list of
              strings, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--all-logics</option></term>

            <listitem>
              <para>Computes and saves all possible cliques and phases for a
              traffic light instead of the fastest one only. <remark>Optional,
              type:bool, default: false</remark></para>

              <caution>
                <para>This process may be very time consuming.</para>
              </caution>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --min-decel | -D ) <replaceable
            class="parameter">&lt;FLOAT&gt;</replaceable></option></term>

            <listitem>
              <para>he minimum deceleration value for vehicles in m/s^2.
              <remark>Optional (pregiven), type:float, default:
              3</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--traffic-light-green
            <replaceable>&lt;DURATION&gt;</replaceable></option></term>

            <listitem>
              <para>The duration of green lights. <remark>Optional, type:int,
              default: none (20s internally)</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--traffic-light-yellow
            <replaceable>&lt;DURATION&gt;</replaceable></option></term>

            <listitem>
              <para>The duration of yellow lights; overrides
              <option>--min-decel</option>. <remark>Optional, type:int,
              default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--tls-poi-output
            <replaceable>&lt;FILENAME&gt;</replaceable></option></term>

            <listitem>
              <para>If given, <application>NETCONVERT</application> will write
              position of nodes equipped with tls into
              <replaceable>&lt;FILENAME&gt;</replaceable>. <remark>Optional,
              type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>These options may be used while importing the following
        formats:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>ARCVIEW-data base files</para>
            </listitem>

            <listitem>
              <para>XML-descriptions</para>
            </listitem>

            <listitem>
              <para>Elmar-files</para>
            </listitem>

            <listitem>
              <para>VISUM-networks</para>
            </listitem>
          </itemizedlist></para>

        <para>Recent changes:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>Since version 0.9.10, <option>--explicite-tls</option> and
              <option>--explicite-no-tls</option> are divided using
              ','.</para>
            </listitem>

            <listitem>
              <para>Since version 0.9.10,
              <option>--tl-logics.half-offset</option> and
              <option>--tl-logics.quarter-offset</option> are divided using
              ','.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2 id="user_chp04-further_options-guessing_ramps">
        <title>Guessing On- and Off-Ramps</title>

        <para>Most of the imported network descriptions do not have
        information about highway on- and off-ramps. You can force
        <application>NETCONVERT</application> to guess where on- and off-ramps
        shall be build. To enable this, use the option
        "<option>--guess-ramps</option>". The algorithm assumes that an
        on-ramp shall be build on highway junctions with one incoming and one
        outgoing highway edge and one incoming minor edge and that an off-ramp
        shall be build on highway junctions with one incoming and one outgoing
        highway edge and one outgoing minor edge. You can constrain what a
        highway is by giving its minimum speed of this edge using
        "<option>--ramp-guess.min-highway-speed</option>" and what a minor
        edge is by giving its maximum speed using
        "<option>--ramp-guess.max-ramp-speed</option>". Both options assume a
        float parameter being the speed. Furthermore,
        "<option>--ramp-guess.ramp-length</option>" tells
        <application>NETCONVERT</application> how long the added ramp shall be
        in meters.</para>

        <note>
          <para>Normally, we keep <option>--ramp-guess.ramp-length</option>
          unset and let the geometry computation do the rest.</para>
        </note>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--guess-ramps</option></term>

            <listitem>
              <para>Forces
              <application>NETCONVERT</application>/<application>NETGEN</application>
              to guess whether a junction is controlled by a tls or not.
              <remark>Optional, type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--ramp-guess.max-ramp-speed
            <replaceable>&lt;SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>Defines the maximum speed an edge may have in order to be
              a ramp in m/s. The default of -1 tells
              <application>NETCONVERT</application> that all edges may be
              potential ramps. <remark>Optional (pregiven), type:float,
              default: -1</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--ramp-guess.min-highway-speed
            <replaceable>&lt;SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>Defines the minimum speed an edge may have in order to be
              a highway in m/s. <remark>Optional (pregiven), type:float,
              default: 80/3.6</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--ramp-guess.ramp-length
            <replaceable>&lt;LENGTH&gt;</replaceable></option></term>

            <listitem>
              <para>Sets the length of the ramps to build in meters.
              <remark>Optional (pregiven), type:float, defaults:
              100</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>These options may be used in conjunction with all import
        formats.</para>

        <para>Examples: none yet</para>
      </sect2>

      <sect2 id="user_chp04-further_options-geocoordinates">
        <title>Converting from Geocoordinates</title>

        <para>Most professional networks are not stored using cartesian, but
        geo-coordinates. Since version 0.9.4 NETCONVERT is able to deal with
        such positions. NETCONVERT uses herefor the projection library
        "PROJ.4". This is important for you as a user, because you may have to
        describe the original projection of your file and when doing this, you
        have to describe it using the options offered by PROJ.4. In order to
        enable the reprojection use the option
        <option>--use-projection</option>. You can then add parameter for the
        projection using <option>--proj
        <replaceable>&lt;STRING&gt;</replaceable></option>. The default for
        the projection is "+proj=utm +ellps=bessel +units=m". That means, that
        NETCONVERT assumes the network to be encoded using "universal traverse
        mercator" and the Bessel ellipsoid what resembles what is known as
        WGS84 (as far as we have understood it). Please remark, that when
        giving own description, you should embed it into "" for passing all
        the arguments to PROJ.4.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--use-projection</option></term>

            <listitem>
              <para>Enables reprojection of the network's coordinates.
              <remark>Optional, type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--proj
            <replaceable>&lt;STRING&gt;</replaceable></option></term>

            <listitem>
              <para>Defines projection. <remark>Optional (pregiven),
              type:string, default: "+proj=utm +ellps=bessel
              +units=m"</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>These options may be used in conjunction with the following
        import formats:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Elmar &amp; Elmar2</para>
          </listitem>

          <listitem>
            <para>ArcView</para>
          </listitem>

          <listitem>
            <para>Tiger</para>
          </listitem>

          <listitem>
            <para>Visum</para>
          </listitem>

          <listitem>
            <para>XML</para>
          </listitem>
        </itemizedlist>

        <caution>
          <para>This is a new feature. Its usage and the way it works will
          surely change in the future.</para>
        </caution>

        <para>Examples: none yet</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>The default for the proj-option changed in 0.9.7 from
            "+proj=utm +zone=33 +ellps=bessel +units=m" to "+proj=utm
            +ellps=bessel +units=m"</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-internal_lanes" revision="0.9.5">
        <title>Adding inner-junction Traffic</title>

        <para>If you already know <application>SUMO</application> or if you
        have taken a look at some of the examples you may have noticed that
        vehicles "jump" over a junction instead of driving over them. This
        behaviour was quite appropriate for simulating large scenarios as in
        these cases the simulation error could be neglected (at least we have
        neglected it). Since version 0.9.5 <application>SUMO</application> is
        capable to simulate traffic over the junctions in a way you know it
        from reality. Because inserting inner lanes into a network
        dramatically increases the network's size, junction-internal lanes are
        not build by default. You can allow their building using the option
        <option>--add-internal-links</option> (or <option>-I</option> for
        short).</para>

        <note>
          <para>Please note that you also have to enable the usage of internal
          lanes within the simulation.</para>
        </note>

        <para>Specific Options:</para>

        <variablelist>
          <varlistentry>
            <term>( --add-internal-links | -I )</term>

            <listitem>
              <para>Enables building of junction-internal lanes.
              <remark>Optional, type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Examples:</para>

        <para>Meanwhile all of the examples included in the distribution are
        build with this option set.</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Inner-junction traffic was revalidated for version
            0.9.5</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-input_constraints"
             revision="0.9.5">
        <title>Constraining the Input</title>

        <para><application>NETCONVERT</application> offers you some
        possibillities to constrain the read edges what is quite needful if
        one has a large street network but only wants to simulate a part of it
        or only the major roads. The first possibility to constrain the input
        is to name all the edges you want to keep. You can either do this on
        the command line/within your configuration directly using
        <option>--keep-edges
        <replaceable>&lt;EDGE_ID&gt;[,&lt;EDGE_ID&gt;]+</replaceable></option>
        where each <option><replaceable>&lt;EDGE_ID&gt;</replaceable></option>
        represents the id of an edge you want to keep or you can save this
        list into a file where each id is stored in a seperate line and then
        let <application>NETCONVERT</application> read this file using
        <option>--keep-edges.input-file
        <replaceable>&lt;FILENAME&gt;</replaceable></option>. In the case you
        are joining edges using <option>--remove-geometry</option> (see "<link
        linkend="user_chp04-further_options-nogeometry">Removing Geometry
        Nodes</link>"), you may also be interested in the option
        <option>--keep-edges.postload</option> which forces
        <application>NETCONVERT</application> to join the edges first and
        remove the unwished afterwards.</para>

        <para>It is also possible to constrain the imported edges by giving a
        minimum velocity that is allowed on an edge in order to include this
        edge into the generated network. Use <option>--edges-min-speed
        <replaceable>&lt;MIN_SPEED&gt;</replaceable></option> for this where
        <option><replaceable>&lt;MIN_SPEED&gt;</replaceable></option> is the
        minimum velocity an edge must allow in order to be included in the
        output in m/s.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--keep-edges
            <replaceable>&lt;EDGE_ID&gt;[,&lt;EDGE_ID&gt;]+</replaceable></option></term>

            <listitem>
              <para>Forces <application>NETCONVERT</application> to remove all
              edges not within the given list from the network.
              <remark>Optional, type:list of edge ids, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--keep-edges.input-file
            <replaceable>&lt;FILENAME&gt;</replaceable></option></term>

            <listitem>
              <para>Forces <application>NETCONVERT</application> to read the
              list of edge ids to keep from &lt;FILENAME&gt;.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--keep-edges.postload</option></term>

            <listitem>
              <para>Forces <application>NETCONVERT</application> to read all
              edges first and remove the unwished after joining.
              <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--edges-min-speed
            <replaceable>&lt;MIN_SPEED&gt;</replaceable></option></term>

            <listitem>
              <para>Forces <application>NETCONVERT</application> to remove all
              edges from the input which allow a velocity below the given.
              <remark>Optional, type:float, default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Examples: none yet</para>

        <para>Recent changes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>The edge file generated using <option>plain-output</option>
            contains the information about the shape, the lane spread and the
            basic type if differing from the defaults since version
            0.9.5.</para>
          </listitem>

          <listitem>
            <para>Since version 0.9.10, <option>--keep-edges</option> uses ','
            as divider.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp04-further_options-additional_output"
             revision="0.9.5">
        <title>Additional Output</title>

        <para><application>NETCONVERT</application> and
        <application>NETGEN</application> allow to generate additional output
        files beside writing the network file. We will present the
        possibilities in the following subchapters.</para>

        <sect3 id="user_chp04-further_options-additional_output-plain">
          <title>Plain Network Output</title>

          <para>Parsed node and edge definitions may be saved into a XML-files
          which have the same formats as the ones used for importing
          XML-networks (as described in "<link
          linkend="user_chp04-xml_descriptions-nodes">Nodes
          Descriptions</link>" and "<link
          linkend="user_chp04-xml_descriptions-edges">Edges
          Descriptions</link>"). This shall ease processing of networks read
          from other formats than XML. The option <option>--plain-output
          <replaceable>&lt;FILENAME_PREFIX&gt;</replaceable></option> forces
          <application>NETCONVERT</application> and
          <application>NETGEN</application> to generate a file named
          "<filename>&lt;FILENAME_PREFIX&gt;.nod.xml</filename>" which
          contains the previously imported nodes and a file named
          "<filename>&lt;FILENAME_PREFIX&gt;.edg.xml</filename>" which
          contains the previously imported edges. The edge file will contain
          the list of previously read edges and each edge will have the
          information about the edge's id, the allowed velocity, the number of
          lanes, and the from/to - nodes stored. Geometry information is
          stored only if the imported edge has a shape, meaning that it is not
          only a straight connection between the from/to-nodes. The lane
          spread type and the basic edge type are only saved if differing from
          defaults ("right" and "normal", respectively). Additionally, if one
          of the lanes prohibits/allows vehicle classes, this information is
          saved, too (see also "<link
          linkend="user_chp04-xml_descriptions-edges-vclasses">Defining
          allowed Vehicle Types</link>").</para>

          <para>Specific options:</para>

          <variablelist>
            <varlistentry>
              <term><option>--plain-output
              <replaceable>&lt;PLAIN_OUTPUT_PREFIX&gt;</replaceable></option></term>

              <listitem>
                <para>Writes the files
                <filename><replaceable>&lt;PLAIN_OUTPUT_PREFIX&gt;</replaceable>.nod.xml</filename>
                and
                <filename><replaceable>&lt;PLAIN_OUTPUT_PREFIX&gt;</replaceable>.edg.xml</filename>
                that contain the descriptions about the nodes and the edges a
                network is made of. These files may be reread into the
                netgener using the XML-import capabilities. <remark>Optional,
                type:filename-prefix, default: none</remark></para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Examples: none yet</para>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>The edge file generated using
              <option>--plain-output</option> contains the information about
              the shape, the lane spread and the basic type if differing from
              the defaults since version 0.9.5.</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp04-further_options-additional_output-map_output">
          <title>Information about Geometry Removal</title>

          <para>The option <option>--map-output</option> (or
          <option>-M</option> for short) generates a file which contains the
          information about which edges have been joined (see chapter "<ulink
          url="#user_chp04-further_options-turnarounds">Removing Geometry
          Nodes</ulink>").</para>

          <para>The format is a little bit strange and should be reworked in
          the next time. At the begin of each line of the generated file, you
          will find the id of an edge from the generated network. Then,
          divided by tabs, you will find the list of edge ids together with
          the corresponding edges' lengths, the edge consists of. The id is
          divided from the length by a ':'. This means if that an edge that
          was joined from the edges 'edge1', 'edge2', 'edge3', each having the
          length 10, 20, and 30m, respectively, it would appear in the file
          encoded as following:</para>

          <programlisting>edge1&lt;TAB&gt;edge1:10&lt;TAB&gt;edge2:20&lt;TAB&gt;edge3:30</programlisting>

          <para>If the edge was not build by joining other edges, the list of
          edge ids/length will have only one value, of course:</para>

          <programlisting>edge&lt;TAB&gt;edge:100</programlisting>

          <para>Specific options:</para>

          <variablelist>
            <varlistentry>
              <term><option>( --map-output | -M )
              <replaceable>&lt;MAP_OUTPUT_FILE&gt;</replaceable></option></term>

              <listitem>
                <para>Writes the file
                <filename><replaceable>&lt;MAP_OUTPUT_FILE&gt;</replaceable></filename>
                which holds the list of edges that were joined to a single
                edge for each edge. <remark>Optional, type:filename, default:
                none</remark></para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Examples: none yet</para>
        </sect3>

        <sect3 id="user_chp04-further_options-additional_output-node_debug">
          <title>Node Geometries Dump and Printing Node Positions</title>

          <para>The option <option>--node-geometry-dump</option> is meant to
          be used when debugging the geometry computation. It generates a list
          of points of interest as readable by guisim (see chapter "<link
          linkend="user_chp07-geometry_files">Additional Geometry
          Files</link>") on the positions that were used to compute the
          imported nodes' geometries. The option
          "<option>--print-node-positions</option>" forces
          <application>NETCONVERT</application> and
          <application>NETGEN</application> to print the positions of the
          imported/build nodes on the command line.</para>

          <para>Specific options:</para>

          <variablelist>
            <varlistentry>
              <term><option>--node-geometry-dump
              <replaceable>&lt;DUMP_FILENAME&gt;</replaceable></option></term>

              <listitem>
                <para>Writes the positions that were used during geometry
                computation into
                <filename><replaceable>&lt;DUMP_FILENAME&gt;</replaceable></filename>.
                <remark>Optional, type:filename, default: none</remark></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><option>--print-node-positions</option></term>

              <listitem>
                <para>Prints the node positions during building.
                <remark>Optional (pregiven), type:bool, default:
                false</remark></para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Examples: none yet</para>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="user_chp04-netgen">
      <title>Automatic Network Generation</title>

      <para><application>NETGEN</application> allows builds abstract networks.
      Three types of networks can be built. All of them are very easy, but may
      be used as examples. You are also greatly invited to extend the
      concepts. Available types are: grid-networks, spider-networks and
      random-networks. You always have to supply the name of the network to
      generate using <option>--output
      <replaceable>&lt;FILENAME&gt;</replaceable></option> or <option>-o
      <replaceable>&lt;FILENAME&gt;</replaceable></option> for short and the
      type of network you want to create. So, exactly one of the following
      switches must be supported: <option>--grid-net</option>,
      <option>--spider-net</option> or <option>--random-net</option>.</para>

      <para>While the type-dependent options are described within the next
      chapters, all types share some command line options. As all networks may
      possess junctions, you are able to set the default type of junctions to
      build using the <option>--default-junction-type</option>-option (or
      <option>-j</option> for short). The following junction types are allowed
      in accordance to the junction types currently known by the simulation:
      <option>priority</option>, <option>traffic_light</option>,
      <option>actuated</option>, <option>agentbased</option>.</para>

      <para><caution>
          <para><option>traffic_light</option> will be mapped to "static"
          within the generated network.</para>
        </caution></para>

      <para>Further, you can specify the default street type by using the same
      options as in the netconvert-application.</para>

      <sect2 id="user_chp04-netgen-grid_like">
        <title>Grid-like Networks</title>

        <para>You are able to describe how many junctions in x- and in
        y-direction you want to be build and how far from each other they
        should be. The parameter for the number of junctions are
        <option>--grid-x-number</option> and <option>--grid-y-number</option>,
        the ones for the distance between the junctions
        <option>--grid-x-length</option> and <option>--grid-y-length</option>.
        If you want to build networks which have the same values for both
        axes, use <option>--grid-number</option> and
        <option>--grid-length</option>. The lengths are given in meters. It is
        possible to give another option <option>--attach-length</option>,
        which adds streets of the given length at the boundary of the grid
        such that all crossings have four streets (It is not yet possible to
        have different attach lengths for x- and y-direction).</para>

        <para>An example usage for building could be:</para>

        <figure id="img_gridnet1">
          <title><command>netgen --grid-net --grid-number=10 --grid-length=400
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/netgen_grid1.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Another one:</para>

        <figure id="img_gridnet2">
          <title><command>netgen --grid-net --grid-x-number=20
          --grid-y-number=5 --grid-y-length=40 --grid-x-length=200
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/netgen_grid2.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2 id="user_chp04-netgen-spider_like">
        <title>Spider-net-like Networks</title>

        <para>Spider-net networks are defined by the number of axes dividing
        them (parameter <option>--spider-arm-number</option> or
        <option>--arms</option>, default is 13), the number of the circles
        they are made of (<option>--spider-circle-number</option> or
        <option>--circles</option>, default is 20) and the distance between
        the circles (<option>--spider-space-rad</option> or
        <option>--radius</option> in meters, default is 100).</para>

        <para><caution>
            <para>As the number of edges within the middle of the spider net
            may be quite large, it is often not possible to build a traffic
            light junction here. Due to this, this junction is always a
            right-of-way-junction.</para>
          </caution></para>

        <para>Optionally you can omit the central junction of the network by
        specifying <option>--spider-omit-center</option> or
        <option>--nocenter</option>. This also gives an easy way of generating
        a circle network. Using for instance <command>netgen --spider-net
        --spider-omit-center --output-file=MySUMOFile.net.xml</command>will
        create a circle consisting of 13 elements with a radius of
        100m.</para>

        <para>Two examples of usage:</para>

        <figure id="img_spidernet1">
          <title><command>netgen --spider-net --spider-arm-number=10
          --spider-circle-number=10 --spider-space-rad=100
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/netgen_spider1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>and:</para>

        <figure id="img_spidernet2">
          <title><command>netgen --spider-net --spider-arm-number=4
          --spider-circle-number=3 --spider-space-rad=100
          --output-file=MySUMOFile.net.xml</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/netgen_spider2.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2 id="user_chp04-netgen-random">
        <title>Random Networks</title>

        <para>The random network generator does just what his name says, it
        builds random networks... Several settings may be changed:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><option>--rand-max-distance
            <replaceable>&lt;FLOAT&gt;</replaceable></option>: the maximum
            edge length</para>
          </listitem>

          <listitem>
            <para><option>--rand-min-distance
            <replaceable>&lt;FLOAT&gt;</replaceable></option>: the minimum
            edge length</para>
          </listitem>

          <listitem>
            <para><option>--rand-min-angle
            <replaceable>&lt;FLOAT&gt;</replaceable></option>: the minimum
            angle between two edges</para>
          </listitem>

          <listitem>
            <para><option>--rand-num-tries
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-connectivity
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist1
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist2
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist3
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist4
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist5
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>

          <listitem>
            <para><option>--rand-neighbor-dist6
            <replaceable>&lt;FLOAT&gt;</replaceable></option>:</para>
          </listitem>
        </itemizedlist>

        <para>An example:</para>

        <figure id="img_randomnet1">
          <title><command>netgen --random-net -o MySUMOFile.net.xml
          --rand-iterations=200 --abs-rand</command></title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/netgen_random1.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>
    </sect1>

    <sect1 id="user_chp04-closing" revision="0.9.6">
      <title>Closing Thoughts (so far)</title>

      <para><application>NETGEN</application> allows to create networks in a
      very comfortable way. For some small-sized tests of rerouting
      strategies, tls-signals etc., this is probably the best solution to get
      a network one can run some simulations at. The clear naming of the
      streets also eases defining own routes.</para>

      <para>Still, most examples within the data-section were written by hand
      for several reasons. At first, the examples are small enough and one may
      see the effects better than when using
      <application>NETGEN</application>. Furthermore, defining own networks
      using XML-data is more flexible. <application>NETGEN</application> is of
      course useless as soon as you want to simulate the reality.</para>

      <para>Our current state-of-the-art approach for building networks is the
      following:</para>

      <procedure>
        <step>
          <para>Get a plain (no tls, no link-2-link-connections, etc.) network
          from our NavTeq database</para>
        </step>

        <step>
          <para>Import it using <application>NETCONVERT</application> and
          write the list of imported edges/nodes using the
          <option>--plain-output</option> option</para>
        </step>

        <step>
          <para>Build the network from the list of edges/nodes (normally
          setting the options <option>--guess-ramps</option> to true)</para>
        </step>

        <step>
          <para>Load the network into <application>GUISIM</application>, try
          to determine where tls are located and which connections between
          edges/lanes are false; A nice possibility to do this is to use
          Google Earth besides to investigate how the network looks in
          reality</para>
        </step>

        <step>
          <para>Add <sgmltag>type="traffic_light"</sgmltag> attribute to those
          nodes in your plain file which were found to be controlled by a
          tls</para>
        </step>

        <step>
          <para>Add lane-to-lane connections in a previously generated
          connections-file</para>
        </step>

        <step>
          <para>Build the network from the modified edges/nodes/connection
          files</para>
        </step>

        <step>
          <para>Continue with step 4. until the network is as it shoud
          be</para>
        </step>
      </procedure>

      <para>A good idea is to let some vehicles run through the network while
      investigating it. This will show possible bottleneck that arised from a
      false modelling of the network.</para>

      <para>When using real life networks, we really advice guessing on- and
      off-ramps The on- off-ramps are guessed quite well, we can not state
      this for the tls, because we don't have made any comparisons with real
      life.</para>
    </sect1>

    <sect1 id="user_chp04-changes" revision="0.9.6">
      <title>Recent Changes</title>

      <para>The following list contains recent changes in the naming or
      meaning of options. It has been started during the work on version
      0.9.2, so earlier changes are not contained, herein. The changes list
      contains the version where the change occured or will occure. The
      changes should be valid for the next stable release.</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Changes in version 0.9.2</para>

          <itemizedlist>
            <listitem>
              <para><option>--xml-type-files</option> was named
              <option>--type-file</option> in versions earlier than 0.9.2;
              <emphasis>Reason:</emphasis> the naming does not fit into the
              naming scheme of other XML-input files.</para>
            </listitem>

            <listitem>
              <para>versions earlier than 0.9.2 allow to use a filename for
              each of the .dbf and the .shp file using
              "<option>--arcview-dbf</option>" and
              "<option>--arcview-shp</option>"; <emphasis>Reason:</emphasis>
              This was abondonned, because of the need to use .shx-files,
              also.</para>
            </listitem>

            <listitem>
              <para><option>--speed-in-kmh</option> was named
              <option>--speed-in-km</option> in versions earlier than 0.9.2;
              <emphasis>Reason</emphasis>: false physical measure</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Changes in version 0.9.3</para>

          <itemizedlist>
            <listitem>
              <para>in versions earlier than 0.9.3, turnarounds were not added
              per default. Instead the option
              "<option>--append-turnarounds</option>" has forced
              <application>NETCONVERT</application> to add them;
              <emphasis>Reason:</emphasis> turnarounds semm to be wished for
              the wider set of applications. Only sometimes it is unwished to
              add them.</para>
            </listitem>

            <listitem>
              <para>in versions earlier than 0.9.3, geometry nodes were
              removed by default. One could change this behaviour using the
              "<option>--no-node-removal</option>" option;
              <emphasis>Reason:</emphasis> the same as for
              "<option>--append-turnarounds</option>"</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Changes in version 0.9.4</para>

          <itemizedlist>
            <listitem>
              <para>The <sgmltag>function</sgmltag>-tag for edges was added
              for version 0.9.4</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Changes in version 0.9.5</para>

          <itemizedlist>
            <listitem>
              <para>The <sgmltag>function</sgmltag>-tag within edges was
              revalidated for version 0.9.5</para>
            </listitem>

            <listitem>
              <para>The <sgmltag>function</sgmltag>-tag for edge types was
              added for version 0.9.5</para>
            </listitem>

            <listitem>
              <para>The edge file generated using
              <option>plain-output</option> contains the information about the
              shape, the lane spread and the basic type if differing from the
              defaults since version 0.9.5.</para>
            </listitem>

            <listitem>
              <para>Inner-junction traffic was revalidated for version
              0.9.5</para>
            </listitem>

            <listitem>
              <para>The possibility to define which vehicle classes are
              allowed on a lane was added in version 0.9.5</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Changes in version 0.9.6</para>

          <itemizedlist>
            <listitem>
              <para>Described our current procedure of importing
              networks</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Changes in version 0.9.9</para>

          <itemizedlist>
            <listitem>
              <para>The <sgmltag>function</sgmltag>-tag within edges was
              removed in version 0.9.9</para>
            </listitem>

            <listitem>
              <para>The <sgmltag>function</sgmltag>-tag for edge types was
              removed in version 0.9.9</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="user_chp04-missing" revision="0.9.5">
      <title>Missing</title>

      <para>There are some further options which were not yet described. Use
      at own risc.</para>

      <para><option>--x-offset-to-apply, --y-offset-to-apply,
      --rotation-to-apply</option></para>

      <para><option>--keep-unregulated, --keep-unregulated.nodes,
      --keep-unregulated.district-nodes</option></para>

      <para><option>--guess-obscure-ramps, --obscure-ramps.add-ramp,
      --obscure-ramps.min-highway-speed</option></para>
    </sect1>
  </chapter>

  <chapter id="user_chp05">
    <title>Route Generation</title>

    <sect1 id="user_chp05-introduction" revision="0.9.6">
      <title>Introduction</title>

      <para>After having your network converted into the SUMO-format, you
      could take a look at it using the gui-version of the simulation (see
      "<link linkend="user_chp07">Simulation-GUI</link>"), but no cars would
      be driving around. You still need some kind of description about the
      vehicles. If you are importing data from other simulation packages, they
      normally bring own route definitions you can use. In case of using
      ArcView or own data or in other cases where you do not have the vehicle
      movements at all, you have to generate them by your own. From now on we
      will use the following nomenclature: A <glossterm>trip</glossterm> is a
      vehicle movement from one place to another defined by the starting edge
      (street), the destination edge, and the departure time. A
      <glossterm>route</glossterm> is an expanded trip, that means, that a
      route definition contains not only the first and the last edge, but all
      edges the vehicle will pass. There are several ways to generate routes
      for SUMO:</para>

      <itemizedlist>
        <listitem>
          <para>using trip definitions</para>

          <para>As described above, each trip consists at least of the
          starting and the ending edge and the departure time (see Chapter
          "<ulink url="#user_chp05-explicite-trips">Using Trip
          Definitions</ulink>").</para>
        </listitem>

        <listitem>
          <para>using flow definitions</para>

          <para>This is mostly the same approach as using trip definitions,
          but you may join several vehicles having the same trips using this
          method (see Chapter "<ulink url="#user_chp05-explicite-flows">Using
          Flow Definitions</ulink>").</para>
        </listitem>

        <listitem>
          <para>using flow definitions and turning ratios</para>

          <para>You may also leave out the destination edges for flows and use
          turning ratios at junctions instead (see Chapter "<ulink
          url="#user_chp05-own_routes-jtr">Using the Junction Turning Ratio -
          Router</ulink>").</para>
        </listitem>

        <listitem>
          <para>using OD-matrices</para>

          <para>OD-matrices have to be converted to trips first (see Chapter
          "<ulink url="#user_chp05-od2trips">Using OD2TRIPS</ulink>"), then
          from trips to routes (see Chapter "<ulink
          url="#user_chp05-explicite-trips">Using Trip
          Definitions</ulink>").</para>
        </listitem>

        <listitem>
          <para>by hand</para>

          <para>You can of course generate route files by hand (see Chapter
          "<ulink url="#user_chp05-explicite-hand">Building Routes 'by
          Hand'</ulink>").</para>
        </listitem>

        <listitem>
          <para>using random routes</para>

          <para>This is fast way to fill the simulation with life, but
          definitely a very inaccurate one (see Chapter "<ulink
          url="#user_chp05-own_routes-random">Generating random
          Routes</ulink>").</para>
        </listitem>

        <listitem>
          <para>by importing available routes (see Chapter "<ulink
          url="#user_chp05-import_routes">Importing Routes from other
          Simulations</ulink>")</para>
        </listitem>
      </itemizedlist>

      <para>By now, the SUMO-package contains four applications for processing
      routes. <application>DUAROUTER</application> is responsible for
      importing routes from other simulation packages and for computing routes
      using the shortest-path algorithm by Dijkstra.
      <application>JTRROUTER</application> may be used if you want to model
      traffic statistically, using flows and turning percentages at junctions.
      <application>OD2TRIPS</application> helps you to convert OD-matrices
      (origin/destination-matrices) into trips. A new application, the
      <application>DFROUTER</application> was added to the suite for version
      0.9.5. Within the next chapters, at first the mandatory arguments are
      described, then we will show how each of the possible methods of
      generating routes from scratch can be used. In the following, importing
      routes and additional options are given followed by a small
      overview.</para>

      <figure id="img_trips2routes">
        <title>Building routes</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="./gfx/user/flow_routes_small.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect1>

    <sect1 id="user_chp05-common">
      <title>Common, mandatory Values</title>

      <para>Independent to what you are doing, you always have to supply the
      network using the <option>--net-file</option> (or <option>--net</option>
      or <option>-n</option> for short) option when working with either
      <application>DFROUTER</application>,
      <application>DUAROUTER</application>,
      <application>JTRROUTER</application>, or
      <application>OD2TRIPS</application>. Additionally, you should let the
      application know which time interval shall be used. Route/trip/flow
      definitions will be imported within the interval given by the options
      <option>--begin</option> (<option>-b</option>) and
      <option>--end</option> (<option>-e</option>). Definitions with departure
      time earlier than the one specified by <option>--begin</option> or later
      than those specified by <option>--end</option> will be discarded. If you
      do not give a value for the begin / end time step the defaults 0 and
      86400 (one day) will be used, respectively.</para>

      <para>Common options:</para>

      <variablelist>
        <varlistentry>
          <term><option>( --net-file | --net | -n )
          <replaceable>&lt;SUMO_NET_FILE&gt;</replaceable></option></term>

          <listitem>
            <para>The network to route on. <remark>Mandatory, type:filename,
            default: none</remark></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>( --begin | -b )
          <replaceable>&lt;TIME&gt;</replaceable></option></term>

          <listitem>
            <para>Defines the begin time routes shall be generated (in
            seconds). <remark>Default (pregiven), type:int, default:
            0</remark></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>( --end | -e )<replaceable>
          &lt;TIME&gt;</replaceable></option></term>

          <listitem>
            <para>Defines the end time routes shall be generated (in seconds).
            <remark>Default (pregiven), type:int, default:
            86400</remark></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="user_chp05-own_routes">
      <title>Building Routes from Scratch</title>

      <para>You have either the possibility to generate completely random
      routes or to exactly describe what you want and pass this information to
      <application>DUAROUTER</application> or
      <application>JTRROUTER</application>, which then expand your
      descriptions to routes. As result, a routes file is normally generated
      which you may use within your simulation.</para>

      <caution>
        <para>You have to know that each route should consist of at least
        three edges! On the first, the vehicle will be emitted. As soon as it
        reaches <emphasis>the begin</emphasis> of the last, it will be removed
        from the network. So to see the vehicle running, you should at least
        have one edge in between!</para>
      </caution>

      <sect2 id="user_chp05-explicit" revision="0.9.6">
        <title>Generating own, explicit Routes</title>

        <para>There are three possibilities to describe own routes. The most
        trivial one is to do this by hand. The first way to make more vehicle
        trips more automatically is the usage of trip definitions, the second
        one the usage of flow descriptions. Trip definitions describe the
        movement of a single vehicle giving the departure time, and both the
        origin and the destination edges via their id. Flow descriptions use
        these values too, but instead of describing only one vehicle, the
        description is used for a defined number of vehicles to be emitted
        within a described interval. Due to this, instead of the departure
        time, the period's begin and end times must be supplied and the number
        of vehicles to emit within this interval.</para>

        <para>We will describe both data types less briefly, now.</para>

        <sect3 id="user_chp05-explicite-hand" revision="0.9.5">
          <title>Building Routes 'by Hand'</title>

          <para>The most simple way to get own routes is to edit a routes file
          by hand, but only if the number of different routes is not too high.
          Most of the routes within the examples were written by hand, in
          fact. Before starting, you must know that a vehicle in SUMO consists
          of three parts: a vehicle type which describes the vehicle's
          physical properties, a route the vehicle shall take, and the vehicle
          itself. Both routes and vehicle types can be shared by several
          vehicles. In this case, routes need a further information. Assume
          you want to build a routes file
          "<filename>routes.rou.xml</filename>". Herein, you can define a
          vehicle type as following:</para>

          <programlisting><sgmltag>&lt;routes&gt;</sgmltag>
   <sgmltag>&lt;vtype id="type1" accel="0.8" decel="4.5" sigma="0.5" length="5" maxspeed="70"/&gt;</sgmltag>
<sgmltag>&lt;/routes&gt;</sgmltag></programlisting>

          <para>The values used above are the ones most of the examples use.
          They resemble a standard vehicle as used within the Stefan KrauÃ'
          thesis besides that the minimum gap between vehicles is not added to
          the length. These values have the following meanings:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              vehicle type</para>
            </listitem>

            <listitem>
              <para><sgmltag>accel</sgmltag>: The acceleration ability of
              vehicles of this type (in m/s^2)</para>
            </listitem>

            <listitem>
              <para><sgmltag>decel</sgmltag>: The deceleration ability of
              vehicles of this type (in m/s^2)</para>
            </listitem>

            <listitem>
              <para><sgmltag>sigma</sgmltag>: The driver imperfection (between
              0 and 1)</para>
            </listitem>

            <listitem>
              <para><sgmltag>length</sgmltag>: The vehicle length (in
              m)</para>
            </listitem>

            <listitem>
              <para><sgmltag>maxspeed</sgmltag>: The vehicle's maximum
              velocity (in m/s)</para>
            </listitem>

            <listitem>
              <para><sgmltag>color</sgmltag>: An optional color of the vehicle
              type, encoded as three values between 0 and 1 for red, green,
              and blue, divided by a ','. Please remark that no spaces between
              the numbers are allowed.</para>
            </listitem>
          </itemizedlist>

          <para>Having this defined, you can build vehicles of type "type1".
          Let's do this for a vehicle with an completely own route:</para>

          <programlisting><sgmltag>&lt;routes&gt;</sgmltag>
   <sgmltag>&lt;vtype id="type1" accel="0.8" decel="4.5" sigma="0.5" length="5" maxspeed="70"/&gt;</sgmltag>

   <sgmltag>&lt;vehicle id="0" type="type1" depart="0" color="1,0,0"&gt;</sgmltag>
      <sgmltag>&lt;route&gt;beg middle end rend&lt;/route&gt;</sgmltag>
   <sgmltag>&lt;/vehicle&gt;</sgmltag>

<sgmltag>&lt;/routes&gt;</sgmltag></programlisting>

          <para>Ok, now we have a red (color=1,0,0) vehicle of type "type1"
          named "0" which will start at time 0. The vehicle will drive along
          the streets "beg", "middle", "end", and as soon as it has approached
          the edge "rend" it will be removed from the simulation. Ok, let's
          review a vehicle's attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              vehicle</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: The vehicle type to use for this
              vehicle</para>
            </listitem>

            <listitem>
              <para><sgmltag>depart</sgmltag>: The time at which the vehicle
              shall be emitted into the net</para>
            </listitem>

            <listitem>
              <para><sgmltag>color</sgmltag>: An optional color of the
              vehicle, encoded as three values between 0 and 1 for red, green,
              and blue, divided by a ','. Please remark that no spaces between
              the numbers are allowed.</para>
            </listitem>
          </itemizedlist>

          <para>This vehicle has an own, internal route which is not shared
          with other vehicles. You may also define two vehicles using the same
          route. In this case you have to "externalize" the route by giving it
          an id. From <application>SUMO</application> 0.9.7 on it is no longer
          neccessary to tell SUMO that the route is shared by using the
          <sgmltag>multi_ref</sgmltag> attribute, all routes defined outside
          of vehicles are shared. The vehicles using the route refer it using
          the "<sgmltag>route</sgmltag>"-attribute. The complete change looks
          like this:</para>

          <programlisting><sgmltag>&lt;routes&gt;</sgmltag>
   <sgmltag>&lt;vtype id="type1" accel="0.8" decel="4.5" sigma="0.5" length="5" maxspeed="70"/&gt;</sgmltag>

   <sgmltag>&lt;route id="route0" color="1,1,0"&gt;beg middle end rend&lt;/route&gt;</sgmltag>

   <sgmltag>&lt;vehicle id="0" type="type1" route="route0" depart="0" color="1,0,0"/&gt;</sgmltag>
   <sgmltag>&lt;vehicle id="1" type="type1" route="route0" depart="0" color="0,1,0"/&gt;</sgmltag>

<sgmltag>&lt;/routes&gt;</sgmltag></programlisting>

          <para>You may have noticed, that the route itself also got a color
          definition, so the attributes of a route are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              route</para>
            </listitem>

            <listitem>
              <para><sgmltag>color</sgmltag>: An optional color of the
              vehicle, encoded as three values between 0 and 1 for red, green,
              and blue, divided by a ','. Please remark that no spaces between
              the numbers are allowed.</para>
            </listitem>
          </itemizedlist>

          <para>This knowledge should enable you to specify own route
          definitions by hand or using self-written scripts. All routing
          modules are generating route files that match this routes and
          vehicles specification.There are a few important things to consider
          when building your own routes:<itemizedlist>
              <listitem>
                <para><emphasis>Routes have to be connected.</emphasis> At the
                moment the simulation does not raise an error if the next edge
                of the current route is not a successor of the current edge.
                The car will simply stop at the end of the current edge and
                will possibly be "teleported" to the next edge after a waiting
                time. This is very likely to change in future versions.</para>
              </listitem>

              <listitem>
                <para><emphasis>Routes have to contain at least two
                edges.</emphasis> The simulation stops the car at the start of
                the last edge, thus a route consisting of a single edge is
                empty.</para>
              </listitem>

              <listitem>
                <para><emphasis>The starting edge has to be at least as long
                as the car starting on it.</emphasis> At the moment cars can
                only start at a position which makes them fit on the road
                completely.</para>
              </listitem>

              <listitem>
                <para><emphasis>The route file has to be sorted by starting
                times.</emphasis> In fact this is only relevant, when you
                define a lot of routes or have large gaps between departure
                times. The simulation parameter
                <option>--route-steps</option>, which defaults to 200, defines
                the size of the time interval with which the simulation loads
                its routes. That means by default at startup only route with
                departure time &lt;200 are loaded, if all the vehicles have
                departed, the routes up to departure time 400 are loaded etc.
                pp. This works only if the route file is sorted. This
                behaviour may be disabled by specifying <option>--route-steps
                0</option>.</para>
              </listitem>
            </itemizedlist></para>

          <para>The first three conditions can be checked using
          <replaceable>&lt;SUMO_DIST&gt;</replaceable><filename>/tools/routecheck.py</filename>.</para>
        </sect3>

        <sect3 id="user_chp05-explicite-trips">
          <title>Using Trip Definitions</title>

          <para>Trip definitions that can be laid into the network may be
          supplied to the router using an XML-file. The syntax of a single
          trip definition is: <sgmltag>&lt;tripdef
          id="<replaceable>&lt;ID&gt;</replaceable>"
          depart="<replaceable>&lt;TIME&gt;</replaceable>"
          from="<replaceable>&lt;ORIGIN_EDGE_ID&gt;</replaceable>"
          to="<replaceable>&lt;DESTINATION_EDGE_ID&gt;</replaceable>"
          [type="<replaceable>&lt;VEHICLE_TYPE&gt;</replaceable>"]
          [period="<replaceable>&lt;INT&gt;</replaceable>"
          repno="<replaceable>&lt;INT&gt;</replaceable>"]
          [color="<replaceable>&lt;COLOR&gt;</replaceable>"]/&gt;</sgmltag>.
          You have to supply the edge the trip starts at (origin), the edge
          the trip ends at (destination) and the departure time at least. If
          the type is not given, a default ("SUMO_DEFAULT_TYPE") will be used
          and stored within the routes-file. If the attribute
          <sgmltag>period</sgmltag> is given, not only one vehicle will use
          the route, but every n seconds (where n is the number defined in
          period), a vehicle using this route will be emitted. The number of
          vehicles to emit using this route may be additionally constrained
          using <sgmltag>repno</sgmltag>.</para>

          <para>Let's review a trip's parameter:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              route (and vehicle)</para>
            </listitem>

            <listitem>
              <para><sgmltag>depart</sgmltag>: The time the route starts
              at</para>
            </listitem>

            <listitem>
              <para><sgmltag>from</sgmltag>: The name of the edge the route
              starts at; the edge must be a part of the used network</para>
            </listitem>

            <listitem>
              <para><sgmltag>to</sgmltag>: The name of an the edge the route
              ends at; the edge must be a part of the used network</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: The name of the type the vehicle
              has (optional)</para>
            </listitem>

            <listitem>
              <para><sgmltag>period</sgmltag>: The time after which another
              vehicle with the same route shall be emitted (optional)</para>
            </listitem>

            <listitem>
              <para><sgmltag>repno</sgmltag>: The number of vehicles to emit
              which share the same route (optional)</para>
            </listitem>

            <listitem>
              <para><sgmltag>color</sgmltag>: Defines the color of the vehicle
              and the route (optional)</para>
            </listitem>
          </itemizedlist>

          <para>This file is supplied to <application>DUAROUTER</application>
          using the option "<option>--trip-defs</option>" or
          "<option>-t</option>":</para>

          <screen>duarouter --trip-defs=<replaceable>&lt;TRIP_DEFS&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> \
   --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

          <para>Specific options:</para>

          <variablelist>
            <varlistentry>
              <term><option>( --trip-defs | --trips | -t )
              <replaceable>&lt;TRIP_DEFINITION_FILE&gt;</replaceable></option></term>

              <listitem>
                <para>Tells <application>DUAROUTER</application> from what
                file trip definitions shall be read. <remark>Optional,
                type:filename, default: none</remark></para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Examples:</para>

          <para>Almost all networks within the
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/</filename>
          - folder. Additionally some examples that deal with trips may be
          found in
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router</filename>.</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/trips2routes/</filename>
              shows the basic usage of trips; This example is quiet trivial -
              100 same vehicles are emitted</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/trips2routes_repetition/</filename>
              does exactly the same, but not by defining each of the 100
              vehicles, but letting one vehicle be duplicated using
              <sgmltag>period</sgmltag> and <sgmltag>repno</sgmltag></para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp05-explicite-flows" revision="0.9.7">
          <title>Using Flow Definitions</title>

          <para>Flow amounts share most of the parameter with trip
          definitions. The syntax is: <sgmltag>&lt;flow
          id="<replaceable>&lt;ID&gt;</replaceable>"
          from="<replaceable>&lt;ORIGIN_EDGE_ID&gt;</replaceable>"
          to="<replaceable>&lt;DESTINATION_EDGE_ID&gt;</replaceable>"
          begin="<replaceable>&lt;INTERVAL_BEGIN&gt;</replaceable>"
          end="<replaceable>&lt;INTERVAL_END&gt;</replaceable>"
          no="<replaceable>&lt;VEHICLES_TO_EMIT&gt;</replaceable>"
          [type="<replaceable>&lt;VEHICLE_TYPE&gt;</replaceable>"]
          [color="<replaceable>&lt;COLOR&gt;</replaceable>"]/&gt;</sgmltag>.
          Notice the following differences: the vehicle does not take a
          certain departure time as not only one vehicle is described by this
          parameter, but a set of, given within the attribute
          "<sgmltag>no</sgmltag>" (short for number). The departure times are
          spread uniformly within the time interval described by
          <sgmltag><replaceable>&lt;INTERVAL_BEGIN&gt;</replaceable></sgmltag>
          and
          <sgmltag><replaceable>&lt;INTERVAL_END&gt;</replaceable></sgmltag>.
          All these three attributes must be integer values. The values
          "<sgmltag>period</sgmltag>" and "<sgmltag>repno</sgmltag>" are not
          used herein. Flow definitions can also be embedded into an interval
          tag. In this case one can (but does not have to) leave the tags
          "<sgmltag>begin</sgmltag>" and "<sgmltag>end</sgmltag>" out. So the
          following two snipples mean the same:</para>

          <programlisting><sgmltag>&lt;flow id="0" from="edge0" to="edge1" begin="0" end="3600" no="100"/&gt;</sgmltag>
</programlisting>

          <para>and</para>

          <programlisting><sgmltag>&lt;interval begin="0" end="3600"&gt;</sgmltag>
   <sgmltag>&lt;flow id="0" from="edge0" to="edge1" no="100"/&gt;</sgmltag>
<sgmltag>&lt;/interval&gt;</sgmltag></programlisting>

          <para>Let's review flow parameter:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              flow; vehicles and routes will be named
              "<replaceable>&lt;id&gt;</replaceable>_<replaceable>&lt;RUNNING&gt;</replaceable>"
              where <replaceable>&lt;RUNNING&gt;</replaceable> is a number
              starting at 0 and increased for each vehicle.</para>
            </listitem>

            <listitem>
              <para><sgmltag>from</sgmltag>: The name of the edge the routes
              start at; the edge must be a part of the used network</para>
            </listitem>

            <listitem>
              <para><sgmltag>to</sgmltag>: The name of an the edge the routes
              end at; the edge must be a part of the used network</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: The name of the type the vehicle
              has</para>
            </listitem>

            <listitem>
              <para><sgmltag>begin</sgmltag>: The begin time for the described
              interval</para>
            </listitem>

            <listitem>
              <para><sgmltag>end</sgmltag>: The end time for the interval;
              must be greater than
              <sgmltag><replaceable>&lt;begin&gt;</replaceable></sgmltag>;
              vehicles will be emitted between
              <sgmltag><replaceable>&lt;begin&gt;</replaceable></sgmltag> and
              <sgmltag><replaceable>&lt;end&gt;</replaceable></sgmltag>-1</para>
            </listitem>

            <listitem>
              <para><sgmltag>no</sgmltag>: The number of vehicles that shall
              be emitted during this interval</para>
            </listitem>

            <listitem>
              <para><sgmltag>color</sgmltag>: Defines the color of the
              vehicles and their routes (optional)</para>
            </listitem>
          </itemizedlist>

          <para>As we have to read in the flow definitions completely into the
          memory - something we do not have to do necessarily with trips, an
          extra parameter (<option>-f</option> or <option>--flows</option>) is
          used to make them known by the router:</para>

          <screen>duarouter --flows=<replaceable>&lt;FLOW_DEFS&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> \
   --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

          <para>Remind that you can not insert flow descriptions into a trip
          definitions file. The opposite (some trip definitions within a flow
          descriptions file) is possible. You also can give both files at the
          input file, for example:</para>

          <screen>duarouter --flows=<replaceable>&lt;FLOW_DEFS&gt;</replaceable> --trip-defs=<replaceable>&lt;TRIP_DEFS&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> \
   --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

          <para>Specific options:</para>

          <variablelist>
            <varlistentry>
              <term><option>( --flow-definition | --flows | -f )
              <replaceable>&lt;FLOW_DEFINITION_FILE&gt;</replaceable></option></term>

              <listitem>
                <para>Tells
                <application>DUAROUTER</application>/<application>JTRROUTER</application>
                from what file flow definitions shall be read.
                <remark>Optional, type:filename, default: none</remark></para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Examples:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes/</filename>
              shows the basic usage of flows; This example generates 100
              vehicles just like
              <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes/</filename>
              but it uses flow definitions instead of trips for this.</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes_100s_interval/</filename>
              is almost the same, but vehicles are departing over a time of
              100s.</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes_200s_interval/</filename>
              is almost the same, but vehicles are departing over a time of
              200s.</para>
            </listitem>

            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router/flows2routes_100s_interval_ext/</filename>
              shows the second possibility of defining intervals in
              flow-definition.</para>
            </listitem>
          </itemizedlist>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>There was a bug on using flow in prior versions; the end
              time step was also used making the behaviour not as good
              predictable. This has been now changed so that the vehicles are
              emitted in steps starting at
              <sgmltag><replaceable>&lt;begin&gt;</replaceable></sgmltag> and
              ending at
              <sgmltag><replaceable>&lt;end&gt;</replaceable></sgmltag>-1.</para>

              <para><emphasis>Reason:</emphasis> The prior behaviour was not
              correct</para>
            </listitem>

            <listitem>
              <para>version 0.9.7: the option names for using flows have been
              consolidated.</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>

      <sect2 id="user_chp05-own_routes-random" revision="0.9.6">
        <title>Generating random Routes</title>

        <para>Random routes are the easiest, but also the most inaccurate way
        to feed your network with vehicle movements. Using the following call
        ro <application>DUAROUTER</application>:</para>

        <screen>duarouter --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> -R <replaceable>&lt;FLOAT&gt;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

        <para>or the same for the <application>JTRROUTER</application>:</para>

        <screen>jtrrouter --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> -R <replaceable>&lt;FLOAT&gt;</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

        <para>you will generate random routes for the time interval given by
        <option>-b(egin)</option> and <option>-e(nd)</option>. In each time
        step as many vehicles will be emitted into the network as given by the
        value of <option>-R</option> (<option>--random-per-second</option>).
        You can also supply values smaller than one. In this case, a single
        vehicle will be emitted each
        1/<option><replaceable>&lt;-R&gt;</replaceable></option> step.
        Example: <option>-R 0.25</option> generates a route description,
        which, when loaded, forces the simulation to emit a single vehicle
        each fourth time step. It is also possible to use this parameter in
        combination with other route definitions, for example supplying some
        fix routes and additionally generate random routes.</para>

        <para>Random routes are not the best way to generate routes. Take a
        look at the network displayed below. This network has two rural and
        many minor roads. Random routes are by now spread all over the network
        and each road is chosen to be the starting or the ending without
        respecting his function. Due to this, the network is filled over with
        cars, coming from and approaching directions, the normal traffic is
        not taking - the normal traffic would concentrate on rural
        roads.</para>

        <figure id="img_false_random_routes_network">
          <title>A network where the usage of random routes causes an improper
          behaviour due to the mixture of rural and minor roads</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/ivf.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --random-per-second | -R )
            <replaceable>&lt;RANDOM_VEHICLES_PER_SECOND&gt;</replaceable></option></term>

            <listitem>
              <para>Forces
              <application>DUAROUTER</application>/<application>JTRROUTER</application>
              to generate random trips. Per second the given number of
              vehicles will be generated. <remark>Optional, type:float,
              default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="user_chp05-own_routes-jtr">
        <title revision="0.9.7">Using the Junction Turning Ratio -
        Router</title>

        <para>The <application>JTRROUTER</application> is a routing
        applications which uses flows and turning percentages at junctions as
        input. The following parameter must be supplied: the network to route
        the vehicles through, the description of the turning ratios for the
        junctions (defaults may be used for this, too), and the descriptions
        of the flows.</para>

        <para>A call may look like this:</para>

        <screen>jtrrouter --flows=<replaceable>&lt;FLOW_DEFS&gt;</replaceable> --turns=<replaceable>&lt;TURN_DEFINITIONS&gt;</replaceable> --net=<replaceable>&lt;SUMO_NET&gt;</replaceable> \
   --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> -b <replaceable>&lt;UINT&gt;</replaceable> -e <replaceable>&lt;UINT&gt;</replaceable></screen>

        <para>To describe the turn definitions, one has to build a further
        file. Within this file, for each interval and each edge the list of
        percentages to use a certain follower has to be given. An
        example:</para>

        <programlisting><sgmltag>&lt;turn-defs&gt;</sgmltag>
   <sgmltag>&lt;interval begin="0" end="3600"&gt;</sgmltag>
      <sgmltag>&lt;fromedge id="myEdge0"&gt;</sgmltag>
         <sgmltag>&lt;toedge id="myEdge1" probability="0.2"/&gt;</sgmltag>
         <sgmltag>&lt;toedge id="myEdge2" probability="0.7"/&gt;</sgmltag>
         <sgmltag>&lt;toedge id="myEdge3" probability="0.1"/&gt;</sgmltag>
      <sgmltag>&lt;/fromedge&gt;</sgmltag>

      ... any other edges ...

   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... some further intervals ...

<sgmltag>&lt;/turn-defs&gt;</sgmltag></programlisting>

        <para>The snippet defines that vehicles coming at the end of edge
        "myEdge0" within the time interval between 0s and 3600s will choose
        the edge "myEdge1" with a probability of 20%, "myEdge2" with a
        probability of 70% and "myEdge3" with a probability of 10%. Another
        possibility to save time on preparing the description is to use
        default values. The parameter <option>--turn-defaults</option>
        (<option>-T</option>)
        <option><replaceable>&lt;TURN_DEFAULTS&gt;</replaceable></option> can
        be used to describe the default ratios that will be used for all
        junctions for all time steps.
        <option><replaceable>&lt;TURN_DEFAULTS&gt;</replaceable></option> is a
        list of doubles, separated by a ','. To achieve the same behaviour as
        in the example above, use <option>--turn-defaults=20,70,10</option>.
        The values will be applied to an edge's following edges beginning at
        the right edge (20%) and ending at the leftmost edge (10%). As the
        number of possible followers changes for different edges, the values
        are resampled for edges which number of following edges differs from
        the number of given turning probability defaults. Given
        <option>--turn-defaults=20,70,10</option> a vehicle using an edge that
        has two followers would use the follower to the right with 55%
        probability, the one to the left with 45%.</para>

        <para>The definitions of the flow is the same as for the
        <application>DUAROUTER</application> with just a single difference: as
        it is not known where the vehicle will leave the network as the route
        it uses is randomly computed, the destination parameter has no meaning
        for jtr-routing and so may be left off. A vehicle leaves the network
        as soon as it comes to a sink edge. As not all networks have sink
        edges defined, one can support a list of edges to be declared as sinks
        using <option>--sinks
        <replaceable>&lt;EDGE_ID&gt;[,&lt;EDGE_ID&gt;]*</replaceable></option>.
        You may also add your sink definitions to a turn-file (XML
        only):</para>

        <programlisting><sgmltag>&lt;turn-defs&gt;</sgmltag>
   ... some further turning definitions as above ...
 
   <sgmltag>&lt;sink&gt;<replaceable>&lt;EDGE_ID&gt;</replaceable>&lt;/sink&gt;</sgmltag>
   ... further sink definitions ...

<sgmltag>&lt;/turn-defs&gt;</sgmltag></programlisting>

        <para>As theoretically a route may get infinitely long when a vehicle
        is forced to take always the same direction, it is possible to limit
        the route's size using <option>max-edges-factor</option>. This factor,
        multiplied with the number of the used network's edges is the maximum
        number of edges a route may have. With the default of 2.0, a route may
        contain twice as many edges as the network has. Any route longer than
        this size will be marked as invalid. We assume that for each network
        this number has to be chosen again.</para>

        <para>The following options are accepted by
        <application>JTRROUTER</application>:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --net-file | --net | -n )
            <replaceable>&lt;SUMO_NET&gt;</replaceable></option></term>

            <listitem>
              <para>Uses the named network to route vehicles on.
              <remark>Mandatory, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --output-file | --output | -o )
            <replaceable>&lt;FILENAME&gt;</replaceable></option></term>

            <listitem>
              <para>Set <replaceable>&lt;FILENAME&gt;</replaceable> as the
              filename to write computed routes into. Additionally a file
              named "<replaceable>&lt;FILENAME&gt;</replaceable>.alt" will be
              generated which contains the route alternatives.
              <remark>Mandatory, type: filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>(--begin | -b )
            <replaceable>&lt;INT&gt;</replaceable></option></term>

            <listitem>
              <para>The first time step for which routes shall be build.
              <remark>Optional (pregiven), type: int, default:
              0</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>(--end | -e )
            <replaceable>&lt;INT&gt;</replaceable></option></term>

            <listitem>
              <para>The last time step (+1) for which routes shall be build.
              <remark>Optional (pregiven), type: int, default:
              86400</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --alternatives | -a )
            <replaceable>&lt;ALTERNATIVES_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Forces <application>JTRROUTER</application> to use the
              previously generated
              <replaceable>&lt;ALTERNATIVES_FILE&gt;</replaceable> as input.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>The attribute "<sgmltag>probability</sgmltag>" within turn
            definitions was named "<sgmltag>perc</sgmltag>" in versions lower
            than 0.9.4 The reason for this change is that
            "<sgmltag>probability</sgmltag>" is more common throughout the
            package and the values had to be in the range between 0 and 1,
            what is no percentage information at all.</para>
          </listitem>

          <listitem>
            <para>The possibility to define sinks in XML-turn-definitions was
            firstly described in version 0.9.7</para>
          </listitem>

          <listitem>
            <para>Default turn-percentages have to be divided using ',' since
            version 0.9.7 (prior versions used ';')</para>
          </listitem>

          <listitem>
            <para>The possibility to use csv-files for turning ratios was
            removed for version 0.9.9</para>
          </listitem>
        </itemizedlist>

        <para>Examples:</para>

        <para>Several examples may be found in
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/jtrrouter/</filename>.</para>
      </sect2>

      <sect2 id="user_chp05-od2trips" revision="0.9.7">
        <title revision="0.9.7">Using OD2TRIPS</title>

        <para><application>OD2TRIPS</application> computes trips tables from
        O/D (origin/destination) matrices. <application>OD2TRIPS</application>
        assumes the matrix / the matrices to be coded as amounts of vehicles
        that drive from one district to another within a certain time period.
        Because the generated trips must start and end at edges,
        <application>OD2TRIPS</application> requires a mapping of districts to
        edges. During conversion of VISUM networks with
        <application>NETCONVERT</application> districts stored in the VISUM
        input file are parsed and stored within the generated SUMO network
        file. If you do not use VISUM as input, you must build a districts
        file by your own. The format is given in "<link
        linkend="user_chp05-od2trips-districts">Describing the
        Districts</link>", one of the next subchapters. You have to pass the
        file containing the district definitions to
        <application>OD2TRIPS</application> using the
        <option>--net-file</option> (<option>--net</option> or
        <option>-n</option> for short) option.</para>

        <para>Because <application>OD2TRIPS</application> was used only to
        import data stored in VISUM/VISION/VISSIM formats, it assumes O/D to
        be stored in one of the formats used by these applications. Not all
        VISUM/VISION/VISSIM formats are supported, by now only two, namely the
        "V"- and the "O"-format. If you do not own matrices stored in these
        formats, you still have three possibilities: a) convert them into one
        of the supported formats, b) write your own reader for
        <application>OD2TRIPS</application>, or c) convert them into flow
        definitions and then give them to <application>DUAROUTER</application>
        (see Chapter "<ulink url="#user_chp05-explicite-flows">Using Flow
        Definitions</ulink>"). Both supported formats are described in "<link
        linkend="user_chp05-od2trips-matrices">Describing the Matrix
        Cells</link>", one of the next subchapters. You may either give a list
        of matrices to <application>OD2TRIPS</application> using the
        <option>--od-files</option> (<option>--od</option> or
        <option>-d</option> for short) option followed by the list of files
        separated using a ','.</para>

        <para><application>OD2TRIPS</application> reads all matrices and
        generates trip definitions as described in "<link
        linkend="user_chp05-explicite-trips">Using Trip Definitions</link>".
        The generated trip definitions are numbered starting at zero. You can
        also add a prefix to the generated trip definition names using
        <option>--prefix <replaceable>&lt;STRING&gt;</replaceable></option>.
        As usual, they are written to the output file named using the
        <option>--output-file</option> option (<option>--output</option> or
        <option>-o</option> for short). You can specify a vehicle type to be
        added to the trip definitions using <option>--vtype</option> followed
        by the type name. Please remark that vehicles will have no type unless
        not given in the O/D-matrices or defined using this option. If a type
        is spuulied, but you do not want to include it within the output, set
        the <option>--no-vtype</option> option. The command line option
        overrides type names given in the O/D-matrices. The type itself will
        not be generated. Vehicles will be generated for the time period
        between <option>--begin</option> (<option>-b</option>) and
        <option>--end</option> (<option>-e</option>), having 0 and 86400 as
        default values, respectively. The meaning is the simulation step in
        seconds, as usual.</para>

        <para>Because each O/D-matrix cell describes the amount of vehicles to
        be emitted within a certain time period,
        <application>OD2TRIPS</application> has to compute the vehicle's
        explicite departure times. Normally, this is done by using a random
        time within the time interval a O/D-matrix cell describes. It still is
        possible to emit a cell's vehicles with an uniform time between their
        emissions. Use the option <option>--spread.uniform</option> to enable
        this.</para>

        <para>You can scale the amounts stored in the O/D-matrices using the
        <option>--scale</option> option which assumes a float as parameter.
        All read flows will be multiplied with this value, the default is 1.
        When importing O/D-matrices that cover a whole day, you maybe want to
        apply a curve which resembles the spread of the trip begins found in
        reality. Please read the subchapter "<link
        linkend="user_chp05-od2trips-splitting">Splitting large
        matrices</link>" on this.</para>

        <figure id="img_od2trips">
          <title>Building trips from the OD-matrix</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/simsteps-od2trips.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --net-file | --net | -n )
            <replaceable>&lt;DISTRICT_MAP&gt;</replaceable></option></term>

            <listitem>
              <para>Tells <application>OD2TRIPS</application> to use the
              districts stored in
              <replaceable>&lt;DISTRICT_MAP&gt;</replaceable>.
              <remark>Mandatory, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --od-files | --od | -d )
            <replaceable>&lt;OD_FILE&gt;[,&lt;OD_FILE&gt;]*</replaceable></option></term>

            <listitem>
              <para>Tells <application>OD2TRIPS</application> to use the given
              O/D matrices. <remark>Optional, type:(list of) filename(s),
              default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --output-file | --output | -o )
            <replaceable>&lt;FILENAME&gt;</replaceable></option></term>

            <listitem>
              <para>Forces <application>OD2TRIPS</application> to write the
              generated vehicle trip definitions into
              <replaceable>&lt;FILENAME&gt;</replaceable>. <remark>Mandatory,
              type: filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>(--begin | -b )
            <replaceable>&lt;INT&gt;</replaceable></option></term>

            <listitem>
              <para>The first time step for which trip definitions shall be
              build. <remark>Optional (pregiven), type: int, default:
              0</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>(--end | -e )
            <replaceable>&lt;INT&gt;</replaceable></option></term>

            <listitem>
              <para>The last time step +1 for which trip definitions shall be
              build. <remark>Optional (pregiven), type: int, default:
              86400</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --scale | -s )
            <replaceable>&lt;FLOAT&gt;</replaceable></option></term>

            <listitem>
              <para>A value by which read flow amount shall be multiplied.
              <remark>Optional (pregiven), type: float, default:
              1</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--vtype
            <replaceable>&lt;VEHICLE_TYPE_NAME&gt;</replaceable></option></term>

            <listitem>
              <para>Adds a vehicle type to the trip definitions.
              <remark>Optional, type: string, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--prefix
            <replaceable>&lt;VEHICLE_NAME_PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Adds a prefix to the vehicle names. <remark>Optional,
              type: string, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--no-vtype</option></term>

            <listitem>
              <para>Forces OD2TRIPS not to write the vehicle type into the
              output. <remark>Optional (pregiven), type: bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--spread.uniform</option></term>

            <listitem>
              <para>Forces OD2TRIPS to spread the vehicle departure time
              uniformly for each cell. <remark>Optional (pregiven), type:
              bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--timeline.day-in-hours</option></term>

            <listitem>
              <para>Says OD2TRIPS that the timeline is a list of amounts per
              hour. <remark>Optional (pregiven), type: bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--timeline
            <replaceable>&lt;TIMELINE_DEFINITION&gt;</replaceable></option></term>

            <listitem>
              <para>If --timeline.day-in-hours is set, the string should
              contain 24 floating point values, divided by ';', each
              describing the probability with which a vehicle is emitted into
              the network during the according hour. Otherwise, the string
              should contain a list of time/probability pairs, divided by ';',
              each describing the begin time and the probability for the
              interval defined by this and the next entry. Time and
              probability are divided by ','. <remark>Optional, type: string,
              default: none</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Examples: None yet.</para>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>Changes in 0.9.5 <itemizedlist>
                <listitem>
                  <para>The whole application was rewritten for the 0.9.5.
                  version. Most things still should work as well with older
                  versions, but the options <option>--vtype</option>,
                  <option>--prefix</option>, <option>--timeline</option>, and
                  <option>--timeline.day-in-hours</option> were not
                  available.</para>
                </listitem>

                <listitem>
                  <para>The usage of <option>--od-files</option> and
                  <option>--vissim</option> differs from prior
                  versions.</para>
                </listitem>

                <listitem>
                  <para><option>--od-files</option> was named
                  <option>--od-file</option> in versions prior to
                  0.9.5.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>Changes in 0.9.7<itemizedlist>
                <listitem>
                  <para>The matrice names given in option
                  <option>--od-files</option> should now be devided using a
                  ",", not a ";"</para>
                </listitem>

                <listitem>
                  <para>Coloring trip definitions was removed. This made the
                  <option>--no-color</option> option not needed which was
                  removed, too.</para>
                </listitem>

                <listitem>
                  <para>The timeline entries must be split using a "," instead
                  of a ";". In case of not using a timeline for the whole day,
                  the definition of time is separated using a ":" from the
                  probability (earlier: ",")</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>Changes in 0.9.9<itemizedlist>
                <listitem>
                  <para>The option <option>--vissim</option> is not longer
                  supported - the od-tables have to be given at the command
                  line</para>
                </listitem>

                <listitem>
                  <para>Introduced <option>--no-vtype</option> which forces
                  OD2TRIPS to not write vehicle types into the output
                  file</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist>

        <sect3 id="user_chp05-od2trips-districts">
          <title>Describing the Districts</title>

          <para>A file containing a mapping from districts to edges looks as
          following:</para>

          <programlisting><sgmltag>&lt;districts&gt;</sgmltag>
   <sgmltag>&lt;district id="<replaceable>&lt;DISTRICT_ID&gt;</replaceable>"&gt;</sgmltag>
      <sgmltag>&lt;dsource id="<replaceable>&lt;EDGE_ID&gt;</replaceable>" weight="<replaceable>&lt;PROBABILITY_TO_USE&gt;</replaceable>"/&gt;</sgmltag>
      ... further source edges ...

      <sgmltag>&lt;dsink id="<replaceable>&lt;EDGE_ID&gt;</replaceable>" weight="<replaceable>&lt;PROBABILITY_TO_USE&gt;</replaceable>"/&gt;</sgmltag>
      ... further destination edges ...
   <sgmltag>&lt;/district&gt;</sgmltag>

   ... further districts ...

<sgmltag>&lt;/districts&gt;</sgmltag>
</programlisting>

          <para>This means that a district is described by its
          <sgmltag>id</sgmltag>, being a simple name, and lists of source and
          destination edges. A district should have at least one source and
          one destination edge, each described by its <sgmltag>id</sgmltag>
          and use probability called <sgmltag>weight</sgmltag> herein. These
          edges are used to emit and remove vehicles into/from the network
          respectively. The probability sums of each the source and the
          destination lists are normalized after loading.</para>
        </sect3>

        <sect3 id="user_chp05-od2trips-matrices">
          <title>Describing the Matrix Cells</title>

          <para>To understand how an O/D-matrix is stored, we should remind
          the meanings of the values stored herein. Each matrix describes a
          certain time period. The indices within the matrix are names of the
          origin/destination districts (normally they are equivalent, both
          lists are the same). The values stored within the matrix are amounts
          of vehicles driving from the according origin district to the
          according destination district within the described time
          period.</para>

          <para>The formats used by ptv are described in the
          VISUM-documentation more detailed. All start with a line where the
          type of the O/D-matrix is given, appended to a '$'. The first
          following character tells in which format the table is stored. Then,
          further characters follow which describe which values are supplied
          additionally within the matrix. For further information we ask you
          to consult the documentation supported by ptv. Herein, only the
          supported variants are described.</para>

          <para>The V-format stores the O/D matrix by giving the number of
          districts first and then naming them. After this, for each of the
          named districts, a list of vehicle amounts that leave this district
          is given, sorted by the destination district names as given in the
          district name list. An example may look like this:</para>

          <programlisting>$VMR
<remark>* vehicle type</remark>
4
<remark>* From-Time  To-Time</remark>
7.00 8.00
<remark>* Factor</remark>
1.00
<remark>*
* some
* additional
* comments
* District number</remark>
3
<remark>* names:</remark>
         1          2          3
<remark>*
* District 1 Sum = 6</remark>
         1          2          3
<remark>* District 2 Sum = 15</remark>
         4          5          6
<remark>* District 2 Sum = 24</remark>
         7          8          9 </programlisting>

          <para>The 'M' in the type name indicates that a vehicle type is
          used, the "R" that the values shall be rounded randomly. The second
          information is not processed by <application>OD2TRIPS</application>
          what means that you can parse both V-, VR-, VMR, and VM-matrices.
          Please remark that both the names list and the lists containing the
          amounts are written in a way that no more than 10 fields are stored
          in the same line. Each of the entries they contain seem to be
          left-aligned to a boundary of 11 characters (possibly 10 for the
          name and one space character). Both constraints are not mandatory
          for the importer used in <application>OD2TRIPS</application>.</para>

          <para>The O-format instead simply lists each origin and each
          destination together with the amount in one line (please remark that
          we currently ignore the string after the ';' that occures after the
          type identifier "$OR" in the first line):</para>

          <programlisting>$OR;D2
<remark>* From-Time  To-Time</remark>
7.00 8.00
<remark>* Factor</remark>
1.00
<remark>* some
* additional
* comments
</remark>         1          1       1.00
         1          2       2.00
         1          3       3.00
         2          1       4.00
         2          2       5.00
         2          3       6.00
         3          1       7.00
         3          2       8.00
         3          3       9.00
</programlisting>
        </sect3>

        <sect3 id="user_chp05-od2trips-splitting">
          <title>Splitting large matrices</title>

          <para>Since version 0.9.5 <application>OD2TRIPS</application> allows
          splitting matrices which define a long time period into smaller
          parts which contain definite percentages of the whole. There are two
          ways of defining the amounts the matrix shall be split into. The
          first possibility is to use the option <option>--timeline</option>
          directly. In this case, it should be followed by a list of times and
          probabilities, separated by ','. Each time and probability field is
          made up of two values, an integer time being the simulation time in
          seconds and a floating point number describing the probability.
          These two values are separated using a ':'. At least two values must
          be supplied making the definition of a timeline in this case being
          decribeable by the following BNF-formula:</para>

          <para>&lt;TIME&gt;:&lt;AMOUNT&gt;[,&lt;TIME&gt;:&lt;AMOUNT&gt;]+</para>

          <para>In this case, the matrix will be split into (fields-1) parts
          and each part will have the amount described by the integral within
          the field.</para>

          <para>The second case is rather common in transportation science. It
          allows to split the matrix into 24 subparts - this means the number
          of fields is fixed to 24 - allowing to spread an O/D-matrix over a
          day describing it by hours. To use this, give additionally the
          option <option>--timeline.day-in-hours</option> to
          <application>OD2TRIPS</application>. It the assumes the values from
          the <option>--timeline</option> - option being a list of 24 floats,
          divided by ',', each describing the probability of emitting a
          vehicle within the according hour.</para>

          <para>In both cases, the probabilities are automatically
          normed.</para>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="user_chp05-import_routes">
      <title revision="0.9.7">Importing Routes from other Simulations</title>

      <sect2 id="user_chp05-import_routes-ptv" revision="0.9.5">
        <title>Importing VISSIM und VISUM-routes</title>

        <para>See "<link linkend="user_chp05-od2trips">Using OD2TRIPS</link>"
        for information about how to import O/D-matrices in ptv format.</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp05-dua" revision="0.9.6">
      <title>Dynamic User Assignment and Alternative Routes</title>

      <para>Dynamic Assignment is used to find out which routes the simulated
      driver really would take. One could assume that everyone is traing to
      use the fastest route. But what is the fastest route? Look at the
      network shown in the next picture. It is abvious, that the fastest route
      is the one in the middle of the network, even when considering the tls
      at the end of this road. But as soon as we insert many vehicles into the
      network, all trying to use this route, the edge located at the center
      soon gets full and vehicles need much more time than estimated to pass
      it. In fact, they need longer to pass this edge than if they would try
      to use one of the outer connections.</para>

      <figure id="img_duaexample1">
        <title>Example DUA-network (from
        "&lt;SUMO_DIST&gt;/data/examples/dua/dua3s*")</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="./gfx/user/dua_step1.gif"
                       format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Within Christian Gawron's approach (see <ulink
      url="http://sumo.sourceforge.net/docs/bibliography.shtml#Gawron1998_1">[Gawron1998_1]</ulink>),
      which we use, each driver has a list of routes. At the beginning, we
      build a single route for each driver being the shortest route within an
      empty network - not knowing how many vehicles will use this route. You
      may wonder that two files are built. The file you have named as output
      file and a further file having the additional extension ".alt". Within
      this second file route alternatives - the set of all routes the driver
      knows - are stored.</para>

      <para>After having generated the routes, we let the simulation run
      forcing it to generate edge-based dumps (see chapter 6, "<ulink
      url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml#user_chp06-output-edgelanedump">Aggregated
      Lane/Edge States (Edge/Lane-Dumps)</ulink>"). The router is In fact,
      edge-based dumps are the better choice, because the route is not able to
      use lane-based dumps at all. Now, we have the information about the
      state of the network, meaning the real speeds that were driven within
      it, when all vehicles are using the same route. Now we can pass this
      information to a second call to <application>DUAROUTER</application> and
      now - instead of the previous input file - we give the route
      alternatives file as input using the option
      <option>--alternatives</option> (or <option>-a</option> for short). Now,
      <application>DUAROUTER</application> is capable to compute the new
      shortest routes, based on the real speeds within our simulation. In
      order to avoid that again all vehicles will use the currently shortest
      route only some of the drivers will get the new shortest route. Again,
      two files are generated, a route file which contains the current routes
      and a new route alternatives file. The entries within the new
      alternatives file stay the same for all those drivers who keep their old
      route. Those who got a new route assigned, will get this route stored
      additionally to their previous route within the file. Whether a route is
      replaced by a new, better route is depending on how much better the new
      route is and how fast a driver shall forget his old one. There are two
      parameters determining this: <option>--gBeta</option> and
      <option>--gA</option>. Please see (see <ulink
      url="http://sumo.sourceforge.net/docs/bibliography.shtml#Gawron1998_1">[Gawron1998_1]</ulink>)
      for further information.</para>

      <figure id="img_duaexample2">
        <title>Sketch showing the effects of Christian Gawron dua-approach on
        route distribution within the network; blue color indicates that an
        edge is used within the step, red shows jams</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="./gfx/user/dua_steps.gif"
                       format="GIF" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Still, as the picture above shows, there may be other faster
      routes when again running the simulation, so in order to get a balanced
      assignment, you have to iterate this process several time.</para>

      <para>Here, you may again find the procedure to generate a dynamic user
      assignment:</para>

      <procedure>
        <step>
          <para>Generate the network (see <ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml">chapter
          4</ulink>)</para>
        </step>

        <step>
          <para>Import your routes (see chapter 5, "<ulink
          url="#user_chp05-own_routes">Building own Routes from
          Scratch</ulink>" or "<ulink
          url="#user_chp05-import_routes">Importing Routes from other
          Simulations</ulink>"), generating a routes file and an alternatives
          file</para>
        </step>

        <step>
          <para>Simulate using the network and the routes (see <ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml">chapter
          6</ulink>) forcing <application>SUMO</application> to write
          edge-based dumps (see chapter 6, "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml#user_chp06-output-edgelanedump">Aggregated
          Lane/Edge States (Edge/Lane-Dumps)</ulink>")</para>
        </step>

        <step>
          <para>Compute new routes and alternatives using the previously
          generated alternatives and the edge-based dumps generated within the
          last step</para>
        </step>

        <step>
          <para>Continue with step 3 until the DUA is completed</para>
        </step>
      </procedure>

      <para>How do we know when the dua is completed? In fact. we don't know
      any possibility to determine this, yet. Within very large networks we
      are running mostly about 20 iterations, but this is just a hint. One may
      say, that the dua is finished if there is no further change in the
      aggregated vehicles trip duration. DUA is definitely still a research
      topic. If you are interested in more details than you maybe should take
      a look at "<ulink
      url="http://sumo.sourceforge.net/docs/gen/sumo_moreon_dua.shtml">More
      On... Dynamic User Assignment</ulink>".</para>

      <para>Specific options:</para>

      <variablelist>
        <varlistentry>
          <term><option>( --alternatives | -a )
          <replaceable>&lt;ALTERNATIVES_FILE&gt;</replaceable></option></term>

          <listitem>
            <para>Forces DUAROUTER to use the previously generated
            <replaceable>&lt;ALTERNATIVES_FILE&gt;</replaceable> as input.
            <remark>Optional, type:filename, default: none</remark></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--gBeta
          <replaceable>&lt;FLOAT&gt;</replaceable></option></term>

          <listitem>
            <para>Defines Christian Gawron's beta. <remark>Optional
            (pregiven), type:float, default: 0.3</remark></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--gA
          <replaceable>&lt;FLOAT&gt;</replaceable></option></term>

          <listitem>
            <para>Defines Christian Gawron's alpha. <remark>Optional
            (pregiven), type:float, defaults: 0.05</remark></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Examples:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due2s_singlestep/</filename>
          contains configuration files for the first three steps of a dynamic
          user assignment in a network with two possible ways.</para>
        </listitem>

        <listitem>
          <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due2s_automatic/</filename>
          uses the same input as
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due2s_singlestep/</filename>,
          but the iterations are done using a script.</para>
        </listitem>

        <listitem>
          <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due3s_singlestep/</filename>
          contains configuration files for the first three steps of a dynamic
          user assignment in a network with three possible ways.</para>
        </listitem>

        <listitem>
          <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due3s_automatic/</filename>
          uses the same input as
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/dua/due3s_singlestep/</filename>,
          but the iterations are done using a script.</para>
        </listitem>
      </itemizedlist>

      <sect2 id="user_chp05-dua-iterate" revision="0.9.6">
        <title>Automatic Iteration using 'dua-iterate.pl'</title>

        <para>"<command>dua-iterate.pl</command>" helps you to perform the
        computation of a dynamic user assignment. The script needs at least
        two parameter: the path to the folder where your SUMO-binaries are
        located and the number of iteration steps to perform. When started
        with these two options, the script computes the given number of
        dua-steps. As input two files have to be located in the same folder as
        the script: a SUMO-network named "<filename>net.net.xml</filename>"
        and a set of trip definitions named
        "<filename>trips.trips.xml</filename>". if you want to start with
        another routes definition, you have to change this within the script's
        source code.</para>

        <para>Within each iteration step, the script generates a configuration
        file for the <application>DUAROUTER</application> and starts
        <application>DUAROUTER</application> with this configuration file.
        Then, a configuration file for <application>SUMO</application> is
        built and <application>SUMO</application> ist started. Both
        configuration files are competely defined within the script itself. As
        default, for each time step, <application>SUMO</application> will
        generate three dump files with edge-dumps aggregated over 150, 300,
        and 900s, an emissions and a trip information output. The names of
        these outputs are numbered over the iteration steps. If you want to
        change the outputs, you also have to take a look into the script, but
        you should not disable the edge-based dump for aggregation over 900s,
        because this is read by the <application>DUAROUTER</application> in
        the next iteration steps in order to compute the DUA.</para>

        <para>When started with a third parameter, the second parameter given
        will be interpreted as the start iteration step and the third as the
        end iteration step.</para>

        <para>This useful script is located in
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/dua_tools/</filename>.</para>

        <para>Synopsis:</para>

        <screen>dua-iterate.pl <replaceable>&lt;PATH_TO_SUMO_BINARIES&gt;</replaceable> <optional>[<replaceable>&lt;BEGIN_ITERATION_STEP&gt;</replaceable>]</optional> <replaceable>&lt;END_ITERATION_STEP&gt;</replaceable></screen>

        <sect3 id="user_chp05-dua-iterate-printProgress" revision="0.9.6">
          <title>Tracking the progress online using "printProgress.pl"</title>

          <para>printProgress.pl is a small script which, started in the
          folder the dua-iterate.pl - iteration takes place - shows how many
          vehicles were running at the end of the simulation. This helps to
          see how good the current assignment is (see also "<ulink
          url="http://sumo.sourceforge.net/docs/gen/sumo_moreon_dua.shtml">More
          On... Dynamic User Assignment</ulink>").</para>

          <para>This script is located in
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/dua_tools/</filename>.</para>

          <para>Synopsis:</para>

          <screen>printProgress.pl</screen>

          <para>Recent changes:</para>

          <itemizedlist>
            <listitem>
              <para><command>printProgress.pl</command> is a part of the
              distribution since version 0.9.6.</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="user_chp05-additional_weights">
      <title revision="0.9.6">Additional Weights</title>

      <para>From version 0.8.0.1 on, SUMO is capable to load additional
      weights for edges. The idea behind this is to virtually increase the
      costs for an edge in order to make it less attractive to pass.
      Additional weights are used by <application>DUAROUTER</application> only
      and are supplied using the <option>--supplementary-weights
      <replaceable>&lt;FILE&gt;</replaceable></option> (or <option>--add
      <replaceable>&lt;FILE&gt;</replaceable></option> or <option>-S
      <replaceable>&lt;FILE&gt;</replaceable></option>) - option. A file
      containing additional weights looks like this:</para>

      <programlisting><sgmltag>&lt;supplementary-weights&gt;</sgmltag>
   <sgmltag>&lt;interval begin="60" end="119"&gt;</sgmltag>
      <sgmltag>&lt;edge id="1fi" absolute="42" factor="2.5" summand="-21"/&gt;</sgmltag>
      <sgmltag>&lt;edge id="2o" factor="13"/&gt;</sgmltag>

      ... further weights ...

   <sgmltag>&lt;/interval&gt;</sgmltag>
   <sgmltag>&lt;interval begin="120" end="179"&gt;</sgmltag>
      <sgmltag>&lt;edge id="1fi" absolute="48" factor="2.5"/&gt;</sgmltag>
      <sgmltag>&lt;edge id="2o" summand="7"/&gt;</sgmltag>

      ... further weights ...

  <sgmltag> &lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/supplementary-weights&gt;</sgmltag></programlisting>

      <para>When additional weights are supplied, the DUA-Router first looks
      whether an additional, absolute value has been provide for the currently
      watched edge (value of the "<sgmltag>absolute</sgmltag>"-attribute for
      the current edge and time). If so, this value will be used. If not,
      either the edge's loaded weight (if available for the current time step)
      or the default value (length/vallowed) will be changed first by applying
      the loaded factor (value of the "<sgmltag>factor</sgmltag>"-attribute
      for the current edge and time) and than by the loaded addend (value of
      the "<sgmltag>summand</sgmltag>"-attribute for the current edge and
      time).</para>

      <para>You can also use GUISIM to generate an additional weights file
      using the interface which appears when choosing "<guimenu>Edit-&gt;Edit
      Additional Weights...</guimenu>".</para>

      <para>Recent Changes:</para>

      <itemizedlist>
        <listitem>
          <para>The format has changed in version 0.9.6</para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="user_chp05-dfrouter" revision="0.9.5">
      <title>Using Detectors and DFROUTER</title>

      <para>Since version 0.9.5, the SUMO-package contains a further routing
      module named <application>DFROUTER</application>. The idea behind this
      router is that nowadays, most highways are well equipped with induction
      loops, measuring each of the highways' entering and leaving flows. Given
      this information one may assume that the flows on the highway are
      completely known. <application>DFROUTER</application> uses directly the
      information collected from induction loops to rebuild the vehicle
      amounts and routes. This is done in several steps, being mainly:</para>

      <procedure>
        <step>
          <para>Computing (and optionally saving) the detector types in the
          means that each induction is set to be a source detector, a sink
          detector or an in-between detector</para>
        </step>

        <step>
          <para>Computing (and optionally saving) the routes between the
          detectors</para>
        </step>

        <step>
          <para>Computing the flow amounts between the detectors</para>
        </step>

        <step>
          <para>Saving the flow amounts and further control structures</para>
        </step>
      </procedure>

      <para>In the following we will describe the steps more deeply, giving
      the command line options that steer the process.</para>

      <caution>
        <para>This is a new application. Its usage and the way it works will
        surely change in the future.</para>
      </caution>

      <para>Examples: none yet</para>

      <sect2 id="user_chp05-dfrouter-detector_types">
        <title>Computing Detector Types</title>

        <para>The idea behind the <application>DFROUTER</application> assumes
        that a network is completely covered by detectors, meaning that all
        off- and on-ramps have an induction loop placed on them. Such an
        information whether an induction loop is a pure source or sink or
        whether it is placed between such is but not given initially. It must
        be computed. To do this, the <application>DFROUTER</application> needs
        the underlying network as well as a list of detector definitions where
        each describes the position of an induction loop. The network, being a
        previously build SUMO-network, is supplied to the
        <application>DFROUTER</application> as usually using the <option>(
        --net-file | --net | -n )
        <replaceable>&lt;SUMO_NET_FILE&gt;</replaceable></option> - option,
        the list of induction loops using <option>--detector-files</option>
        (or <option>--detectors</option> or <option>-d</option> for short)
        <option><replaceable>&lt;DETECTOR_FILE&gt;[,&lt;DETECTOR_FILE&gt;]+</replaceable></option>.
        A detector file should look as following:</para>

        <programlisting><sgmltag>&lt;detectors&gt;</sgmltag>
   <sgmltag>&lt;detector_definition id="<replaceable>&lt;DETECTOR_ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POS&gt;</replaceable>"/&gt;</sgmltag>
... further detectors ...<sgmltag>
&lt;/detectors&gt;</sgmltag></programlisting>

        <para>This means that each detector is initially described using its
        id, a lane it is placed on, and a position on the lane. To be
        exact:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>id</sgmltag>: A string holding the id of the
            detector</para>
          </listitem>

          <listitem>
            <para><sgmltag>lane</sgmltag>: The id of the lane the detector
            lies on. Must be a lane within the network.</para>
          </listitem>

          <listitem>
            <para><sgmltag>pos</sgmltag>: The position on the lane the
            detector shall be laid on in meters. The position must be a value
            between -1*lane's length and the lane's length. In the case of a
            negative value, the position will be computed backward from the
            lane's end (the position the vehicles drive towards).</para>
          </listitem>
        </itemizedlist>

        <para>Given a network and the list of detectors,
        <application>DFROUTER</application> assigns types to detectors and
        saves the so extended list into a file if the option
        <option>--detectors-output
        <replaceable>&lt;DETECTOR_OUTPUT_FILE&gt;</replaceable></option> is
        given. This list looks like the input described above except that an
        aditional attribute is given for each detector,
        "<sgmltag>type</sgmltag>", which may have one of the following values:
        "<sgmltag>source</sgmltag>", "<sgmltag>sink</sgmltag>",
        "<sgmltag>between</sgmltag>", and "<sgmltag>discarded</sgmltag>". You
        can also generate a list of points of interests (POIs) which can be
        read by GUISIM where each POI represents a detector and is colored by
        the detector type: green for source detectors, red for sink detectors,
        blue for in-between detectors, and black for discarded detectors. To
        force DFROUTER to do this, use <option>--detectors-poi-output
        <replaceable>&lt;POI_FILENAME&gt;</replaceable></option>.</para>

        <para>When wished, if for example other parameters chage, the extended
        <replaceable>&lt;DETECTOR_OUTPUT_FILE&gt;</replaceable> can be fed
        back again into <application>DFROUTER</application> instead of the
        previous <replaceable>&lt;DETECTOR_FILE&gt;</replaceable>. In this
        case the detector types do not have to be computed again. To force
        <application>DFROUTER</application> to recompute the types though, use
        <option>--revalidate-detectors</option>.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --detector-files | --detectors | -d )
            <replaceable>&lt;DETECTOR_FILE&gt;[,&lt;DETECTOR_FILE&gt;]+</replaceable></option></term>

            <listitem>
              <para>The list of descriptions of detectors to use.
              <remark>Mandatory, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--detectors-output
            <replaceable>&lt;DETECTOR_OUTPUT_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>The file to write extended detector descriptions into.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--detectors-poi-output
            <replaceable>&lt;POI_FILENAME&gt;</replaceable></option></term>

            <listitem>
              <para>Writes a list of points of interest into &lt;&gt; where
              each poi represents a detector and is colored by the detector
              type. <remark>Optional, type:filename, default:
              none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--revalidate-detectors</option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> to recompute
              the detector types even if they were given in
              <replaceable>&lt;DETECTOR_FILE&gt;</replaceable>.
              <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="user_chp05-dfrouter-routes">
        <title>Computing Routes</title>

        <para>Now that we do know where vehicles enter and where they leave
        the network, we may compute routes for each of the pairs. The
        <application>DFROUTER</application> is told to build and save routes
        using <option>--routes-output
        <replaceable>&lt;ROUTE_OUTPUT_FILE&gt;</replaceable></option> where
        <replaceable>&lt;ROUTE_OUTPUT_FILE&gt;</replaceable> is the name of
        the file the computed routes shall be written to. The generated file
        only contains routes, no vehicle type definitions and no vehicles. In
        later runs, you can omit the routes computation by supplying
        previously generated routes using <option>--routes-input</option> (or
        <option>-r</option>)
        <option><replaceable>&lt;ROUTE_FILE&gt;</replaceable></option>. Again,
        as during the computation of the detector types, you can force
        <application>DFROUTER</application> to recompute the routes even if
        suppling them using <option>--revalidate-routes</option>.</para>

        <para>Normally, only routes starting at source detectors and ending at
        sink detectors are computed. Using the option
        <option>--routes-for-all</option> you can force
        <application>DFROUTER</application> to also build routes that start at
        in-between detectors. The option <option>--all-end-follower</option>
        will make the routes not end at the edge the source detector is placed
        on, but on all edges that follow this edge.
        <option>--keep-unfound-ends</option> will also keep those routes where
        a sink detector could not be found for what may be the case if the
        network is not completely covered with induction loops.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>--routes-output
            <replaceable>&lt;ROUTE_OUTPUT_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Names the file to save computed routes into.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>( --routes-input | -r)
            <replaceable>&lt;ROUTE_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Uses routes from
              <replaceable>&lt;ROUTE_FILE&gt;</replaceable>. Omits route
              computation unless <option>--revalidate-routes</option> is set.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--revalidate-routes</option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> to recompute
              routes even if some where supplied. <remark>Optional (pregiven),
              type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--routes-for-all</option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> also to save
              routes starting at in-between detectors. <remark>Optional
              (pregiven), type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--all-end-follower</option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> to end the
              routes at edges beyond the sink detectors. <remark>Optional
              (pregiven), type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--keep-unfound-ends</option></term>

            <listitem>
              <para>Forces
              <application><application>DFROUTER</application></application>
              to keep routes which last detector was an in-between detector.
              <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="user_chp05-dfrouter-flows">
        <title>Computing Flows</title>

        <para>The next step is to use the computed routes and flow amounts
        from the real-world detectors to compute flows across the modelled
        network. The flows are given to <application>DFROUTER</application>
        using <option>--detector-flow-files</option> (or
        <option>--detflows</option>, <option>-f</option> for short)
        <option><replaceable>&lt;DETECTOR_FLOWS&gt;[,&lt;DETECTOR_FLOWS&gt;]+</replaceable></option>.
        They are assumed to be stored in CSV-format using ';' as dividing
        character. The file should look as following:</para>

        <programlisting>Detector;Time;qPKW;qLKW;vPKW;vLKW
myDet1;0;10;2;100;80
... further entries ...</programlisting>

        <para>This means the first time has to name the entries (columns).
        Their order is not of importance, but at least the following columns
        must be included:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><property>Detector</property>: A string holding the id of
            the detector this line describes; should be one of the ids used in
            &lt;DETECTOR_FILE&gt;</para>
          </listitem>

          <listitem>
            <para><property>Time</property>: The time period begin this entry
            describes</para>
          </listitem>

          <listitem>
            <para><property>qPKW</property>: The number of passenger cars that
            drove over the detector within this time period</para>
          </listitem>

          <listitem>
            <para><property>qLKW</property>: The number of transport vehicles
            that drove over the detector within this time period</para>
          </listitem>

          <listitem>
            <para><property>vPKW</property>: The average speed of passenger
            cars that drove over the detector within this time period in
            km/h</para>
          </listitem>

          <listitem>
            <para><property>vLKW</property>: The average speed of transport
            vehicles that drove over the detector within this time period in
            km/h</para>
          </listitem>
        </itemizedlist>

        <para>These are not quite the values to be found in induction loop
        output. We had to constrain the
        <replaceable>&lt;DETECTOR_FLOWS&gt;</replaceable> files this way
        because <application>DFROUTER</application> is meant to read very many
        of such definitions and to do this as fast as possible.</para>

        <para>Because in some cases one reads detector flow definitions
        starting at a certain time but wants his simulation begin at another,
        it is possible to add a time offset using <option>--time-offset
        <replaceable>&lt;TIME_OFFSET&gt;</replaceable></option> which is
        subtracted from the read times.
        <replaceable>&lt;TIME_OFFSET&gt;</replaceable> is meant to be an int
        representing seconds.</para>

        <para>Specific options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --detector-flow-files | --detflows | -f)
            <replaceable>&lt;DETECTOR_FLOWS&gt;[,&lt;DETECTOR_FLOWS&gt;]+</replaceable></option></term>

            <listitem>
              <para>Describes the files to read detector flows from.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--time-offset
            <replaceable>&lt;TIME_OFFSET&gt;</replaceable></option></term>

            <listitem>
              <para>Gives a time offset to be subtracted from the times read
              from detector flows. <remark>Optional (pregiven), type:int,
              default: 0</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Recent changes</para>

        <itemizedlist>
          <listitem>
            <para>Changes in version 0.9.6</para>

            <itemizedlist>
              <listitem>
                <para>vPKW and vLKW should now be supplied in km/h, not in
                m/s</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Changes in version 0.9.x</para>

            <itemizedlist>
              <listitem>
                <para><option>--fast-flows</option> is no longer
                existing</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp05-dfrouter-output">
        <title>Saving Flows and other Values</title>

        <para>If flow definitions were supplied, we can let the
        <application>DFROUTER</application> save the computed vehicles
        together with their routes. Because vehicles will be emitted at the
        source detectors which are placed at certain positions of the
        networks' lanes, emitters (see "<link
        linkend="user_chp06-vehicle_handling-emitter">Emitter</link>") are
        used to insert those vehicles into the network. You can force the
        <application>DFROUTER</application> to generate such emitters using
        <option>--emitters-output
        <replaceable>&lt;EMITTER_OUTPUT_FILE&gt;</replaceable></option>. This
        file will contain emitter declarations for each of the source
        detectors. If no value is given, emitters will not be written.
        Accompanying, there will be emitter definitions written named
        "<filename>emitter_<replaceable>&lt;DETECTOR_ID&gt;</replaceable>.def.xml</filename>"
        where <replaceable>&lt;DETECTOR_ID&gt;</replaceable> is the id of the
        according source detector. These definitions are called within the
        <replaceable>&lt;EMITTER_OUTPUT_FILE&gt;</replaceable> and contain
        vehicles which depart the emitter in accordance to the read flows and
        have routes computed using the flows.</para>

        <para>As some approaches use a speed limit to avoid open-end boundary
        problems, the <application>DFROUTER</application> can generate a list
        of speed triggers (see "<link
        linkend="user_chp06-management-vss">Variable Speed Signs
        (VSS)</link>") placed on the positions of sink detectors. The name to
        save the declaration of these speed triggers into is given using the
        option <option>--speed-trigger-output
        <replaceable>&lt;VSS_OUTPUT_FILE&gt;</replaceable></option>. The
        according speed trigger definitions will be written into files named
        "<filename>vss_<replaceable>&lt;DETECTOR_ID&gt;</replaceable>.def.xml</filename>"
        where <replaceable>&lt;DETECTOR_ID&gt;</replaceable> is the name of
        the according sink detector.</para>

        <para>In order not to end vehicle routes on off-ramps, it is possible
        to place rerouters (see "<link
        linkend="user_chp06-management-rerouter">Rerouter</link>") at the
        positions of the sink detectors, too. Giving the option
        <option>--end-reroute-output
        <replaceable>&lt;REROUTER_OUTPUT_FILE&gt;</replaceable></option> will
        generate a list of rerouter declarations. Please remark that in this
        case, no rerouter definitions are written, because the
        <application>DFROUTER</application> has no further information about
        possible routes beyond the area covered by the detectors.</para>

        <para>It's quite nice to have the possibility to check whether the
        simulation does what one wants. To validate whether the same flows are
        found within the simulation as within the reality, the option
        <option>--validation-output
        <replaceable>&lt;SUMO_DETECTORS_OUTPUT&gt;</replaceable></option> may
        be helpful. It generates a list of detector definitions (E1/induction
        loops, see "<link
        linkend="user_chp06-output-detectors-e1">E1-Detectors (Induction
        Loops)</link>") placed at the positions of sink and in-between
        detectors. Their output will be saved into files named
        "<filename>validation_det_<replaceable>&lt;DETECTOR_ID&gt;</replaceable>.xml</filename>"
        and should be easily comparable to the detector flows previously fed
        to the router. The option<option>
        --validation-output.add-sources</option> will let
        <application>DFROUTER</application> also build E1-detectors for source
        detectors which are place 1m behind the real-life detector's
        position.</para>

        <variablelist>
          <varlistentry>
            <term><option>--emitters-output
            <replaceable>&lt;EMITTER_OUTPUT_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> to write
              emitter declarations for source detectors into
              <replaceable>&lt;EMITTER_OUTPUT_FILE&gt;</replaceable>.
              Additionally, emitter definitions are written. <remark>Optional,
              type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--speed-trigger-output
            <replaceable>&lt;VSS_OUTPUT_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> to write speed
              trigger declarations for sink detectors into
              <replaceable>&lt;VSS_OUTPUT_FILE&gt;</replaceable>.
              Additionally, speed trigger definitions are written.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--end-reroute-output
            <replaceable>&lt;REROUTER_OUTPUT_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> to write
              rerouter declarations for sink detectors into
              <replaceable>&lt;REROUTER_OUTPUT_FILE&gt;</replaceable>.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--validation-output
            <replaceable>&lt;SUMO_DETECTORS_OUTPUT&gt;</replaceable></option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> to write
              validation detector definitions for sink and in-betweed
              detectors into
              <replaceable>&lt;SUMO_DETECTORS_OUTPUT&gt;</replaceable>.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--validation-output.add-sources</option></term>

            <listitem>
              <para>Forces <application>DFROUTER</application> to include
              source detectors in the validation detector output.
              <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>

    <sect1 id="user_chp05-closing">
      <title>Closing Thoughts (so far)</title>

      <para>If you are want to simulate small scenarios only, with a few
      vehicles, you probably should try to work with routes where each vehicle
      is duplicated. This needs only a small amount of editing and lets you
      fill the simulation fast. This has been done for most of the examples
      within the example data. Trying to generate own OD-matrices is not to be
      adviced, because handling of such is not really well supported by the
      package. Using flows generated by hand may be a possibility, but for
      small scenarios, flows seem more clumsy than routes.</para>

      <para>In some cases, flows at each junction are counted and how many
      vehicles are driving in which direction. This is exactly what
      <application>JTRROUTER</application> resembles.</para>
    </sect1>

    <sect1 id="user_chp05-changes">
      <title>Recent Changes</title>

      <para>The following list contains recent changes in the naming or
      meaning of options. It has been started during the work on version
      0.9.2, so earlier changes are not contained, herein. The changes list
      contains the version where the change occured or will occure. The
      changes should be valid for the next stable release.</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Changes in version 0.9.3</para>

          <itemizedlist>
            <listitem>
              <para>There was a bug on using flow in prior versions; the end
              time step was also used making the behaviour not as good
              predictable. This has been now changed so that the vehicles are
              emitted in steps starting at
              <sgmltag><replaceable>&lt;begin&gt;</replaceable></sgmltag> and
              ending at
              <sgmltag><replaceable>&lt;end&gt;</replaceable></sgmltag>-1.</para>
            </listitem>

            <listitem>
              <para>Types given in trips were always replaced by
              "KRAUSS_DEFAULT". This has been patched. Now the type you
              specify will be used and only if no type information was given,
              "KRAUSS_DEFAULT" will be used.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Changes in version 0.9.5</para>

          <itemizedlist>
            <listitem>
              <para><application>OD2TRIPS</application> was rewritten for the
              0.9.5. version. Most things still should work as well with older
              versions, but the options <option>--vtype</option>,
              <option>--prefix</option>, <option>--timeline</option>, and
              <option>--timeline.day-in-hours</option> were not
              available.</para>
            </listitem>

            <listitem>
              <para>The usage of <option>--od-files</option> and
              <option>--vissim</option> within
              <application>OD2TRIPS</application> differs from prior
              versions.</para>
            </listitem>

            <listitem>
              <para><option>--od-files</option> was named
              <option>--od-file</option> in
              <application>OD2TRIPS</application> versions prior to
              0.9.5.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Changes in version 0.9.6</para>

          <itemizedlist>
            <listitem>
              <para><command>printProgress.pl</command> is a part of the
              distribution since version 0.9.6.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="user_chp05-missing" revision="0.9.5">
      <title>Missing</title>

      <para><option>--lane-weights</option> is not tested and described</para>

      <para><option>--scheme</option> is not implemented and described</para>

      <para><option>--max-alternatives</option> is not tested and
      described</para>

      <para><option>--prune-random</option> is not tested and described</para>

      <para>spread uniformly of <application>DFROUTER</application> is not
      described</para>
    </sect1>
  </chapter>

  <chapter id="user_chp06">
    <title>Performing the Simulation</title>

    <para>Having the network description and the routes you have everything to
    perform a simulation. The fastest way to get results - their different
    types will be described within the following sub-chapters - is to use the
    SUMO - command line simulation. This command line tool does not generate
    any graphical output as the SUMO-GUI does, but is much faster in
    execution.</para>

    <para>To start a simulation, you have to supply the following
    information:</para>

    <itemizedlist spacing="normal">
      <listitem>
        <para>The file that contains the network</para>

        <para>Use the <option>--net-file</option> (or <option>--net</option>
        or <option>-n</option>)
        <option><replaceable>&lt;FILE&gt;</replaceable></option> option to
        pass the simulation the name of the network to use. The network must
        be one build using <application>NETCONVERT</application> or
        <application>NETGEN</application>.</para>
      </listitem>

      <listitem>
        <para>The routes to use</para>

        <para>Use the <option>--route-files</option> (or
        <option>--routes</option> or <option>-r</option>)
        <option><replaceable>&lt;FILE&gt;</replaceable>[,<replaceable>&lt;FILE&gt;</replaceable>]*</option>
        option to specify which files shall be used to read routes from. In
        this case, the name is not ambigous - multiple files can be
        used.</para>
      </listitem>

      <listitem>
        <para>The simulation time the simulation begins at</para>

        <para>This is the first time step the simulation has to perform. Be
        aware, that this time should fit to the time your routes start. Pass
        it to <application>SUMO</application> using <option>--begin</option>
        (or <option>-b</option>)
        <option><replaceable>&lt;INT&gt;</replaceable></option> where
        <option><replaceable>&lt;INT&gt;</replaceable></option> is the time
        step in seconds.</para>
      </listitem>

      <listitem>
        <para>The simulation time the simulation ends at</para>

        <para>This is the last step of the simulation. When this time step is
        reached, the simulation will end. Pass it to
        <application>SUMO</application> using <option>--end</option> (or
        <option>-e</option>)
        <option><replaceable>&lt;INT&gt;</replaceable></option> where
        <option><replaceable>&lt;INT&gt;</replaceable></option> is the time
        step in seconds.</para>
      </listitem>
    </itemizedlist>

    <para>All these values must be given in order to perform a simulation.
    Still, no output is generated. Generating output is described in the next
    chapter. Besides this, there are also some other additional structures
    which may be applied to the simulation scenario and of course there are
    some more questions to answer about inserting vehicles into the
    net.</para>

    <sect1 id="user_chp06-output" revision="0.9.8">
      <title>Output Generation</title>

      <para>Due to its scientific purpose, SUMO tasks lie beyond simple
      visualisation of traffic. The results of a simulation must be available
      and one must be able to process them. In the next subchapters,
      possibilities to generate output are described.</para>

      <sect2 id="user_chp06-output-detectors">
        <title>Detectors</title>

        <para>One possibility to generate output is to use so called
        "detectors". You will find detectors one knows from the real world
        such as induction loops but also some virtual ones. Basically, the
        main distinction between detector types SUMO offers is their
        dimension. The next list shows all available detector types. Their
        type names "E*" have their origin in the German word
        "Erfassungsbereich" meaning "detection area".</para>

        <itemizedlist>
          <listitem>
            <para>E1: Induction loops</para>

            <para>Induction loops have a position only and no areal
            dimensions. They are meant to be a slice plane through a single
            lane and measure only the vehicles passing them.</para>
          </listitem>

          <listitem>
            <para>E2: Areal, lane-based detectors</para>

            <para>These detectors describe a part of a lane or alternatively a
            part of the network made up of consecutive lanes (a begin lane and
            his predecessors). The measured values are derived from the
            movements over the whole part of the network the detector is lying
            at.</para>
          </listitem>

          <listitem>
            <para>E3: Multi-Origin/Multi-Destination detectors</para>

            <para>E3-detectors measure vehicles passing a set of entry and an
            according set of exit points. Each of these points is a position
            on a lane. Measured are values that may be derived from the
            movements of vehicles between any of the entry and any of the exit
            points.</para>
          </listitem>
        </itemizedlist>

        <para>In addition to this, SUMO offers further detectors, which are
        not bound to certain places within the network.</para>

        <itemizedlist>
          <listitem>
            <para>VTypeProbe: Dumps vehicle states for a given vehicle
            type</para>

            <para>VTypeProbes write information about all vehicles of a
            certain, defined type every n seconds. The vehicles' speed and
            position is written, where position is encoded as the current lane
            and position on this lane, cartesian x- and y-coordinate, and, if
            the network contains a projection, as lat-/lon-coordinates.</para>
          </listitem>
        </itemizedlist>

        <para>To supply the definitions of these structures to the simulation,
        we use an additional file and pass it to
        <application>SUMO</application> or <application>GUISIM</application>
        using the <option>--additional-files</option> (<option>-a</option>) -
        option. Each of these files may contain all the definitions about
        additional structures such as detectors, emitters, etc., in random
        order.</para>

        <caution>
          <para>Please note that all output have not yet been verified for sub
          second simulation.</para>
        </caution>

        <sect3 id="user_chp06-output-detectors-e1">
          <title>E1-Detectors (Induction Loops)</title>

          <para>An induction loop is defined this way:</para>

          <programlisting><sgmltag>&lt;e1-detector id="<replaceable>&lt;ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"
   freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>" file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" [friendly_pos="x"]/&gt;</sgmltag></programlisting>

          <para>The "<sgmltag>id</sgmltag>" is any string by which you can
          name the detector. The attributes "<sgmltag>lane</sgmltag>" and
          "<sgmltag>pos</sgmltag>" describe on which lane and at which
          position on this lane the detector shall lay. The
          "<sgmltag>freq</sgmltag>"-attribute describes the period over which
          collected values shalle be aggregated. The "<sgmltag>file</sgmltag>"
          attribute tells the simulation to which file the detector shall
          write his results into. The file will be generated, does not have to
          exist earlier and will be overwritten if existing without any
          warning. The folder the output file shall be generated in must
          exist.</para>

          <para>The attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              detector</para>
            </listitem>

            <listitem>
              <para><sgmltag>lane</sgmltag>: The id of the lane the detector
              shall be laid on. The lane must be a part of the network
              used.</para>
            </listitem>

            <listitem>
              <para><sgmltag>pos</sgmltag>: The position on the lane the
              detector shall be laid on in meters. The position must be a
              value between -1*lane's length and the lane's length. In the
              case of a negative value, the position will be computed backward
              from the lane's end (the position the vehicles drive
              towards).</para>
            </listitem>

            <listitem>
              <para><sgmltag>freq</sgmltag>: The aggregation period the values
              the detector collects shall be summed up.</para>
            </listitem>

            <listitem>
              <para><sgmltag>file</sgmltag>: The path to the output file. The
              path may be relative.</para>
            </listitem>

            <listitem>
              <para><sgmltag>friendly_pos</sgmltag>: If set, no error will be
              reported if the detector is placed behind the lane. Instead, the
              detector will be placed 0.1 meters from the lane's end or at
              position 0.1, if the position was negative and larger than the
              lane's length after multiplication with -1.</para>
            </listitem>
          </itemizedlist>

          <para>A single data line within the output of a simulated
          e1-detector looks as following (the line is not broken within the
          output):</para>

          <programlisting><sgmltag>&lt;interval begin="<replaceable>&lt;BEGIN_TIME&gt;</replaceable>" end="<replaceable>&lt;END_TIME&gt;</replaceable>" id="<replaceable>&lt;DETECTOR_ID&gt;</replaceable>" \
   nVehContrib="<replaceable>&lt;MEASURED_VEHICLES&gt;</replaceable>" flow="<replaceable>&lt;FLOW&gt;</replaceable>" \
   occupancy="<replaceable>&lt;OCCUPANCY&gt;</replaceable>" speed="<replaceable>&lt;MEAN_SPEED&gt;</replaceable>" length="<replaceable>&lt;MEAN_LENGTH&gt;</replaceable>" \
   nVehEntered="<replaceable>&lt;ENTERED_VEHICLES&gt;</replaceable>"/&gt;</sgmltag></programlisting>

          <para>The values are described in the following table.</para>

          <table>
            <title>Definition of values generated by e1-detectors</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Measure</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><sgmltag>begin</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The first time step the values were collected
                  in</entry>
                </row>

                <row>
                  <entry><sgmltag>end</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The last time step the values were collected in (may
                  be equal to begin)</entry>
                </row>

                <row>
                  <entry><sgmltag>id</sgmltag></entry>

                  <entry><literal>-</literal></entry>

                  <entry>The id of the detector (needed if several detectors
                  share an output file)</entry>
                </row>

                <row>
                  <entry><sgmltag>nVehContrib</sgmltag></entry>

                  <entry><literal>#vehicles</literal></entry>

                  <entry>The number of vehicles that have completely passed
                  the detector within the interval</entry>
                </row>

                <row>
                  <entry><sgmltag>flow</sgmltag></entry>

                  <entry><literal>vehicles/hour</literal></entry>

                  <entry>The number of contributing vehicles extrpolated to an
                  hour</entry>
                </row>

                <row>
                  <entry><sgmltag>occupancy</sgmltag></entry>

                  <entry><literal>%</literal></entry>

                  <entry>The percentage (0-100%) of the time a vehicle was at
                  the detector.</entry>
                </row>

                <row>
                  <entry><sgmltag>speed</sgmltag></entry>

                  <entry><literal>m/s</literal></entry>

                  <entry>The mean velocity of all completely collected
                  vehicles.</entry>
                </row>

                <row>
                  <entry><sgmltag>length</sgmltag></entry>

                  <entry><literal>m</literal></entry>

                  <entry>The mean length of all completely collected
                  vehicles.</entry>
                </row>

                <row>
                  <entry><sgmltag>nVehEntered</sgmltag></entry>

                  <entry><literal>#vehicles</literal></entry>

                  <entry>All vehicles that have touched the detector. Includes
                  vehicles which have not passed the vehicle completely (and
                  which do not contribute to collected values).</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>The attribute "<sgmltag>friendly_pos</sgmltag>" is
              available since version 0.9.4.</para>
            </listitem>

            <listitem>
              <para>As detectors have been reworked for version 0.9.8, some
              used measures may have changed. Please consult the table
              above.</para>
            </listitem>

            <listitem>
              <para>Since version 0.9.8, the attribute
              "<sgmltag>style</sgmltag>" is marked as deprecated, a warning is
              generated</para>
            </listitem>

            <listitem>
              <para>Using element name "<sgmltag>detector</sgmltag>" together
              with a <sgmltag>type</sgmltag> is marked as deprecated since
              version 0.9.8, a warning is generated</para>
            </listitem>

            <listitem>
              <para>The usage of attribute "<sgmltag>friendly_pos</sgmltag>"
              was reworked for version 0.9.8</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-detectors-e2">
          <title>E2-Detectors (Areal, lane-based Detectors)</title>

          <para>An e2-detector is defined the following way:</para>

          <programlisting><sgmltag>&lt;e2-detector id="<replaceable>&lt;ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"
   length="<replaceable>&lt;DETECTOR_LENGTH&gt;</replaceable>" freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>" 
   file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [jam_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [friendly_pos="x"]/&gt;</sgmltag></programlisting>

          <para>Most of the attributes have the same meaning as for induction
          loops. As an areal detector has a certain length,
          "<sgmltag>length</sgmltag>" must be supplied as a further parameter.
          It may be a negative number which lets the detector be extended
          upstream to the given beginning position. The optional parameter
          "<sgmltag>cont</sgmltag>" let's the detector continue over the
          current lane onto this lane's predecessors when the detector's
          length plus his position is larger than the place available on the
          lane.</para>

          <para><caution>
              <para>For detectors that span over more than a single edge, only
              the attribute QUEUE_LENGTH_AHEAD_OF_TRAFFIC_LIGHTS_IN_VEHICLES
              is defined all other may return strange values.</para>
            </caution></para>

          <para>Again, the explicit list of available attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              detector</para>
            </listitem>

            <listitem>
              <para><sgmltag>lane</sgmltag>: The id of the lane the detector
              shall be laid on. The lane must be a part of the network
              used.</para>
            </listitem>

            <listitem>
              <para><sgmltag>pos</sgmltag>: The position on the lane the
              detector shall be laid on in meters. See information about the
              same attribute within the detector loop description for further
              information.</para>
            </listitem>

            <listitem>
              <para><sgmltag>length</sgmltag>: The length of the detector in
              meters. If the detector grows over the lane's end (begin in
              fact), it is either cut off at the lane's length if the
              "<sgmltag>cont</sgmltag>"-attribute is false or not given or is
              continued on the predeceding lanes in the case the
              "<sgmltag>cont</sgmltag>"-attribute is set to true.</para>
            </listitem>

            <listitem>
              <para><sgmltag>freq</sgmltag>: The aggregation period the values
              the detector collects shall be summed up.</para>
            </listitem>

            <listitem>
              <para><sgmltag>file</sgmltag>: The path to the output file. The
              path may be relative.</para>
            </listitem>
          </itemizedlist>

          <para>And the optional ones:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>cont</sgmltag>: Holds the information whether
              detectors longer than a lane shall be cut off or continued (set
              it to true for the second case) default: false (detector lies on
              one lane only).</para>
            </listitem>

            <listitem>
              <para><sgmltag>time_treshold</sgmltag>: The time-based threshold
              that describes how much time has to pass until a vehicle is
              recognized as halting (in s, default: 1s).</para>
            </listitem>

            <listitem>
              <para><sgmltag>speed_treshold</sgmltag>: The speed-based
              threshold that describes how slow a vehicle has to be to be
              recognized as halting (in m/s, default: 5/3.6m/s).</para>
            </listitem>

            <listitem>
              <para><sgmltag>jam_treshold</sgmltag>: The minimum distance to
              the next standing vehicle in order to make this vehicle count as
              a participant to the jam (in m, default: 10m).</para>
            </listitem>

            <listitem>
              <para><sgmltag>friendly_pos</sgmltag>: If set, no error will be
              reported if the detector is placed behind the lane. Instead, the
              detector will be placed 0.1 meters from the lane's end or at
              position 0.1, if the position was negative and larger than the
              lane's length after multiplication with -1.</para>
            </listitem>
          </itemizedlist>

          <para>A single data line within the output of a simulated
          e2-detector looks as following (the line is not broken within the
          output):</para>

          <programlisting><sgmltag>&lt;interval begin="<replaceable>&lt;BEGIN_TIME&gt;</replaceable>" end="<replaceable>&lt;END_TIME&gt;</replaceable>" id="<replaceable>&lt;DETECTOR_ID&gt;</replaceable>"  \
   nSamples="<replaceable>&lt;DATA_SAMPLES&gt;</replaceable>" meanSpeed="<replaceable>&lt;MEAN_SPEED&gt;</replaceable>"  \
   meanOccupancy="<replaceable>&lt;MEAN_OCCUPANCY&gt;</replaceable>" maxOccupancy="<replaceable>&lt;MAX_OCCUPANCY&gt;</replaceable>" \
   meanMaxJamLengthInVehicles="<replaceable>&lt;VAL&gt;</replaceable>" meanMaxJamLengthInMeters="<replaceable>&lt;VAL&gt;</replaceable>"  \
   maxJamLengthInVehicles="<replaceable>&lt;VAL&gt;</replaceable>" maxJamLengthInMeters="<replaceable>&lt;VAL&gt;</replaceable>"  \
   jamLengthInVehiclesSum="<replaceable>&lt;VAL&gt;</replaceable>" jamLengthInMetersSum="<replaceable>&lt;VAL&gt;</replaceable>" \
   meanHaltingDuration="<replaceable>&lt;VAL&gt;</replaceable>" maxHaltingDuration="<replaceable>&lt;VAL&gt;</replaceable>" haltingDurationSum="<replaceable>&lt;VAL&gt;</replaceable>" \
   meanIntervalHaltingDuration="<replaceable>&lt;VAL&gt;</replaceable>" maxIntervalHaltingDuration="<replaceable>&lt;VAL&gt;</replaceable>"
   intervalHaltingDurationSum="<replaceable>&lt;VAL&gt;</replaceable>" startedHalts="<replaceable>&lt;VAL&gt;</replaceable>" \
   meanVehicleNumber="<replaceable>&lt;VAL&gt;</replaceable>" maxVehicleNumber="<replaceable>&lt;VAL&gt;</replaceable>" /&gt;
</sgmltag></programlisting>

          <para>To explain this vast amount of measures, a short note about
          how an e2-detector works is needfull. An e2-detector takes note
          about each vehicle that enters the area. As long as the vehicle does
          not leave the area completely, its state is collected in each time
          step during the interval. Each vehicle state in this case is called
          a "data sample" and the output of an e2-detector is made up from all
          data samples of all vehicles within the are during the complete data
          collection ("<sgmltag>freq</sgmltag>") interval.</para>

          <para>As an e2-detector covers a lane and vehicles are sorted on
          these, it is possible to recognize jams along the detector's area
          and measure them. Because more than one jam may take place at the
          area at one time, the values cover as well averaged measures of all
          jams ("<sgmltag>jamLengthIn...Sum</sgmltag>") as explicite measures
          of the longest (maximum) jam. For the longest jam, both averaged
          ("<sgmltag>meanMaxJamLengthIn...</sgmltag>") and maximum
          ("<sgmltag>maxJamLengthIn...</sgmltag>") values are written.</para>

          <note>
            <para>The jam length in meters may be more than a sum of the
            vehicles lengths, because the place between vehicle is also taken
            into account.</para>
          </note>

          <para>Besides jam computation, the durations vehicles are halting
          are collected. They are both collected over the whole time span a
          vehicle is on the detector area
          ("<sgmltag>...HaltingDuration</sgmltag>" and
          "<sgmltag>haltingDurationSum</sgmltag>"), and explicite for each
          interval ("<sgmltag>...IntervalHaltingDuration</sgmltag>" and
          "<sgmltag>intervalHaltingDurationSum</sgmltag>").</para>

          <para>The values are described in the following table.</para>

          <table>
            <title>Definition of values generated by e2-detectors</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Measure</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><sgmltag>begin</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The first time step the values were collected
                  in</entry>
                </row>

                <row>
                  <entry><sgmltag>end</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The last time step the values were collected in (may
                  be equal to begin)</entry>
                </row>

                <row>
                  <entry><sgmltag>id</sgmltag></entry>

                  <entry><literal>-</literal></entry>

                  <entry>The id of the detector (needed if several detectors
                  share an output file)</entry>
                </row>

                <row>
                  <entry><sgmltag>nSamples</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of data samples that could be collected. A
                  "data sample" means the state of a vehicle that was on the
                  detector area during one of the simulation steps of the
                  interval described by this data line.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanSpeed</sgmltag></entry>

                  <entry><literal>m/s</literal></entry>

                  <entry>The mean velocity over all collected data
                  samples.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanOccupancy</sgmltag></entry>

                  <entry><literal>%</literal></entry>

                  <entry>The percentage (0-100%) of the detector's place that
                  was occupied by vehicles, summed up for each time step and
                  averaged by the interval duration.</entry>
                </row>

                <row>
                  <entry><sgmltag>maxOccupancy</sgmltag></entry>

                  <entry><literal>%</literal></entry>

                  <entry>The maximum percentage (0-100%) of the detector's
                  place that was occupied by vehicles during the
                  interval.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanMaxJamLengthInVehicles</sgmltag></entry>

                  <entry><literal>#vehicles</literal></entry>

                  <entry>The length of the longest jams recognized during each
                  step, averaged over the interval duration. In vehicles that
                  have contributed to these jams.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanMaxJamLengthInMeters</sgmltag></entry>

                  <entry><literal>m</literal></entry>

                  <entry>As prior, but in meters (see notes)</entry>
                </row>

                <row>
                  <entry><sgmltag>maxJamLengthInVehicles</sgmltag></entry>

                  <entry><literal>#vehicles</literal></entry>

                  <entry>The length of the longest jam recognized during the
                  interval duration. In vehicles that have contributed to this
                  jams.</entry>
                </row>

                <row>
                  <entry><sgmltag>maxJamLengthInMeters</sgmltag></entry>

                  <entry><literal>m</literal></entry>

                  <entry>As prior, but in meters (see notes)</entry>
                </row>

                <row>
                  <entry><sgmltag>jamLengthInVehiclesSum</sgmltag></entry>

                  <entry><literal>#vehicles</literal></entry>

                  <entry>The sum of all lengths of all jams recognized during
                  the interval. In vehicles that have contributed to these
                  jams.</entry>
                </row>

                <row>
                  <entry><sgmltag>jamLengthInMetersSum</sgmltag></entry>

                  <entry><literal>m</literal></entry>

                  <entry>As prior, but in meters (see notes)</entry>
                </row>

                <row>
                  <entry><sgmltag>meanHaltingDuration</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The mean halting duration of vehicles that entered
                  the area and are still inside.</entry>
                </row>

                <row>
                  <entry><sgmltag>maxHaltingDuration</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The maximum halting duration of vehicles that entered
                  the area and are still inside.</entry>
                </row>

                <row>
                  <entry><sgmltag>haltingDurationSum</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The sum of all halting durations of vehicles that
                  entered the area and are still inside.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanIntervalHaltingDuration</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The mean halting duration of vehicles that entered
                  the area and are still inside, counted from the interval's
                  begin.</entry>
                </row>

                <row>
                  <entry><sgmltag>maxIntervalHaltingDuration</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The maximum halting duration of vehicles that entered
                  the area and are still inside, counted from the interval's
                  begin.</entry>
                </row>

                <row>
                  <entry><sgmltag>intervalHaltingDurationSum</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The sum of all halting durations of vehicles that
                  entered the area and are still inside, counted from the
                  interval's begin.</entry>
                </row>

                <row>
                  <entry><sgmltag>startedHalts</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of strated halts. Please note that during
                  an interval a vehicle may stop halting and enter a new
                  halting state.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanVehicleNumber</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The mean number of vehicles that were on the detector
                  (averaged over the interval duration).</entry>
                </row>

                <row>
                  <entry><sgmltag>maxVehicleNumber</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The maximum number of vehicles that were on the
                  detector area during the interval.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>As detectors have been reworked for version 0.9.8, some
              used measures may have changed. Please consult the table
              above.</para>
            </listitem>

            <listitem>
              <para>Since version 0.9.8, the attribute
              "<sgmltag>style</sgmltag>" is marked as deprecated, a warning is
              generated.</para>
            </listitem>

            <listitem>
              <para>Using element name "<sgmltag>detector</sgmltag>" together
              with a <sgmltag>type</sgmltag> is marked as deprecated since
              version 0.9.8, a warning is generated.</para>
            </listitem>

            <listitem>
              <para>The parameter "<sgmltag>measures</sgmltag>" is no longer
              supported since version 0.9.8, the detector writes always all
              values. A warning is generated.</para>
            </listitem>

            <listitem>
              <para>The parameter "keep_for" is no longer supported since
              version 0.9.8, a warning is generated.</para>
            </listitem>

            <listitem>
              <para>E2-detectors coupled to traffic lights are now described
              in "<ulink url="#user_chp06-output-tls-e2">Coupled
              E2-Output</ulink>".</para>
            </listitem>

            <listitem>
              <para>The usage of attribute "<sgmltag>friendly_pos</sgmltag>"
              was reworked for version 0.9.8</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-detectors-e3">
          <title>E3-Detectors (Multi-Origin/Multi-Destination
          Detectors)</title>

          <para>The descriptions of E3-detectors have to include the set of
          entry- and the set of exit-cross-sections. Due to this, it is not
          possible to use a single tag to specify a detector. Instead, the
          description consists of the following parts:</para>

          <orderedlist>
            <listitem>
              <para>A beginning tag that describes some global attributes of
              the detector just as the descriptions of e1- and e2-detectors
              do. The format is:</para>

              <programlisting><sgmltag>&lt;e3-detector id="<replaceable>&lt;ID&gt;</replaceable>" file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" freq="<replaceable>&lt;AGGREGATION_TIME&gt;</replaceable>"
   [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]&gt;</sgmltag></programlisting>

              <para>As one can see, no information about the detector's
              position is stored herein. They are stored in embedded tags
              instead (2. and 3.)</para>
            </listitem>

            <listitem>
              <para>A set of tags that describe the detector's entry points in
              the form:</para>

              <programlisting><sgmltag>&lt;det_entry lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>" [friendly_pos="x"]/&gt;</sgmltag></programlisting>
            </listitem>

            <listitem>
              <para>A set of tags that describe the detector's exit points in
              the form:</para>

              <programlisting><sgmltag>&lt;det_exit lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>" [friendly_pos="x"]/&gt;</sgmltag></programlisting>
            </listitem>

            <listitem>
              <para>A closing tag that must match the opening tag (1.):</para>

              <programlisting><sgmltag>&lt;/e3-detector&gt;</sgmltag></programlisting>
            </listitem>
          </orderedlist>

          <para>The definition</para>

          <programlisting><sgmltag>&lt;e3-detector id="e3_1" freq="300" file="./output/e3_1.xml"&gt;</sgmltag>
   <sgmltag>&lt;det_entry lane="myEdge0_0" pos="0"/&gt;</sgmltag>
   <sgmltag>&lt;det_entry lane="myEdge0_1" pos="0"/&gt;</sgmltag>
   <sgmltag>&lt;det_exit lane="myEdge2_0" pos="0"/&gt;</sgmltag>
   <sgmltag>&lt;det_exit lane="myEdge2_1" pos="0"/&gt;</sgmltag>
<sgmltag>&lt;/e3-detector&gt;</sgmltag></programlisting>

          <para>will build an e3-detector starting at either lane 0 or 1 of
          the edge called "myEdge0" and end at the same lane of "myEdge2". All
          values will be computed as the default-value for measures is used
          and aggregated over a time of 300s. They will be written into the
          file "<filename>e3_1.xm</filename>l" lying in the subfolder of the
          folder the configuration was read in/the program has been started
          within.</para>

          <para>A single data line within the output of a simulated
          e3-detector looks as following (the line is not broken within the
          output):</para>

          <programlisting><sgmltag>&lt;interval begin="<replaceable>&lt;BEGIN_TIME&gt;</replaceable>" end="<replaceable>&lt;END_TIME&gt;</replaceable>" id="<replaceable>&lt;ID&gt;</replaceable>" \
   meanTravelTime="<replaceable>&lt;MEAN_TT&gt;</replaceable>" meanSpeed="<replaceable>&lt;MEAN_SPEED&gt;</replaceable>" \
   meanHaltsPerVehicle="<replaceable>&lt;MEAN_HALT_NUMBER&gt;</replaceable>" vehicleSum="<replaceable>&lt;#VEHICLES&gt;</replaceable>" \
   meanSpeedWithin="<replaceable>&lt;MEAN_SPEED&gt;</replaceable>" meanHaltsPerVehicleWithin="<replaceable>&lt;MEAN_HALT_NUMBER&gt;</replaceable>" \
   meanDurationWithin="<replaceable>&lt;MEAN_HALT_DURATION&gt;</replaceable>" vehicleSumWithin="<replaceable>&lt;#VEHICLES&gt;</replaceable>" \
   meanIntervalSpeedWithin="<replaceable>&lt;MEAN_SPEED&gt;</replaceable>" \
   meanIntervalHaltsPerVehicleWithin="<replaceable>&lt;MEAN_HALT_NUMBER&gt;</replaceable>" \
   meanIntervalDurationWithin="<replaceable>&lt;MEAN_HALT_DURATION&gt;</replaceable>"/&gt;</sgmltag></programlisting>

          <para>As for e2-detectors, the measures generated by e3-detectors
          may be grouped by the way they are computed. The plain measures take
          only those vehicles into account that have left the detector area
          within the described interval. Additionally, measures of the
          vehicles that are still inside the area are generated (postfix
          "<sgmltag>Within</sgmltag>"), containing both measures valid for the
          whole ride through the area and measures made up of only those
          samples that were collected within the current interval
          ("<sgmltag>...Interval...</sgmltag>"). The value are described one
          by one in the following table.</para>

          <table>
            <title>Definition of values generated by e3-detectors</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Measure</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><sgmltag>begin</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The first time step the values were collected
                  in</entry>
                </row>

                <row>
                  <entry><sgmltag>end</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The last time step the values were collected in (may
                  be equal to begin)</entry>
                </row>

                <row>
                  <entry><sgmltag>id</sgmltag></entry>

                  <entry><literal>-</literal></entry>

                  <entry>The id of the detector (needed if several detectors
                  share an output file)</entry>
                </row>

                <row>
                  <entry><sgmltag>meanTravelTime</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The time vehicles needed to pass the area. Averaged
                  over all vehicles that have left the detector during the
                  interval duration.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanSpeed</sgmltag></entry>

                  <entry><literal>m/s</literal></entry>

                  <entry>The mean speed of vehicles that have passed the area.
                  Averaged over the interval and vehicles.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanHaltsPerVehicle</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of halts of vehicles that have passed the
                  area. Averaged over all vehicles that have left the detector
                  during the interval duration.</entry>
                </row>

                <row>
                  <entry><sgmltag>vehicleSum</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of vehicles that have left the area during
                  the interval.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanSpeedWithin</sgmltag></entry>

                  <entry><literal>m/s</literal></entry>

                  <entry>The mean speed of those vehicles that have entered,
                  but not yet left the area. Averaged over the time each
                  vehicle was in the area and vehicles.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanHaltsPerVehicleWithin</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The mean number of haltings of those vehicles that
                  have entered, but not yet left the area. Averaged over the
                  time each vehicle was in the area and vehicles.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanDurationWithin</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The mean duration is within the area of those
                  vehicles that have entered, but not yet left the area.
                  Averaged over the time each vehicle was in the area and
                  vehicles.</entry>
                </row>

                <row>
                  <entry><sgmltag>vehicleSumWithin</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of vehicles that have entered but not yet
                  left the area.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanIntervalSpeedWithin</sgmltag></entry>

                  <entry><literal>m/s</literal></entry>

                  <entry>The mean speed of those vehicles that have entered,
                  but not yet left the area, collected during the written
                  interval. Averaged over the interval and vehicles.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanIntervalHaltsPerVehicleWithin</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of vehicles that have left the area during
                  the interval, collected during the written interval.
                  Averaged over the interval and vehicles.</entry>
                </row>

                <row>
                  <entry><sgmltag>meanIntervalDurationWithin</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>The number of vehicles that have left the area during
                  the interval, collected during the written interval.
                  Averaged over the interval and vehicles.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>As detectors have been reworked for version 0.9.8, some
              used measures may have changed. Please consult the table
              above.</para>
            </listitem>

            <listitem>
              <para>Using element name "<sgmltag>detector</sgmltag>" together
              with a <sgmltag>type</sgmltag> is marked as deprecated since
              version 0.9.8, a warning is generated</para>
            </listitem>

            <listitem>
              <para>The parameter "<sgmltag>measures</sgmltag>" is no longer
              supported since version 0.9.8, the detector writes always all
              values. A warning is generated.</para>
            </listitem>

            <listitem>
              <para>The parameter "keep_for" is no longer supported since
              version 0.9.8, a warning is generated.</para>
            </listitem>

            <listitem>
              <para>The usage of attribute "<sgmltag>friendly_pos</sgmltag>"
              was reworked for version 0.9.8</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-detectors-vtypeprobe">
          <title>VTypeProbes</title>

          <para>A vtypeprobe is defined the following way:</para>

          <programlisting><sgmltag>&lt;vtypeprobe id="<replaceable>&lt;ID&gt;</replaceable>" [ type="<replaceable>&lt;VEHICLE_TYPE&gt;</replaceable>" ] freq="<replaceable>&lt;OUTPUT_FREQUENCY&gt;</replaceable>" 
   file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>"/&gt;</sgmltag></programlisting>

          <para><sgmltag>type</sgmltag> names the vehicle type to observe.
          Only the values of vehicles of this type will be written into the
          output. If <sgmltag>type</sgmltag> is empty, the information about
          all vehicles are included. In contrary to the detectors described
          above, the values are not aggregated. This means that
          <sgmltag>frequency</sgmltag> does not describe an aggregation
          interval but the frequency with which the values shall be collected
          and written.</para>

          <para>Again, the explicit list of available attributes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              detector</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: The type the vehicles must be of
              in order to be reported.</para>
            </listitem>

            <listitem>
              <para><sgmltag>freq</sgmltag>: The frequency with which
              information shall be written.</para>
            </listitem>

            <listitem>
              <para><sgmltag>file</sgmltag>: The path to the output file. The
              path may be relative.</para>
            </listitem>
          </itemizedlist>

          <para>The output is devided into timestep-sections:</para>

          <programlisting>    <sgmltag>&lt;timestep time="<replaceable>&lt;COLLECTION_TIME&gt;</replaceable>" id="<replaceable>&lt;DETECTOR_ID&gt;</replaceable>" vtype="<replaceable>&lt;OBSERVED_TYPE&gt;</replaceable>"&gt;</sgmltag>
        <sgmltag>&lt;vehicle id="<replaceable>&lt;VEHICLE_ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>" \
            x="<replaceable>&lt;X-COORDINATE&gt;</replaceable>" y="<replaceable>&lt;Y-COORDINATE&gt;</replaceable>" \
            lat="<replaceable>&lt;LAT-COORDINATE&gt;</replaceable>" lon="<replaceable>&lt;LON-COORDINATE&gt;</replaceable>" \
            speed="<replaceable>&lt;VEHICLE_SPEED&gt;</replaceable>"/&gt;</sgmltag>
        ... further vehicles ...
    <sgmltag>&lt;/timestep&gt;</sgmltag>
    ... further time steps ...
</programlisting>

          <para>The values are described in the following table.</para>

          <table>
            <title>Definition of values generated by e2-detectors</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Measure</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><sgmltag>time</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The time the values were collected at</entry>
                </row>

                <row>
                  <entry><para><sgmltag>timestep@id</sgmltag></para></entry>

                  <entry><literal>-</literal></entry>

                  <entry>The id of the detector</entry>
                </row>

                <row>
                  <entry><sgmltag>vtype</sgmltag></entry>

                  <entry><literal>-</literal></entry>

                  <entry>The id of the vytpe observed by this detector</entry>
                </row>

                <row>
                  <entry><para><sgmltag>vehicle@id</sgmltag></para></entry>

                  <entry><literal>-</literal></entry>

                  <entry>The id of the described vehicle</entry>
                </row>

                <row>
                  <entry><sgmltag>lane</sgmltag></entry>

                  <entry><literal>-</literal></entry>

                  <entry>The id of the lane the vehicle was on.</entry>
                </row>

                <row>
                  <entry><sgmltag>pos</sgmltag></entry>

                  <entry><literal>m</literal></entry>

                  <entry>The position of the vehicle on
                  <sgmltag>lane</sgmltag></entry>
                </row>

                <row>
                  <entry><sgmltag>x</sgmltag></entry>

                  <entry><literal>m</literal></entry>

                  <entry>The x-position of the vehicle within the net</entry>
                </row>

                <row>
                  <entry><sgmltag>y</sgmltag></entry>

                  <entry><literal>m</literal></entry>

                  <entry>The y-position of the vehicle within the net</entry>
                </row>

                <row>
                  <entry><sgmltag>lat</sgmltag></entry>

                  <entry><literal>arcseconds</literal></entry>

                  <entry>The lat-position of the vehicle within the
                  net</entry>
                </row>

                <row>
                  <entry><sgmltag>lon</sgmltag></entry>

                  <entry><literal>arcseconds</literal></entry>

                  <entry>The lon-position of the vehicle within the
                  net</entry>
                </row>

                <row>
                  <entry><sgmltag>speed</sgmltag></entry>

                  <entry><literal>m/s</literal></entry>

                  <entry>The speed of the vehicle within the time
                  step.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Integrated in version 0.9.9.</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>

      <sect2 id="user_chp06-output-network_state">
        <title>Network State Dump</title>

        <para>In the hope that every user wants to know different things and
        is able to write a tool that parses this information from a not
        aggregated output, the network dump was the first output capability
        we've implemented. To force SUMO to build a file that contains the
        network dump, extend your command line (or configuration) parameter by
        <option>--netstate-dump</option> (or <option>--ndump</option> or
        <option>--netstate</option>)
        <option><replaceable>&lt;FILE&gt;</replaceable></option>.
        <option><replaceable>&lt;FILE&gt;</replaceable></option> is hereby the
        name of the file the output will be written to. Any other file with
        this name will be overwritten, the destination folder must
        exist.</para>

        <para>The network dump is a xml-file containing for each time step
        every edge of the network with every lane of this edge with all
        vehicles on this lane. For each vehicle, his name, speed and position
        on his lane are written. A network dump-file looks like this:</para>

        <programlisting><sgmltag>&lt;sumo-netstate&gt;</sgmltag>
   <sgmltag>&lt;timestep time="<replaceable>&lt;TIME_STEP&gt;</replaceable>"&gt;</sgmltag>
      <sgmltag>&lt;edge id="<replaceable>&lt;EDGE_ID&gt;</replaceable>"&gt;</sgmltag>
   <sgmltag>      &lt;lane id="<replaceable>&lt;LANE_ID&gt;</replaceable>"&gt;</sgmltag>
            <sgmltag>&lt;vehicle id="<replaceable>&lt;VEHICLE_ID&gt;</replaceable>" pos="<replaceable>&lt;VEH_POSITION&gt;</replaceable>" speed="<replaceable>&lt;VEH_SPEED&gt;</replaceable>"/&gt;</sgmltag>

            ... more vehicles if any on this lane ...

         <sgmltag>&lt;/lane&gt;</sgmltag>

         ... more lanes if the edge possesses more ...

      <sgmltag>&lt;/edge&gt;</sgmltag>

      ... more edges ....

<sgmltag>   &lt;/timestep&gt;</sgmltag>

... the next timestep ...

<sgmltag>&lt;/sumo-netstate&gt;</sgmltag></programlisting>

        <para>The values have the following meaning:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>time</sgmltag>: The time step described by the
            values within this <sgmltag>timestep</sgmltag>-element</para>
          </listitem>

          <listitem>
            <para><sgmltag>id</sgmltag>: The id of the
            edge/lane/vehicle</para>
          </listitem>

          <listitem>
            <para><sgmltag>pos</sgmltag>: The position of the vehicle at the
            lane within the described time step</para>
          </listitem>

          <listitem>
            <para><sgmltag>speed</sgmltag>: The speed of the vehicle within
            the described time step</para>
          </listitem>
        </itemizedlist>

        <para>As you may imagine, this output is very verbose. His main
        disadvantage is the size of the generated file. It's very easy to
        generate files that are several GB large within some minutes. It is of
        course possible to write some nice tools that parse the file (using a
        SAX-parser) and generate some meaningful information, but we do not
        know anyone who has made this. Another problem is that the
        simulation's execution speed of course breaks down when such an amount
        of data must be written.</para>

        <para>Normally, all lanes are written, even if there is no vehicle on
        them. You can change this behaviour using the boolean switch
        <option>--dump-empty-edges</option>. In this case, only those edges
        and lanes will be written that contain vehicles.</para>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_rawdump/</filename>
            shows how the raw output is used. The output is written into the
            subfolder "<filename>output</filename>".</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>Please notice that this options has been earlier named
            <option>--output</option> (<option>-o</option>)</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-edgelanedump" revision="0.9.5">
        <title>Aggregated Lane/Edge States (Edge/Lane-Dumps)</title>

        <para>This output is far more feasible than the network dump. There
        are two different types of these files, one is edge-based, the other
        lane-based. Both describe the situation on all of the network's
        edges/lanes in terms of traffic science by giving macroscopic values
        such as the mean vehicle speed, the mean density, etc.</para>

        <para>In the following, it is described how both outputs are generated
        and which values they contain. Then, the meanings of the values are
        given as well as a description of intervals. At last, some additional
        possibilities to constraint the outputs are given.</para>

        <note>
          <para>Please remark that "aggregated lane/edge states" are also
          called "meandata" or "edge/lane-dumps".</para>
        </note>

        <note>
          <para>Some people find the number of information within the
          lane/edge states quite minimalist. This is because this output is
          used as input for the <application>DUAROUTER</application> during
          the computation of a dynamic user assignment (see "<link
          linkend="user_chp05-dua">Dynamic User Assignment and Alternative
          Routes</link>") and due to this is meant to be fast. That's why it
          only contains values that are fast to compute.</para>
        </note>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>The documentation has been updated to fit the real output
            when being rechecked for version 0.9.3</para>
          </listitem>

          <listitem>
            <para>The (even invalid) documentation of the file printed
            previously at the begin of the file was removed in version
            0.9.3</para>
          </listitem>

          <listitem>
            <para>This documentation text was rewritten for version 0.9.5,
            because the previous text said that only those vehicles are
            regarded which have left the lane. The edge-dumps/lane-dumps
            contain instead the values of all vehicles that were on the
            edges/lanes within the interval.</para>
          </listitem>

          <listitem>
            <para>Furthermore, computation of the density and the occupancy
            has been debugged for version 0.9.5.</para>
          </listitem>
        </itemizedlist>

        <sect3 id="user_chp06-output-edgelanedump-edges">
          <title>Edge-Based Network States</title>

          <para>To force SUMO to generate edge-based state dumps, you have to
          use two command line options: a) <option>--dump-basename
          <replaceable>&lt;PATH_AND_FILE_PREFIX&gt;</replaceable></option>
          describes where to write the dumps to and how the begin of the file
          name is, b) <option>--dump-intervals
          <replaceable>&lt;INTERVAL&gt;</replaceable>[,<replaceable>&lt;INTERVAL&gt;</replaceable>]*</option>
          describes over what time the values shall be collected and
          aggregated ("interval length"). Each aggregation interval is written
          into an own, single file. The file name is made up from the base
          name and the aggregation interval:
          <filename><replaceable>&lt;FILENAME&gt;</replaceable> =
          <replaceable>&lt;PATH_AND_FILE_PREFIX&gt;</replaceable>_<replaceable>&lt;INTERVAL&gt;</replaceable>.xml</filename>.
          An example: <option>--dump-basename=./output/lanedump
          --dump-intervals=300,600</option> will build two files:
          <filename>./output/lanedump_300.xml</filename> and
          <filename>./output/lanedump_600.xml</filename>. For edge-based state
          dumps, the output file will look like the following:</para>

          <programlisting><sgmltag>&lt;netstats&gt;</sgmltag>
   <sgmltag>&lt;interval begin="<replaceable>&lt;INTERVAL_BEGIN&gt;</replaceable>" end="<replaceable>&lt;INTERVAL_END&gt;</replaceable>"&gt;</sgmltag>
      <sgmltag>&lt;edge id="<replaceable>&lt;EDGE_ID&gt;</replaceable>"</sgmltag> <sgmltag>traveltime="&lt;<replaceable>MEAN_TRAVEL_TIME&gt;</replaceable>" \
                 sampledSeconds="<replaceable>&lt;COLLECTED_VEHICLE_SECONDS&gt;</replaceable>" \
                 density="<replaceable>&lt;MEAN_DENSITY&gt;</replaceable>" occupancy="<replaceable>&lt;MEAN_OCCUPANCY&gt;</replaceable>" \
                 noStops="<replaceable>&lt;NUMBER_OF_HALTS&gt;</replaceable>" speed="<replaceable>&lt;MEAN_SPEED&gt;</replaceable>" \
                 entered="<replaceable>&lt;ENTERED_VEH_NUMBER&gt;</replaceable>" emitted="<replaceable>&lt;EMITTED_VEH_NUMBER&gt;</replaceable>" \
                 left="<replaceable>&lt;LEFT_VEH_NUMBER&gt;</replaceable>"/&gt;</sgmltag>

      ... more edges ...

   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/netstats&gt;</sgmltag></programlisting>

          <para>Please remark, that in contrary to the example above, for each
          edge, all values are reported in one line.</para>

          <para>Examples:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_meandata_edges/</filename>
              shows how to generate an edge-based aggregated state output.
              Herein, four outputs are written into the subfolder
              "<filename>output</filename>", one for each of the intervals
              15s, 60s, 300s, and 900s.</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-edgelanedump-lanes">
          <title>Lane-Based Network States</title>

          <para>Lane-dumps are generated analogous to edge-dumps using the
          options <option>--lanedump-basename
          <replaceable>&lt;PATH_AND_FILE_PREFIX&gt;</replaceable></option> and
          <option>--lanedump-intervals
          <replaceable>&lt;INTERVAL&gt;</replaceable>[,<replaceable>&lt;INTERVAL&gt;</replaceable>]*</option>.
          The generated output looks like the following:</para>

          <programlisting><sgmltag>&lt;netstats&gt;</sgmltag>
   <sgmltag>&lt;interval begin="<replaceable>&lt;INTERVAL_BEGIN&gt;</replaceable>" end="<replaceable>&lt;INTERVAL_END&gt;</replaceable>"&gt;</sgmltag>
      <sgmltag>&lt;edge id="<replaceable>&lt;EDGE_ID&gt;</replaceable>"</sgmltag><sgmltag>&gt;</sgmltag>
         <sgmltag>&lt;lane id="<replaceable>&lt;LANE_ID&gt;</replaceable>"</sgmltag> <sgmltag>traveltime="&lt;<replaceable>MEAN_TRAVEL_TIME&gt;</replaceable>" \
                 sampledSeconds="<replaceable>&lt;COLLECTED_VEHICLE_SECONDS&gt;</replaceable>" \
                 density="<replaceable>&lt;MEAN_DENSITY&gt;</replaceable>" occupancy="<replaceable>&lt;MEAN_OCCUPANCY&gt;</replaceable>" \
                 noStops="<replaceable>&lt;NUMBER_OF_HALTS&gt;</replaceable>" speed="<replaceable>&lt;MEAN_SPEED&gt;</replaceable>" 
                 entered="<replaceable>&lt;ENTERED_VEH_NUMBER&gt;</replaceable>" emitted="<replaceable>&lt;EMITTED_VEH_NUMBER&gt;</replaceable>" \
                 left="<replaceable>&lt;LEFT_VEH_NUMBER&gt;</replaceable>"/&gt;</sgmltag>

         ... more lanes...

      <sgmltag>&lt;/edge&gt;</sgmltag>

      ... more edges ...

   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/netstats&gt;</sgmltag></programlisting>

          <para>Please remark, that in contrary to the example above, for each
          edge, all values are reported in one line.</para>

          <para>Examples:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_meandata_lanes/</filename>
              shows how to generate a lane-based aggregated state output.
              Herein, four outputs are written into the subfolder
              "<filename>output</filename>", one for each of the intervals
              15s, 60s, 300s, and 900s.</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-edgelanedump-values">
          <title>Value Descriptions</title>

          <para>Both the edge-dump and the lane-dump are computing the values
          the same way: every vehicle move - even those with v=0 - is recorded
          and saved during the interval. After the interval has passed, these
          values are written into the file after being normalized. In the case
          of the edge-dump the values are not only normalized by the number of
          the collected vehicle moves and the length of the lane, but also by
          the number of lanes of the edge.</para>

          <para>The meanings of the written values are given in the following
          table.</para>

          <table>
            <title>Definition of values generated by
            edgedump/lanedump-outputs</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Measure</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><sgmltag>begin</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The first time step in which the reported values were
                  collected</entry>
                </row>

                <row>
                  <entry><sgmltag>end</sgmltag></entry>

                  <entry><literal>(simulation) seconds</literal></entry>

                  <entry>The last time step in which the reported values were
                  collected</entry>
                </row>

                <row>
                  <entry><sgmltag>edge@id</sgmltag></entry>

                  <entry><literal>ID</literal></entry>

                  <entry>The name of the reported edge</entry>
                </row>

                <row>
                  <entry><sgmltag>lane@id</sgmltag></entry>

                  <entry><literal>ID</literal></entry>

                  <entry>The name of the reported lane</entry>
                </row>

                <row>
                  <entry><sgmltag>traveltime</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>Time needed to pass the edge/lane</entry>
                </row>

                <row>
                  <entry><sgmltag>sampledSeconds</sgmltag></entry>

                  <entry><literal>s</literal></entry>

                  <entry>Number seconds vehicles were measured on the
                  edge/lane (may be subseconds if a vehicle enters/leaves the
                  edge/lane)</entry>
                </row>

                <row>
                  <entry><sgmltag>density</sgmltag></entry>

                  <entry><literal>#veh/km</literal></entry>

                  <entry>Vehicle density on the lane/edge</entry>
                </row>

                <row>
                  <entry><sgmltag>occupancy</sgmltag></entry>

                  <entry><literal>%</literal></entry>

                  <entry>Occupancy of the edge/lane in %</entry>
                </row>

                <row>
                  <entry><sgmltag>noStops</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of stops counted at the edge/lane within
                  the described interval</entry>
                </row>

                <row>
                  <entry><sgmltag>speed</sgmltag></entry>

                  <entry><literal>m/s</literal></entry>

                  <entry>The mean speed on the edge/lane within the reported
                  interval</entry>
                </row>

                <row>
                  <entry><sgmltag>entered</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of vehicles that have entered the
                  edge/lane within the described interval</entry>
                </row>

                <row>
                  <entry><sgmltag>emitted</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of vehicles that have been emitted onto
                  the edge/lane within the described interval</entry>
                </row>

                <row>
                  <entry><sgmltag>left</sgmltag></entry>

                  <entry><literal>#</literal></entry>

                  <entry>The number of vehicles that have left the edge/lane
                  within the described interval</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>The interval end is the interval begin + aggregation time - 1,
          meaning that values were collected within these steps. If the
          simulation ends before the last interval is over, the interval will
          be prunned.</para>
        </sect3>

        <sect3 id="user_chp06-output-edgelanedump-constraining">
          <title>Constraining the State Outputs</title>

          <para>If you need only information about the network states during
          certain time periods, you may constraint generation of the dumps
          using the options <option>--dump-begins
          <replaceable>&lt;TIME&gt;[,&lt;TIME&gt;]+</replaceable></option> and
          <option>--dump-ends
          <replaceable>&lt;TIME&gt;[,&lt;TIME&gt;]+</replaceable></option>.
          When at least one combination is given, dumps will be written only
          if an according begin/end-pair exists for the current time. This
          means, only those intervals will be saved for which
          dump-begins[x]&lt;=INTERVAL_END and dump-ends[x]&gt;=INTERVAL_BEGIN.
          All dumps will cover the complete simulation if the options
          <option>--dump-begins</option> and <option>--dump-ends</option> are
          not set.</para>

          <para>Normally, dumps also include information about streets/lanes
          that were not used within the interval. Values for speed and
          traveltime are in this case computed using the edges'/lanes' default
          maximum speed. You can force to include only edges/lanes that were
          occupied by vehicles using the options
          <option>--exclude-empty-edges</option> and
          <option>--exclude-empty-lanes</option>.</para>
        </sect3>

        <sect3 id="user_chp06-output-edgelanedump-misc">
          <title>Misc</title>

          <para>Examples:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_meandata_constrained/</filename>
              shows how to generate a restrained state output. Herein, eight
              outputs are written into the subfolder
              "<filename>output</filename>", four edge- and four lane-based,
              and for each of the intervals 15s, 60s, 300s, and 900s.</para>
            </listitem>
          </itemizedlist>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>The values have been revisited and partially changed for
              version 0.9.9</para>
            </listitem>

            <listitem>
              <para>The options <option>--exclude-empty-edges</option> and
              <option>--exclude-empty-lanes</option> were added in version
              0.9.9</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>

      <sect2 id="user_chp06-output-emissions">
        <title>Net-Wide Vehicle Emission States &amp; Travel Times</title>

        <para>You can force the simulation to generate this output using
        <option>--emissions-output
        <replaceable>&lt;FILENAME&gt;</replaceable></option> or
        <option>--emissions
        <replaceable>&lt;FILENAME&gt;</replaceable></option>. This output
        contains the simulation-wide number of vehicles that are loaded,
        emitted, running, waiting to be emitted, have reached their
        destination and how long they needed to finish the route. The last
        value is normalised over all vehicles that have reached their
        destination so far. The information containing all those values is
        computed for each time step and the output file looks like
        following:</para>

        <programlisting><sgmltag>&lt;emissions&gt;</sgmltag>
   <sgmltag>&lt;emission-state time="<replaceable>&lt;SIMULATION_TIME&gt;</replaceable>"
              loaded="<replaceable>&lt;LOADED_VEHICLE_NUMBER&gt;</replaceable>" \
              emitted="<replaceable>&lt;EMITTED_VEHICLE_NUMBER&gt;</replaceable>" \
              running="<replaceable>&lt;RUNNING_VEHICLE_NUMBER&gt;</replaceable>" \
              waiting="<replaceable>&lt;NUMBER_OF_VEHICLES_WAITING_FOR_EMISSION&gt;</replaceable>" \
              ended="<replaceable>&lt;ENDED_VEHICLE_NUMBER&gt;</replaceable>" \
              meanWaitingTime="<replaceable>&lt;MEAN_WAITING_TIME&gt;</replaceable>" \
              meanTravelTime="<replaceable>&lt;MEAN_TRAVEL_TIME&gt;</replaceable>"/&gt;</sgmltag>

   ... further time steps ...

<sgmltag>&lt;/emissions&gt;</sgmltag></programlisting>

        <para>Please remark, that in contrary to the example above, for each
        time step, all those values are reported in one line. A description of
        the values is given in the table below.</para>

        <table>
          <title>Definition of values generated by emissions-output</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Measure</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><sgmltag>time</sgmltag></entry>

                <entry><literal>(simulation) seconds</literal></entry>

                <entry>The time step described by the entry</entry>
              </row>

              <row>
                <entry><sgmltag>loaded</sgmltag></entry>

                <entry><literal>#</literal></entry>

                <entry>Number of vehicles that were loaded into the simulation
                so far (including reported time step)</entry>
              </row>

              <row>
                <entry><sgmltag>emitted</sgmltag></entry>

                <entry><literal>#</literal></entry>

                <entry>Number of vehicles emitted so far (including reported
                time step)</entry>
              </row>

              <row>
                <entry><sgmltag>running</sgmltag></entry>

                <entry><literal>#</literal></entry>

                <entry>Number of vehicles that were running within the
                reported time step</entry>
              </row>

              <row>
                <entry><sgmltag>waiting</sgmltag></entry>

                <entry><literal>#</literal></entry>

                <entry>Number of vehicles which were waiting for emission
                (could not be emitted) within the reported time step</entry>
              </row>

              <row>
                <entry><sgmltag>ended</sgmltag></entry>

                <entry><literal>#</literal></entry>

                <entry>Number of vehicles that have reached their destination
                so far (including reported time step)</entry>
              </row>

              <row>
                <entry><sgmltag>meanWaitingTime</sgmltag></entry>

                <entry><literal>s</literal></entry>

                <entry>The mean time all vehicles up to now and within the
                reported time step had to wait for being emitted;-1 if no
                vehicle has been emitted, yet</entry>
              </row>

              <row>
                <entry><sgmltag>meanTravelTime</sgmltag></entry>

                <entry><literal>s</literal></entry>

                <entry>The mean travel time of all vehicles that have left the
                simulation within the previous and the reported time;-1 if no
                vehicle has been removed from the simulation, yet</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_emissions/</filename>
            shows how the emissions output is used.</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>In versions prior to 0.9.3, the attribute
            "<sgmltag>time</sgmltag>" was named "<sgmltag>id</sgmltag>"</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-tripinfo" revision="0.9.9">
        <title>Vehicle-Oriented Trip Information</title>

        <para>The simulation is forced to generate this output using:
        <option>--tripinfo-output
        <replaceable>&lt;FILENAME&gt;</replaceable></option> or
        <option>--tripinfo
        <replaceable>&lt;FILENAME&gt;</replaceable></option>. This output
        contains the information about each vehicle's departure time, the time
        the vehicle wanted to start at (which may be lower than the real
        departure time) and the time the vehicle has arrived. Such an
        information is generated for each vehicle as soon as the vehicle has
        arrived its destination and is removed from the network. The format is
        as following:</para>

        <programlisting><sgmltag>&lt;tripinfos&gt;</sgmltag>
    <sgmltag>&lt;tripinfo id="<replaceable>&lt;VEHICLE_ID&gt;</replaceable>" \
            depart="<replaceable>&lt;DEPARTURE_TIME&gt;</replaceable>" departLane="<replaceable>&lt;DEPARTURE_LANE_ID&gt;</replaceable>" \
            departPos="<replaceable>&lt;DEPARTURE_POSITION&gt;</replaceable>" departSpeed="<replaceable>&lt;DEPARTURE_SPEED&gt;</replaceable>" \
            departDelay="<replaceable>&lt;DEPARTURE_DELAY&gt;</replaceable>" \
            arrival="<replaceable>&lt;ARRIVAL_TIME&gt;</replaceable>" arrivalLane="<replaceable>&lt;DEPARTURE_LANE_ID&gt;</replaceable>" \
            arrivalPos="<replaceable>&lt;ARRIVAL_POSITION&gt;</replaceable>" arrivalSpeed="<replaceable>&lt;ARRIVAL_SPEED&gt;</replaceable>" \
            duration="<replaceable>&lt;TRAVEL_TIME&gt;</replaceable>" routeLength="<replaceable>&lt;ROUTE_LENGTH&gt;</replaceable>" \
            waitSteps="<replaceable>&lt;STEPS_WITH_HALTS&gt;</replaceable>" rerouteNo="<replaceable>&lt;REROUTE_NUMBER&gt;</replaceable>" \
            devices="<replaceable>&lt;DEVICE_LIST&gt;</replaceable>" vtype="<replaceable>&lt;VEHICLE_TYPE_ID&gt;</replaceable>"/&gt;</sgmltag>

   ... information about further vehicles ...

<sgmltag>&lt;/tripinfos&gt;</sgmltag></programlisting>

        <para>Please remark, that in contrary to the example above, for each
        time step, all those values are reported in one line. An entry is
        written each time a vehicle has arrived at his destination. In prior
        to this, the written values would not be known.</para>

        <table>
          <title>Definition of values generated by tripinfo-output</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Measure</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><sgmltag>id</sgmltag></entry>

                <entry><literal>ID</literal></entry>

                <entry>The name of the vehicle that is described by this
                entry</entry>
              </row>

              <row>
                <entry><sgmltag>depart</sgmltag></entry>

                <entry><literal>(simulation) seconds</literal></entry>

                <entry>The real departure time (the time the vehicle was
                emitted into the network)</entry>
              </row>

              <row>
                <entry><sgmltag>departLane</sgmltag></entry>

                <entry><literal>ID</literal></entry>

                <entry>The id of the lane the vehicle started its
                journey</entry>
              </row>

              <row>
                <entry><sgmltag>departPos</sgmltag></entry>

                <entry><literal>m</literal></entry>

                <entry>The position on the lane the vehicle started its
                journey</entry>
              </row>

              <row>
                <entry><sgmltag>departSpeed</sgmltag></entry>

                <entry><literal>m/s</literal></entry>

                <entry>The speed with which the vehicle started its
                journey</entry>
              </row>

              <row>
                <entry><sgmltag>departDelay</sgmltag></entry>

                <entry><literal>(simulation) seconds</literal></entry>

                <entry>The time the vehicle had to wait before it could start
                his journey</entry>
              </row>

              <row>
                <entry><sgmltag>arrival</sgmltag></entry>

                <entry><literal>(simulation) seconds</literal></entry>

                <entry>The time the vehicle reached his destination at</entry>
              </row>

              <row>
                <entry><sgmltag>arrivalLane</sgmltag></entry>

                <entry><literal>ID</literal></entry>

                <entry>The id of the lane the vehicle was on when reaching his
                destination</entry>
              </row>

              <row>
                <entry><sgmltag>arrivalPos</sgmltag></entry>

                <entry><literal>m</literal></entry>

                <entry>The position on the lane the vehicle was when reaching
                the destination</entry>
              </row>

              <row>
                <entry><sgmltag>arrivalSpeed</sgmltag></entry>

                <entry><literal>m/s</literal></entry>

                <entry>The speed the vehicle had when reaching the
                destination</entry>
              </row>

              <row>
                <entry><sgmltag>duration</sgmltag></entry>

                <entry><literal>(simulation) seconds</literal></entry>

                <entry>The time the vehicle needed to accomplish the
                route</entry>
              </row>

              <row>
                <entry><sgmltag>routeLength</sgmltag></entry>

                <entry><literal>m</literal></entry>

                <entry>The length of the vehicle's route</entry>
              </row>

              <row>
                <entry><sgmltag>waitSteps</sgmltag></entry>

                <entry><literal>simulation steps</literal></entry>

                <entry>The number of steps in which the vehicle speed was
                below 0.1m/s</entry>
              </row>

              <row>
                <entry><sgmltag>rerouteNo</sgmltag></entry>

                <entry><literal>#</literal></entry>

                <entry>The number the vehicle has been rerouted</entry>
              </row>

              <row>
                <entry><sgmltag>devices</sgmltag></entry>

                <entry><literal>[ID]*</literal></entry>

                <entry>List of devices the vehicle had. Each device is
                separated from the others by a ';'.</entry>
              </row>

              <row>
                <entry><sgmltag>vtype</sgmltag></entry>

                <entry><literal>ID</literal></entry>

                <entry>The type of the vehicle</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_tripinfo/</filename>
            shows how the tripinfo output is used. The output is written into
            the subfolder "<filename>output</filename>".</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>In versions prior to 0.9.3, the attribute
            "<sgmltag>vehicle_id</sgmltag>" was named
            "<sgmltag>id</sgmltag>"</para>
          </listitem>

          <listitem>
            <para>The documentation has been updated before releasing version
            0.9.3</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>reroutes</sgmltag> attribute was added for
            version 0.9.6</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>devices</sgmltag> list attribute was added for
            version 0.9.6</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>vtype</sgmltag> attribute was added for version
            0.9.6</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>vehicle_id</sgmltag> attribute was renamed to
            <sgmltag>id</sgmltag> in version 0.9.9</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>start</sgmltag> attribute was renamed to
            <sgmltag>depart</sgmltag> in version 0.9.9</para>
          </listitem>

          <listitem>
            <para>The attributes <sgmltag>departLane</sgmltag>,
            <sgmltag>departPos</sgmltag>, <sgmltag>departSpeed</sgmltag> were
            added in version 0.9.9</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>end</sgmltag> attribute was renamed to
            <sgmltag>arrival</sgmltag> in version 0.9.9</para>
          </listitem>

          <listitem>
            <para>The attributes <sgmltag>arrivalLane</sgmltag>,
            <sgmltag>arrivalPos</sgmltag>, <sgmltag>arrivalSpeed</sgmltag>
            were added in version 0.9.9</para>
          </listitem>

          <listitem>
            <para>In version 0.9.9, the attribute <sgmltag>waited</sgmltag>
            was removed; instead <sgmltag>departDelay</sgmltag> was
            introduced</para>
          </listitem>

          <listitem>
            <para>The attributes <sgmltag>routeLength</sgmltag> and
            <sgmltag>waitSteps</sgmltag> were added in version 0.9.9</para>
          </listitem>

          <listitem>
            <para>The <sgmltag>reroutes</sgmltag> attribute was renamed to
            <sgmltag>rerouteNo</sgmltag> in version 0.9.9</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-vehroutes">
        <title>Vehicle Routes</title>

        <para>The vehicle routes output contains information about which route
        a vehicle took and if his route was replaced at any time by a new one,
        each of the previous routes together with the edge at the time their
        replacement took place is reported. Furthermore, the vehicle emission
        and ending time is stored herein.</para>

        <para>The generated file look like this:</para>

        <programlisting><sgmltag>&lt;vehicleroutes&gt;</sgmltag>
   <sgmltag>&lt;vehicle id="<replaceable>&lt;VEHICLE_ID&gt;</replaceable>" emitedAt="<replaceable>&lt;EMISSION_TIME&gt;</replaceable>" endedAt="<replaceable>&lt;ARRIVAL_TIME&gt;</replaceable>"&gt;</sgmltag>
      <sgmltag>&lt;route replacedOnEdge="<replaceable>&lt;EDGE_ID&gt;</replaceable>" replacedAtTime="<replaceable>&lt;TIME&gt;</replaceable>"&gt;<replaceable>&lt;PREVIOUS_ROUTE&gt;</replaceable>&lt;/route&gt;</sgmltag>

      ... further replaced routes ...

     <sgmltag> &lt;route&gt;<replaceable>&lt;LAST_ROUTE&gt;</replaceable>&lt;/route&gt;</sgmltag>
   <sgmltag>&lt;/vehicle&gt;</sgmltag>

<sgmltag>   ... information about further vehicles ...

&lt;/tripinfos&gt;</sgmltag></programlisting>

        <para>The values have the following meanings:</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>id</sgmltag>: the id of the vehicle this entry
            describes</para>
          </listitem>

          <listitem>
            <para><sgmltag>emitedAt</sgmltag>: The time the vehicle was
            emitted into the network)</para>
          </listitem>

          <listitem>
            <para><sgmltag>endedAt</sgmltag>: The time the vehicle was removed
            from the simulation (due to arriving at the route end)</para>
          </listitem>

          <listitem>
            <para><sgmltag>replacedOnEdge</sgmltag>: The edge the vehicle was
            on when the described route was replaced</para>
          </listitem>

          <listitem>
            <para><sgmltag>replacedAtTime</sgmltag>: The time step of this
            replacement</para>
          </listitem>

          <listitem>
            <para><sgmltag><replaceable>&lt;PREVIOUS_ROUTE&gt;</replaceable></sgmltag>:
            The replaced route</para>
          </listitem>

          <listitem>
            <para><sgmltag><replaceable>&lt;LAST_ROUTE&gt;</replaceable></sgmltag>:
            The final vehicle route</para>
          </listitem>
        </itemizedlist>

        <para>Both the previous and the final routes are complete, that means
        that they contain all the edges the vehicle was meant to pass as long
        as the route was not replaced, yet. The information
        <sgmltag>replacedOnEdge</sgmltag> and
        <sgmltag>replacedAtTime</sgmltag> are available only for routes which
        were replaced.</para>

        <para>In normal conditions, when all vehicles use predefined routes,
        the output does not contain any information that could not be
        retrieved from the routes and the tripinfo output. But as soon as you
        reroute your vehicles within the simulation, f.e. using rerouters (see
        "<link linkend="user_chp06-management-rerouter">Rerouter</link>"), it
        will contain new information.</para>

        <para>The simulation is forced to generate this output using:
        <option>--vehroutes-output
        <replaceable>&lt;FILENAME&gt;</replaceable></option> or
        <option>--vehroutes
        <replaceable>&lt;FILENAME&gt;</replaceable></option>.</para>

        <para>Examples:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/output_tests/cross3ltl_vehroutes/</filename>
            shows how the vehicle routes output is used. The output is written
            into the subfolder "<filename>output</filename>". This is just a
            basic example that the output is generated. Better take a look at
            <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/rerouter/</filename>.</para>
          </listitem>

          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/rerouter/</filename>
            uses rerouters to change the vehicles' routes. A vehicle routes
            output into the <filename>output</filename>-subfolder.</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>This output was finally finished and validated for version
            0.9.3</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-output-tls" revision="0.9.5">
        <title revision="0.9.6">Output coupled to Traffic Lights</title>

        <para>SUMO offers some possibilities to save states of traffic lights
        during the simulation, a feature mainly used to evaluate adaptive
        traffic light algorithms. We will now describe these outputs.</para>

        <sect3 id="user_chp06-output-tls-states">
          <title>TLS States</title>

          <para>To enable writing tls state information you have to add the
          following definition into one of your additional files:
          <sgmltag>&lt;timed_event type="SaveTLSStates"
          source="<replaceable>&lt;TLS_ID&gt;</replaceable>"
          dest="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>"/&gt;</sgmltag>.
          The attributes have herein the following meanings:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>type</sgmltag>: type of the event trigger; always
              "<literal>SaveTLSStates</literal>" herein</para>
            </listitem>

            <listitem>
              <para><sgmltag>source</sgmltag>: The id of the traffic light
              which state shall be written</para>
            </listitem>

            <listitem>
              <para><sgmltag>dest</sgmltag>: The file to save the state
              into</para>
            </listitem>
          </itemizedlist>

          <para>The output looks like this:</para>

          <programlisting><sgmltag>&lt;tls-states&gt;</sgmltag>
   <sgmltag>&lt;tlsstate time="<replaceable>&lt;SIM_STEP&gt;</replaceable>" id="<replaceable>&lt;TLS_ID&gt;</replaceable>" subid="<replaceable>&lt;TLS_SUBID&gt;</replaceable>"&gt;</sgmltag><replaceable>&lt;STATE&gt;</replaceable><sgmltag>&lt;/tlsstate&gt;</sgmltag>
   ... further states ...
<sgmltag>&lt;/tls-states&gt;</sgmltag></programlisting>

          <para>The state is saved in each simulation second. The state itself
          is coded as a list of the characters 'G', 'Y', and 'R', standing for
          "green", "yellow", and "red", respectively. Each character describes
          a link controlled by the traffic light. Only the state of the
          current program is saved (see also "<link
          linkend="user_chp06-management-traffic_lights-add_programs">Adding
          new Programs</link>"). The attributes have the following
          meaning:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>time</sgmltag>: The simulation time this entry
              was generated for</para>
            </listitem>

            <listitem>
              <para><sgmltag>id</sgmltag>: The id of the tls that is
              responsible for the link</para>
            </listitem>

            <listitem>
              <para><sgmltag>subid</sgmltag>: The sub-id of the tls that is
              (currently) responsible for the link</para>
            </listitem>
          </itemizedlist>

          <para>Missing:</para>

          <itemizedlist>
            <listitem>
              <para>An easy mapping from positions within the state to
              links.</para>
            </listitem>
          </itemizedlist>

          <para>Recent changes:</para>

          <itemizedlist>
            <listitem>
              <para>This output is available since a long time, still several
              issues may made him unworking before version 0.9.5</para>
            </listitem>

            <listitem>
              <para>Since version 0.9.6 only the state of the current program
              is saved</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-tls-switches">
          <title>TLS Switches</title>

          <para>This output contains information about the green light phases
          of links (lane-to-lane connections). Each green light phase is
          describes by its begin, end and duration. An entry is written into
          the file as soon a green phase of a link ends. To enable writing tls
          switch information you have to add the following definition into one
          of your additional files: <sgmltag>&lt;timed_event
          type="SaveTLSSwitchTimes"
          source="<replaceable>&lt;TLS_ID&gt;</replaceable>"
          dest="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>"/&gt;</sgmltag>.
          The attributes have herein the following meanings:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>type</sgmltag>: type of the event trigger; always
              "<literal>SaveTLSSwitches</literal>" herein</para>
            </listitem>

            <listitem>
              <para><sgmltag>source</sgmltag>: The id of the traffic light
              which state shall be written</para>
            </listitem>

            <listitem>
              <para><sgmltag>dest</sgmltag>: The file to save the state
              into</para>
            </listitem>
          </itemizedlist>

          <para>The output looks like this:</para>

          <programlisting><sgmltag>&lt;tls-switches&gt;</sgmltag>
   <sgmltag>&lt;tlsswitch tls="<replaceable>&lt;JUNCTION_ID&gt;</replaceable>" subid="<replaceable>&lt;JUNCTION_SUB_ID&gt;</replaceable>" \
      fromLane="<replaceable>&lt;LINKS_SOURCE_LANE&gt;</replaceable>" toLane="<replaceable>&lt;LINK_DESTINATION_LANE&gt;</replaceable>" \
      begin="<replaceable>&lt;BEGIN_OF_GREEN_PHASE&gt;</replaceable>" end="<replaceable>&lt;END_OF_GREEN_PHASE&gt;</replaceable>" \
      duration="<replaceable>&lt;DURATION_OF_GREEN_PHASE&gt;</replaceable>"/&gt;</sgmltag>
   ... further switch points ...
<sgmltag>&lt;/tls-switches&gt;</sgmltag></programlisting>

          <para>Each entry is written into a single line. The values have the
          following meanings:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>junction</sgmltag>: The id of the tls that is
              responsible for the link</para>
            </listitem>

            <listitem>
              <para><sgmltag>subid</sgmltag>: The sub-id of the tls that is
              (currently) responsible for the link</para>
            </listitem>

            <listitem>
              <para><sgmltag>fromLane</sgmltag>: The id of the lane the link
              starts at</para>
            </listitem>

            <listitem>
              <para><sgmltag>toLane</sgmltag>: The id of the lane the link
              ends at</para>
            </listitem>

            <listitem>
              <para><sgmltag>begin</sgmltag>: Begin of this link's last green
              phase</para>
            </listitem>

            <listitem>
              <para><sgmltag>end</sgmltag>: End of this link's last green
              phase</para>
            </listitem>

            <listitem>
              <para><sgmltag>duration</sgmltag>: Duration of this link's last
              green phase</para>
            </listitem>
          </itemizedlist>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>This output is available since version 0.9.5</para>
            </listitem>

            <listitem>
              <para>The element "switch" was renamed to "tlsswitch" in version
              0.9.6</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-tls-switch_states">
          <title>TLS Switch States</title>

          <para>This output saves tls-states as the TLS States - output does
          but not every second but only at times the phases or the program
          (see also "<link
          linkend="user_chp06-management-traffic_lights-add_programs">Adding
          new Programs</link>") change. The output is instantiated by adding
          the following definition into one of your additional files:
          <sgmltag>&lt;timed_event type="SaveTLSSwitchStates"
          source="<replaceable>&lt;TLS_ID&gt;</replaceable>"
          dest="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>"/&gt;</sgmltag>.
          The attributes have herein the following meanings:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>type</sgmltag>: type of the event trigger; always
              "<literal>SaveTLSSwitches</literal>" herein</para>
            </listitem>

            <listitem>
              <para><sgmltag>source</sgmltag>: The id of the traffic light
              which state shall be written</para>
            </listitem>

            <listitem>
              <para><sgmltag>dest</sgmltag>: The file to save the state
              into</para>
            </listitem>
          </itemizedlist>

          <para>The output looks like this:</para>

          <programlisting><sgmltag>&lt;tls-switch-states&gt;</sgmltag>
   <sgmltag>&lt;tlsstate time="<replaceable>&lt;SIM_STEP&gt;</replaceable>" id="<replaceable>&lt;TLS_ID&gt;</replaceable>" subid="<replaceable>&lt;TLS_SUBID&gt;</replaceable>"&gt;</sgmltag><replaceable>&lt;STATE&gt;</replaceable><sgmltag>&lt;/tlsstate&gt;</sgmltag>
   ... further states ...
<sgmltag>&lt;/tls-switch-states&gt;</sgmltag></programlisting>

          <para>Each entry is written into a single line. The values have the
          following meanings:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>time</sgmltag>: The simulation time this entry
              was generated for</para>
            </listitem>

            <listitem>
              <para><sgmltag>id</sgmltag>: The id of the tls that is
              responsible for the link</para>
            </listitem>

            <listitem>
              <para><sgmltag>subid</sgmltag>: The sub-id of the tls that is
              (currently) responsible for the link</para>
            </listitem>
          </itemizedlist>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>This output is available since version 0.9.6</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-output-tls-e2">
          <title>Coupled E2-Output</title>

          <para>It is possible to add e2-detectors which are coupled to a
          traffic light. Then, the tls is used to determine the intervals
          (aggregation) time instead of giving a fixed aggregation time. In
          this case, output will be generated every time the traffic light
          switches. To use this feature, simply replace the freq-attribute
          within the description of an e2-detector by the id of the traffic
          light that should steer it (use the attribute
          "<sgmltag>tl</sgmltag>" to specify the id):</para>

          <programlisting><sgmltag>&lt;e2-detector id="<replaceable>&lt;ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"
   length="<replaceable>&lt;DETECTOR_LENGTH&gt;</replaceable>" tl="<replaceable>&lt;TL-ID&gt;</replaceable>" 
   file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" [measures="<replaceable>&lt;MEASURES&gt;</replaceable>"] [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [jam_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [keep_for="<replaceable>&lt;FLOAT&gt;</replaceable>"]/&gt;</sgmltag></programlisting>

          <para>A further feature allows you to collect measures only for the
          time the light turns yellow for a certain link (connection between
          the incoming and the outgoing lane). This should allows measuring
          the maximum jam length in front of a red traffic light for this
          link. To enable this, one has to add the name of the following
          lane:<sgmltag>
          to="<replaceable>&lt;LANE_ID&gt;</replaceable>"</sgmltag> to the
          list of attributes. The incoming lane is already given by the
          "<sgmltag>lane</sgmltag>"-attribute.</para>

          <programlisting><sgmltag>&lt;e2-detector id="<replaceable>&lt;ID&gt;</replaceable>" lane="<replaceable>&lt;LANE_ID&gt;</replaceable>" pos="<replaceable>&lt;POSITION_ON_LANE&gt;</replaceable>"
   length="<replaceable>&lt;DETECTOR_LENGTH&gt;</replaceable>" tl="<replaceable>&lt;TL-ID&gt;</replaceable>" to="<replaceable>&lt;LANE_ID&gt;</replaceable>"
   file="<replaceable>&lt;OUTPUT_FILE&gt;</replaceable>" [measures="<replaceable>&lt;MEASURES&gt;</replaceable>"] [time_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"]
   [speed_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [jam_treshold="<replaceable>&lt;FLOAT&gt;</replaceable>"] [keep_for="<replaceable>&lt;FLOAT&gt;</replaceable>"]/&gt;</sgmltag></programlisting>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>This output was refactored and retested for version
              0.9.8</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="user_chp06-vehicle_handling" revision="0.9.5">
      <title>Vehicles Handling Revisited</title>

      <para>In the normal case, SUMO is meant to simulate urban areas where
      vehicles may start their trips from any edge. Still, there also some
      other approaches to feed a simulation with a demand and some of them
      where implemented in SUMO. You have the following possibilities to add
      vehicles into your network:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Insert vehicles on any edge</para>

          <para>In this case, a vehicle from the list will be inserted at the
          given time into the edge his route starts at. The position of the
          insertion is random (by now), the rightmost lane will be
          used.</para>
        </listitem>

        <listitem>
          <para>Insert vehicles on feeding edges</para>

          <para>This is approach is often used in conjunction with
          od-matrices; each of the districts described in such od-matrices
          contains a list of "feeding" or "source" edges. If you use feeding
          edges, your vehicles will be inserted similar to insertion on normal
          edges as described above, but they will be always inserted at the
          end of the edge and all lanes of the feeding edge will be
          used.</para>
        </listitem>

        <listitem>
          <para>Using emitter</para>

          <para>Emitter are used to insert vehicles into the network at a well
          defined position. An emitter may be placed on a certain lane and
          gets a list of vehicles (or a flow amount) to emit. We use this
          approach often to insert vehicles into the network at places where
          induction loops have measured the flows.</para>
        </listitem>
      </itemizedlist>

      <para>We will now describe the emitters more deeply.</para>

      <sect2 id="user_chp06-vehicle_handling-emitter" revision="0.9.9">
        <title>Emitter</title>

        <para>Emitters may be used to define flows using induction loops as
        input data. For such modelling attempt, you should place emitters at
        those positions on the network where the induction loops are located
        and convert the values retrieved from the induction loops to the
        format emitters may read. The format is described below, together with
        some additional methods to ease generation of emitter files. If you
        are working with such inputs extensively, you may be also interested
        in what the <application>DFROUTER</application> does (see "<link
        linkend="user_chp05-dfrouter">Using Detectors and DFROUTER</link>" for
        a further documentation).</para>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>Although emitters are available for a long time already,
            their description has been added while working on version
            0.9.5</para>
          </listitem>

          <listitem>
            <para>The attribute vehtype was renamed to type while working on
            version 0.9.9</para>
          </listitem>
        </itemizedlist>

        <sect3 id="user_chp06-vehicle_handling-emitter-basic">
          <title>Basic Definition</title>

          <para>You can place an emitter onto a lane by adding the following
          declaration to one of your additional-files:</para>

          <programlisting><sgmltag>&lt;emitter id="<replaceable>&lt;ID&gt;</replaceable>" pos="<replaceable>&lt;POS&gt;</replaceable>" objectid="<replaceable>&lt;LANE_ID&gt;</replaceable>" \
   [friendly_pos="x"] file="<replaceable>&lt;DEFINITION_FILE&gt;</replaceable>"/&gt;</sgmltag></programlisting>

          <para>The fields have the following meanings:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: A string holding the id of the
              emitter.</para>
            </listitem>

            <listitem>
              <para><sgmltag>pos</sgmltag>: Position on the lane in meters; if
              positive, then the following must be ensured:
              0&lt;=<sgmltag><replaceable>&lt;POS&gt;</replaceable></sgmltag>&lt;<replaceable>&lt;LANE_LENGTH&gt;</replaceable>,
              if negative:
              0&gt;<replaceable>&lt;POS&gt;</replaceable>&gt;-<replaceable>&lt;LANE_LENGTH&gt;</replaceable>;
              in this case the position will be counted from the lane's
              end.</para>
            </listitem>

            <listitem>
              <para><sgmltag>objectid</sgmltag>: The id of the lane the
              emitter shall be placed on</para>
            </listitem>

            <listitem>
              <para><sgmltag>friendly_pos</sgmltag>: optional; if this is set
              and the position (<sgmltag>pos</sgmltag>) is not valid, the
              detector will be placed at the lane's end (0.1meter away from
              it).</para>
            </listitem>

            <listitem>
              <para><sgmltag>file</sgmltag>: The file the emitter shall read
              the definition of what/how/when to emit from</para>
            </listitem>
          </itemizedlist>

          <para>An emitter needs further information to know when, how many
          and what kind of vehicles shall be emitted. All this information
          must be written into
          <replaceable>&lt;DEFINITION_FILE&gt;</replaceable>. The easiest way
          to describe vehicle emissions herein is to list all of them
          explicitely:</para>

          <programlisting><sgmltag>&lt;triggeredsource&gt;
   &lt;emit id="veh1" time="0" type="my_type" route="my_route" speed="13.9"/&gt;
   &lt;emit id="veh2" time="4" type="my_type" route="my_route" speed="13.9"/&gt;
   &lt;emit id="veh3" time="8" type="my_type" route="my_route" speed="13.9"/&gt;
&lt;/triggeredsource&gt;
</sgmltag></programlisting>

          <para>Using such a definition only would raise error because we have
          named the vehicle types and the routes but did not define them. We
          can either define them within another additional file or within a
          route file but we have to ensure that they're loaded before the
          emission definition is (see "<link
          linkend="user_chp06-file_load_order">Using the Files in a correct
          Way</link>" on loading order). Let's assume we have done it. In this
          case, using such a definition we would emit three vehicles, having
          the names "veh1", "veh2", and "veh3" as given within the id-field,
          all being of type "my_type". All vehicles use the same route,
          "my_route", and will start with a velocity of 0 at the simulation
          seconds 0, 4, and 8. To summarize, a vehicle emission within an
          Emitter definition is described as following: <sgmltag>&lt;emit
          [id="<replaceable>&lt;VEHICLE_ID&gt;</replaceable>"]
          [type="<replaceable>&lt;VEHICLE_TYPE&gt;</replaceable>"]
          time="<replaceable>&lt;EMISSION_TIME&gt;</replaceable>"
          [route="<replaceable>&lt;VEHICLE_ROUTE&gt;</replaceable>"]
          [speed="<replaceable>&lt;INITIAL_SPEED&gt;</replaceable>"]/&gt;</sgmltag>.
          The meanings of these values are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: The id of the vehicle to
              emit</para>
            </listitem>

            <listitem>
              <para><sgmltag>type</sgmltag>: Name of the vehicle type the
              vehicle to emit shall have</para>
            </listitem>

            <listitem>
              <para><sgmltag>time</sgmltag>: The time at which the vehicle
              shall be emitted (in simulation seconds)</para>
            </listitem>

            <listitem>
              <para><sgmltag>route</sgmltag>: Name of the route the vehicle
              shall use</para>
            </listitem>

            <listitem>
              <para><sgmltag>speed</sgmltag>: The speed the vehicle shall be
              emitted with in m/s</para>
            </listitem>
          </itemizedlist>

          <para>As you can see, several of the fields are marked as optional.
          If no id is given, the id will be constructed automatically. The
          vehicle will then have a name made up from the emitter's id followed
          by the time step the vehicle shall be emitted at and a running
          number, all divided by a '_'
          ("<replaceable>&lt;EMITTER_ID&gt;</replaceable>_<replaceable>&lt;DEPART&gt;</replaceable>_<replaceable>&lt;RUNNING&gt;</replaceable>").
          Also, the emission speed is optional. If not given, the minimum of
          the maximum speed allowed on the lane and the vehicle's maximum
          velocity is used. If the emission time lies before the simulation
          begin, the vehicle will be discarded. The following sections
          describe how one can omit explicite attributes for vehicle type and
          route.</para>

          <para>Recent changes:</para>

          <itemizedlist>
            <listitem>
              <para>The definition has been renamed from
              "<sgmltag>trigger</sgmltag>" to "<sgmltag>emitter</sgmltag>"
              after version 0.9.10. In conjunction, the definition's attribute
              "<sgmltag>objecttype</sgmltag>" is not longer used.</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-vehicle_handling-emitter-routedist">
          <title>Describing Route Distributions</title>

          <para>To avoid computing and assigning a vehicle type and a route to
          each vehicle emission definition explicitely, you can define a
          probability distribution by which routes/types are chosen from a
          set. For the routes, you can do this as shown in the next
          example:</para>

          <programlisting><sgmltag>&lt;triggeredsource&gt;
   &lt;routedistelem id="my_route1" probability=".2"/&gt;
   &lt;routedistelem id="my_route2" probability=".8"/&gt;

   &lt;emit id="veh1" time="0" type="my_type" speed="13.9"/&gt;
   &lt;emit id="veh2" time="4" type="my_type" speed="13.9"/&gt;
&lt;/triggeredsource&gt;
</sgmltag></programlisting>

          <para>Now, a random route is assigned to a vehicle, "my_route1" with
          a probability of .2, "my_route2" with a probability of .8. The
          probabilities are normed automatically, that means that you can also
          use numbers that do not sum to 1. Each occuring
          <sgmltag>routedistelem</sgmltag> will be added to the distribution
          (see also "<link
          linkend="user_chp06-vehicle_handling-emitter-dist_reset">Resetting
          the Distributions</link>"). The meanings of the attributes of a
          <sgmltag>routedistelem</sgmltag>-element are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the route to use (the
              route must have been loaded in prior to the occurence of the
              <sgmltag>routedistelem</sgmltag>-element)</para>
            </listitem>

            <listitem>
              <para><sgmltag>probability</sgmltag>: The probability (value/sum
              of probabilities) of choosing the route</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-vehicle_handling-emitter-vtype_distribution">
          <title>Describing Vehicle Type Distributions</title>

          <para>Vehicle types may be assigned to vehicles from distributions,
          too:</para>

          <programlisting><sgmltag>&lt;triggeredsource&gt;
   &lt;vtypedistelem id="my_type1" probability=".8"/&gt;
   &lt;vtypedistelem id="my_type2" probability=".8"/&gt;

   &lt;emit id="veh1" time="0" route="my_route" speed="13.9"/&gt;
   &lt;emit id="veh2" time="4" route="my_route" speed="13.9"/&gt;
&lt;/triggeredsource&gt;
</sgmltag></programlisting>

          <para>In this example the probabilities for using one of the types
          are equal. The probabilities are normed automatically, that means
          that you can also use numbers that do not sum to 1. Each occuring
          <sgmltag>vtypedistelem</sgmltag> will be added to the distribution
          (see also "<link
          linkend="user_chp06-vehicle_handling-emitter-dist_reset">Resetting
          the Distributions</link>"). The meanings of the attributes of a
          <sgmltag>vtypedistelem</sgmltag>-element are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the vehicle type to use
              (the vehicle type must have been loaded in prior to the
              occurence of the
              <sgmltag>vtypedistelem</sgmltag>-element)</para>
            </listitem>

            <listitem>
              <para><sgmltag>probability</sgmltag>: The probability (value/sum
              of probabilities) of choosing the vehicle type</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-vehicle_handling-emitter-dist_reset">
          <title>Resetting the Distributions</title>

          <para>As said before, all occurences of
          <sgmltag>vtypedistelem</sgmltag> are stored into the same
          distribution. This also holds for the occurences of
          <sgmltag>routedistelem</sgmltag>. Now, one maybe wants to model
          different distributions over time. To allow this, you can add a
          "<sgmltag>reset</sgmltag>"-element to your description:</para>

          <programlisting><sgmltag>&lt;triggeredsource&gt;
   &lt;vtypedistelem id="my_type1" probability=".5"/&gt;
   &lt;vtypedistelem id="my_type2" probability=".5"/&gt;
   &lt;routedistelem id="my_route1" probability=".2"/&gt;
   &lt;routedistelem id="my_route2" probability=".8"/&gt;

   &lt;emit time="10" speed="13.9"/&gt;
   ... further vehicle emits ...
   &lt;emit time="20" speed="13.9"/&gt;

   &lt;reset/&gt;

   &lt;vtypedistelem id="my_type3" probability=".5"/&gt;
   &lt;vtypedistelem id="my_type4" probability=".5"/&gt;
   &lt;routedistelem id="my_route3" probability=".2"/&gt;
   &lt;routedistelem id="my_route4" probability=".8"/&gt;

   &lt;emit time="30" speed="13.9"/&gt;
   ... further vehicle emits ...
   &lt;emit time="40" speed="13.9"/&gt;

&lt;/triggeredsource&gt;
</sgmltag></programlisting>

          <para>This would force the emitter to reset all distributions after
          emitting the vehicle at time 20. While vehicles emitted within the
          times 10 and 20 would use the vehicle types "my_type1" and
          "my_type2" and routes "my_route1" and "my_route2", the vehicles
          emitted between time 30 and 40 - after the
          <sgmltag>reset</sgmltag>-element - would use the vehicle types
          "my_type3" and "my_type4" and the routes "my_route3" and
          "my_route4".</para>
        </sect3>

        <sect3 id="user_chp06-vehicle_handling-emitter-flows">
          <title>Using Flows</title>

          <para>Instead of describing each vehicle emission explicitely, you
          can specify a flow to emit. In this case, vehicle type and routes
          distributions must be given:</para>

          <programlisting><sgmltag>&lt;triggeredsource&gt;
   &lt;vtypedistelem id="my_type1" probability=".5"/&gt;
   &lt;vtypedistelem id="my_type2" probability=".5"/&gt;
   &lt;routedistelem id="my_route1" probability=".2"/&gt;
   &lt;routedistelem id="my_route2" probability=".8"/&gt;

   &lt;flow no="1800" end="10"/&gt;
   &lt;flow no="900" end="20"/&gt;
&lt;/triggeredsource&gt;
</sgmltag></programlisting>

          <para>The meaning of the attributes of a
          <sgmltag>flow</sgmltag>-element are:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para><sgmltag>no</sgmltag>: The flow to use in veh/h.</para>
            </listitem>

            <listitem>
              <para><sgmltag>end</sgmltag>: The end of the interval for which
              this flow shall be emitted. If &lt;0 (default) the flow will be
              used until the simulation's end.</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="user_chp06-trigger">
      <title>Traffic Management and Other Structures</title>

      <para>SUMO holds several additional structures to model speed limits,
      public transport etc. The structures are normally defined within
      additional files.</para>

      <sect2 id="user_chp06-management-traffic_lights">
        <title>Traffic Lights</title>

        <para>Normally, <application>NETCONVERT</application> will generate
        traffic lights and programs for junctions during the computation of
        the networks. Still, these computed programs differ quite often from
        those found in reality. To feed the simulation with traffic light
        programs from the reality, it is possible to load additional programs
        since version 0.9.4. Furthermore, one can describe when and how a set
        of traffic lights can switch from one program to another. Both will be
        discussed in the following subchapters.</para>

        <para>Handling of traffic lights is not yet very user friendly.
        Besides the following descriptions, a further document, "<ulink
        url="http://sumo.sourceforge.net/docs/gen/sumo_moreon_tls.shtml">SUMO
        - More on... Traffic Lights</ulink>", exists which describes the usage
        of traffic lights more deeply.</para>

        <sect3 id="user_chp06-management-traffic_lights-add_programs">
          <title>Adding new TLS-Programs</title>

          <para>Since version 0.9.4 you may attach a new program to a tls
          after the network has been loaded. Defining a tls program is not
          that straightforward, yet. If you are definitely interested in this,
          we advice you to read the "<ulink
          url="http://sumo.sourceforge.net/docs/gen/sumo_moreon_tls.shtml">SUMO
          - More on... Traffic Lights</ulink>" document where the format is
          described. Basically, a tls program definition looks like
          this:</para>

          <para><programlisting format="linespecific"
          linenumbering="unnumbered"><sgmltag>&lt;tl-logic type="static"&gt;</sgmltag>
   <sgmltag>&lt;key&gt;</sgmltag>0<sgmltag>&lt;/key&gt;</sgmltag>
   <sgmltag>&lt;subkey&gt;</sgmltag>0<sgmltag>&lt;/subkey&gt;</sgmltag>
   <sgmltag>&lt;phaseno&gt;</sgmltag>8<sgmltag>&lt;/phaseno&gt;</sgmltag>
   <sgmltag>&lt;offset&gt;</sgmltag>0<sgmltag>&lt;/offset&gt;</sgmltag>
   <sgmltag>&lt;phase duration="20" phase="0000111100001111" brake="1111110011111100" \
      yellow="0000000000000000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="4" phase="0000110000001100" brake="1111111111111111" \
      yellow="0000001100000011"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="3" phase="0000110000001100" brake="1111001111110011" \
      yellow="0000000000000000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="4" phase="0000000000000000" brake="1111111111111111" \
      yellow="0000110000001100"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="20" phase="1111000011110000" brake="1100111111001111" \
      yellow="0000000000000000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="4" phase="1100000011000000" brake="1111111111111111" \
      yellow="0011000000110000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="3" phase="1100000011000000" brake="0011111100111111" \
      yellow="0000000000000000"/&gt;</sgmltag>
   <sgmltag>&lt;phase duration="4" phase="0000000000000000" brake="1111111111111111" \
      yellow="1100000011000000"/&gt;</sgmltag>
<sgmltag>&lt;/tl-logic&gt;</sgmltag></programlisting></para>

          <para>After you have defined a tls program, you can add it to one of
          your additional files. You may load several programs for a single
          tls into the simulation. The program loaded as last will be used
          (unless not defined using a WAUT description, see below). Please
          remark, that all subkeys of your programs must differ if they
          describe the same tls.</para>

          <para>Recent changes:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Loading of additional tls programs is implemented since
              version 0.9.4</para>
            </listitem>

            <listitem>
              <para>The <sgmltag>inclanes</sgmltag> tag has been removed from
              the network description since version 0.9.4</para>
            </listitem>

            <listitem>
              <para>The tag <sgmltag>keyno</sgmltag> has been renamed to
              <sgmltag>subkey</sgmltag> since version 0.9.4</para>
            </listitem>
          </itemizedlist>

          <caution>
            <para>Please keep in mind that this feature is quite new and that
            du to this some things may not work as suspected and may get
            changed in the near future.</para>
          </caution>
        </sect3>

        <sect3 id="user_chp06-management-traffic_lights-switch_procedure">
          <title>Defining the switch Times and Procedure</title>

          <para>In the reality, a tls often uses different programs during a
          day and maybe also for weekdays and for the weekend days. Since
          version 0.9.4 you can define switch times between the programs using
          a WAUT (I am very sorry, but I do not know the English word for WAUT
          - this may be a matter of change).</para>

          <para>Let's assume we would have a tls which knows four programs -
          two for weekdays and two for weekend days where from 22.00 till 6.00
          the night plan shall be used and from 6.00 till 22.00 the day plan.
          We'll give these programs the names "weekday_night", "weekday_day",
          "weekend_night", "weekend_day". To describe the switch process, we
          have to describe the switch at first, assuming our simulation runs
          from monday 0.00 (second 0) to monday 0.00 (second 604800):</para>

          <para><programlisting format="linespecific"
          linenumbering="unnumbered"><sgmltag>&lt;WAUT refTime="0" id="myWAUT" startProg="weekday_night"&gt;</sgmltag>
   <sgmltag>&lt;wautSwitch time="21600" to="weekday_day"/&gt;</sgmltag>    &lt;!-- monday, 6.00 --&gt;
   <sgmltag>&lt;wautSwitch time="79200" to="weekday_night"/&gt;</sgmltag>  &lt;!-- monday, 22.00 --&gt;
   <sgmltag>&lt;wautSwitch time="108000" to="weekday_day"/&gt;</sgmltag>   &lt;!-- tuesday, 6.00 --&gt;
... further weekdays ...
   <sgmltag>&lt;wautSwitch time="453600" to="weekend_day"/&gt;</sgmltag>   &lt;!-- saturday, 6.00 --&gt;
... the weekend days ...
<sgmltag>&lt;/WAUT&gt;</sgmltag></programlisting></para>

          <para>The fields in <sgmltag>WAUT</sgmltag> have the following
          meanings:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>refTime</sgmltag>: A reference time which is used
              as offset to the switch times given later (in simulation
              seconds)</para>
            </listitem>

            <listitem>
              <para><sgmltag>id</sgmltag>: The name of the defined WAUT</para>
            </listitem>

            <listitem>
              <para><sgmltag>startProg</sgmltag>: The program that will be
              used at the simulation's begin</para>
            </listitem>
          </itemizedlist>

          <para>and the fields in <sgmltag>wautSwitch</sgmltag>:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>time</sgmltag>: The time the switch will take
              place</para>
            </listitem>

            <listitem>
              <para><sgmltag>to</sgmltag>: The name of the program the
              assigned tls shall switch to</para>
            </listitem>
          </itemizedlist>

          <para>Of course, programs with the used names must be defined before
          this definition is read. Also, the time must be sorted.</para>

          <para>Additionally, we have to define which tls shall be switched by
          the WAUT. This is done as following:</para>

          <para><programlisting format="linespecific"
          linenumbering="unnumbered"><sgmltag>&lt;wautJunction wautID="myWAUT" junctionID="RCAS" [procedure="Stretch"] [synchron="t"]/&gt;</sgmltag>
</programlisting></para>

          <para>Here, the attributes have the following meaning:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>wautID</sgmltag>: The id of the WAUT the tls
              shall be switched by</para>
            </listitem>

            <listitem>
              <para><sgmltag>junctionID</sgmltag>: The name of the tls to
              assign to the WAUT</para>
            </listitem>

            <listitem>
              <para><sgmltag>procedure</sgmltag>: The switching algorithm to
              use; If none is given, the programs will switch immediately
              (default)</para>
            </listitem>

            <listitem>
              <para><sgmltag>synchron</sgmltag>: Additional information
              whether the switch shall be done synchron (default:
              false)</para>
            </listitem>
          </itemizedlist>

          <para>You may assign several tls to a single WAUT. YOu may also
          assign several WAUTs to a single junction in theory, but this is not
          done in reality. The switching procedures are currently under
          development.</para>

          <para>Recent changes:</para>

          <itemizedlist>
            <listitem>
              <para>WAUTs are implemented since version 0.9.4</para>
            </listitem>
          </itemizedlist>

          <caution>
            <para>Please keep in mind that this feature is quite new and that
            du to this some things may not work as suspected and may get
            changed in the near future.</para>
          </caution>
        </sect3>
      </sect2>

      <sect2 id="user_chp06-management-public">
        <title>Public Transport</title>

        <para>Possibilities to simulate public transport were firstly added in
        version 0.9.3. By now you may define positions of bus stops and let
        vehicles ("busses") stop at these positions for a pre-given time.
        Definitions of bus stop locations in SUMO have the following format:
        <sgmltag>&lt;busStop
        id="<replaceable>&lt;BUS_STOP_ID&gt;</replaceable>"
        objectid="<replaceable>&lt;LANE_ID&gt;</replaceable>"
        from="<replaceable>&lt;STARTING_POSITION&gt;</replaceable>"
        to="<replaceable>&lt;ENDING_POSITION&gt;</replaceable>"
        [line="<replaceable>&lt;LINE_ID&gt;</replaceable>[;<replaceable>&lt;LINE_ID&gt;</replaceable>]*"]/&gt;</sgmltag>.
        That means that a bus stop is an area on a lane. The parameters have
        the following meanings:</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>id</sgmltag>: id of the bus stop; must be
            unique</para>
          </listitem>

          <listitem>
            <para><sgmltag>objectid</sgmltag>: the id of the lane the busstop
            shall be located at</para>
          </listitem>

          <listitem>
            <para><sgmltag>from</sgmltag>: the begin position on the lane (the
            lower position on the lane) in meters</para>
          </listitem>

          <listitem>
            <para><sgmltag>to</sgmltag>: the end position on the lane (the
            higher position on the lane) in meters</para>
          </listitem>

          <listitem>
            <para><sgmltag>line</sgmltag>: A list of names separated by a
            semicolon (';') meant to be the names of the bus lines that stop
            at this bus stop. This is only used for visualisation
            purposes.</para>
          </listitem>
        </itemizedlist>

        <figure id="img_busstop">
          <title>Visualization of a bus stop in SUMO (from
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/busses1</filename>)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/bus_stop1.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Vehicles must be informed that they must stop at a bus stop. The
        following example shows how this should be done (taken from
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/busses1</filename>):</para>

        <programlisting>    <sgmltag>&lt;vtype id="BUS" accel="2.6" decel="4.5" sigma="0.5" length="15" maxspeed="70"
            color="1,1,0"/&gt;</sgmltag>

    <sgmltag>&lt;vehicle id="0" type="BUS" depart="0" color="1,1,0"&gt;</sgmltag>
        <sgmltag>&lt;route&gt;2/0to2/1 2/1to1/1 1/1to1/2 1/2to0/2 0/2to0/1 0/1to0/0 0/0to1/0 1/0to2/0
                              2/0to2/1&lt;/route&gt;</sgmltag>
        <sgmltag>&lt;stop bus_stop="busstop1" duration="20"/&gt;</sgmltag>
        <sgmltag>&lt;stop bus_stop="busstop2" duration="20"/&gt;</sgmltag>
        <sgmltag>&lt;stop bus_stop="busstop3" duration="20"/&gt;</sgmltag>
        <sgmltag>&lt;stop bus_stop="busstop4" duration="20"/&gt;</sgmltag>
    <sgmltag>&lt;/vehicle&gt;</sgmltag>
</programlisting>

        <para>What we have here is a vehicle named "0" being a "BUS". "BUS" is
        a referenced type declared earlier. The vehicle has an embedded route
        (written by hand in this case) and a list of stop places. Each stop
        place is described by two attributes, "<sgmltag>bus_stop</sgmltag>"
        and "<sgmltag>duration</sgmltag>" where "<sgmltag>bus_stop</sgmltag>"
        is the name of the bus stop the vehicle shall halt at and
        "<sgmltag>duration</sgmltag>" is the time the vehicle shall wait at
        the bus stop in seconds. Please remark that the order of bus stops the
        vehicle shall halt at must be correct.</para>

        <para>You may also let a vehicle stop at another position than a bus
        stop. The complete definition of a vehicle's stop is:
        <sgmltag>&lt;stop (
        bus_stop="<replaceable>&lt;BUS_STOP_ID&gt;</replaceable>" |
        lane="<replaceable>&lt;LANE_ID&gt;</replaceable>"
        pos="<replaceable>&lt;POSITION_AT_LANE&gt;</replaceable>" )
        duration="<replaceable>&lt;HALTING_DURATION&gt;</replaceable>"/&gt;</sgmltag>.
        This means you can <emphasis>either</emphasis> use a bus stop
        <emphasis>or</emphasis> a lane position to define where a vehicle has
        to stop.</para>

        <para>Again the list of attributes for the
        "<sgmltag>stop</sgmltag>"-element of a vehicle:</para>

        <itemizedlist>
          <listitem>
            <para>Either:</para>

            <itemizedlist>
              <listitem>
                <para><sgmltag>bus_stop</sgmltag>: id of the bus stop the
                vehicle shall halt at; the bus stop must be previously
                declared</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>or:</para>

            <itemizedlist>
              <listitem>
                <para><sgmltag>lane</sgmltag>: id of the lane the vehicle
                shall stop at; the lane must be within the network</para>
              </listitem>

              <listitem>
                <para>pos: Position on the lane the vehicle shall stop at;
                double</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><sgmltag>duration</sgmltag>: the time the vehicle shall halt
            at the bus stop in seconds; int, mandatory</para>
          </listitem>
        </itemizedlist>

        <para>Examples:</para>

        <itemizedlist>
          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/busses1</filename>
            shows a small example for defining bus stops and letting a bus
            halt at them</para>
          </listitem>

          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/3busses1</filename>
            is almost the same as
            <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/busses1</filename>
            but three busses are driving here and the first bus stop is longer
            than the others. This example shows how the length of bus stops
            determines how many busses actually can stop here.</para>
          </listitem>

          <listitem>
            <para><filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended/vehicle_stops</filename>
            shows a small example where a vehicle halts</para>
          </listitem>
        </itemizedlist>

        <para>Some extensions still to be done:</para>

        <itemizedlist>
          <listitem>
            <para>Definition of public transport lines instead of giving a
            list of stops for each vehicle?</para>
          </listitem>

          <listitem>
            <para>Halting times dependent to the number of passengers within
            the vehicle</para>
          </listitem>

          <listitem>
            <para>Optionally do not let vehicles halt if no person wants to
            leave/enter</para>
          </listitem>
        </itemizedlist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>The definition has been renamed from
            "<sgmltag>trigger</sgmltag>" to "<sgmltag>busStop</sgmltag>" after
            version 0.9.10. In conjunction, the definition's attribute
            "<sgmltag>objecttype</sgmltag>" is not longer used.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-management-vss">
        <title>Variable Speed Signs (VSS)</title>

        <para>One of the trigger objects that may be specified within an
        additional file allows the simulation of variable speed signs. The
        syntax for such an object is: <sgmltag>&lt;variableSpeedSign
        id="<replaceable>&lt;VSS_ID&gt;</replaceable>"
        objectid="<replaceable>&lt;LANE_ID&gt;</replaceable>"
        file="<replaceable>&lt;DEF_FILE&gt;</replaceable>"/&gt;</sgmltag>.
        This trigger is typed to be a vss by the combination of the values of
        the attributes <sgmltag>objecttype="lane"</sgmltag> and
        <sgmltag>attr="speed"</sgmltag>. Although no other combinations are
        implemented so far, this combination forces the simulation to change
        the attribute "speed" of a "lane"-object, exactly what vss do. Of
        course, the vehicles themselves do not override this maximum velocity
        what does not exactly represent the reality.</para>

        <para>You may have noticed that a file name must be supplied, called
        <sgmltag><replaceable>&lt;DEF_FILE&gt;</replaceable></sgmltag> within
        the schema above. This file must contain the information about when a
        certain speed shall be set onto the lane. This file has the following
        format:</para>

        <programlisting><sgmltag>&lt;vss&gt;</sgmltag>
   <sgmltag>&lt;step time="<replaceable>&lt;TIME&gt;</replaceable>" speed="<replaceable>&lt;SPEED&gt;</replaceable>"/&gt;</sgmltag>
   <sgmltag>&lt;step time="<replaceable>&lt;TIME&gt;</replaceable>" speed="<replaceable>&lt;SPEED&gt;</replaceable>"/&gt;</sgmltag>

   ... further entries ...

   <sgmltag>&lt;step time="<replaceable>&lt;TIME&gt;</replaceable>" speed="<replaceable>&lt;SPEED&gt;</replaceable>"/&gt;</sgmltag>
<sgmltag>&lt;/vss&gt;</sgmltag></programlisting>

        <para>Each <sgmltag>step</sgmltag> is a combination of the
        <sgmltag>time</sgmltag> the next new speed shall be set and the
        <sgmltag>speed</sgmltag> to set itself.</para>

        <para>A small example for usage of vss' within SUMO may be found in
        <filename>"data/examples/extended/variable_speed_signs"</filename>.</para>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>The definition has been renamed from
            "<sgmltag>trigger</sgmltag>" to
            "<sgmltag>variableSpeedSign</sgmltag>" after version 0.9.10. In
            conjunction, the definition's attributes
            "<sgmltag>objecttype</sgmltag>" and "<sgmltag>attr</sgmltag>" are
            not longer used.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp06-management-rerouter" revision="0.9.8">
        <title>Rerouter</title>

        <para>Rerouter change the route of a vehicle as soon as the vehicle
        moves onto a specified edge.</para>

        <para>A rerouter is set into the simulated network by adding the
        following declaration line to an "additional file":
        <sgmltag>&lt;rerouter
        id="<replaceable>&lt;REROUTER_ID&gt;</replaceable>"
        objectid="<replaceable>&lt;EDGE_ID&gt;</replaceable>[;<replaceable>&lt;EDGE_ID&gt;</replaceable>]"
        file="<replaceable>&lt;DEFINITION_FILE&gt;</replaceable>"
        [probability="<replaceable>&lt;PROBABILITY&gt;</replaceable>"]/&gt;</sgmltag>.
        As you may see, rerouter may be placed on several edges, at least one
        edge is necessary. Furthermore, you may already define the probability
        for rerouting a vehicle by giving a number between 0 (none) and 1
        (all). The declaration values are</para>

        <itemizedlist>
          <listitem>
            <para><sgmltag>id</sgmltag>: the id of of the rerouter</para>
          </listitem>

          <listitem>
            <para><sgmltag>objectid</sgmltag>: an edge id or a list of edge
            ids where vehicles shall be rerouted</para>
          </listitem>

          <listitem>
            <para><sgmltag>file</sgmltag>: path to the definition file</para>
          </listitem>

          <listitem>
            <para><sgmltag>probability</sgmltag>: the probability for vehicle
            rerouting (0-1)</para>
          </listitem>
        </itemizedlist>

        <para>In addition to this declaration a definition file (stored in
        <sgmltag><replaceable>&lt;DEFINITION_FILE&gt;</replaceable></sgmltag>)
        must be given which describes the behaviour of the rerouter over time.
        Each description of what a rerouter shall do is embedded in an
        interval definition which describes within which time period the
        rerouter shall work. This is set up as following:</para>

        <programlisting><sgmltag>&lt;rerouter&gt;</sgmltag>
   <sgmltag>&lt;interval begin="<replaceable>&lt;BEGIN_TIME&gt;</replaceable>" end="<replaceable>&lt;END_TIME&gt;</replaceable>"/&gt;</sgmltag>
      ... action description ...
   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/rerouter&gt;</sgmltag></programlisting>

        <para>A rerouter may work in several different ways. Within a time
        period you may close an edge, or assign new destinations or pregiven
        routes to vehicles. The next subchapters will describe these
        possibilities and how to describe them within the rerouter's
        definition file in detail.</para>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>A complete description of rerouters was added in version
            0.9.5; in accordace, definitions of rerouters have changed</para>
          </listitem>

          <listitem>
            <para>The description was reworked for version 0.9.8</para>
          </listitem>

          <listitem>
            <para>The definition has been renamed from
            "<sgmltag>trigger</sgmltag>" to "<sgmltag>rerouter</sgmltag>"
            after version 0.9.10. In conjunction, the definition's attribute
            "<sgmltag>objecttype</sgmltag>" is not longer used.</para>
          </listitem>
        </itemizedlist>

        <sect3 id="user_chp06-management-rerouter-closing">
          <title>Closing a Street</title>

          <para>A "<literal>closing_reroute</literal>" forces the rerouter to
          close the edge
          <sgmltag><replaceable>&lt;EDGE_ID&gt;</replaceable></sgmltag>.
          Vehicles which normally would pass this edge will get a new route as
          soon as they reach one of the edges given in the
          <sgmltag>objectid</sgmltag>-attribute of the rerouter's declaration.
          a <literal>closing_reroute</literal> definition may look like
          this:</para>

          <programlisting><sgmltag>&lt;rerouter&gt;</sgmltag>
   <sgmltag>&lt;interval begin="<replaceable>&lt;BEGIN_TIME&gt;</replaceable>" end="<replaceable>&lt;END_TIME&gt;</replaceable>"/&gt;</sgmltag>
      <sgmltag>&lt;closing_reroute id="<replaceable>&lt;EDGE_ID&gt;</replaceable>"/&gt;</sgmltag>
   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/rerouter&gt;</sgmltag></programlisting>

          <para>The attributes used within such definitions are:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>id</sgmltag>: the id of the closed edge;
              mandatory string, the id must be the id of an edge within the
              network</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-management-rerouter-dest_prob">
          <title>Assigning a new Destination</title>

          <para>A "<literal>dest_prob_reroute</literal>" forces the rerouter
          to assign a new route to vehicles that pass one of the edges defined
          in the <sgmltag>objectid</sgmltag>-attribute of the rerouter's
          declaration. A new route destination is used, defined by the name of
          a new destination in the according element:</para>

          <programlisting><sgmltag>&lt;rerouter&gt;</sgmltag>
   <sgmltag>&lt;interval begin="<replaceable>&lt;BEGIN_TIME&gt;</replaceable>" end="<replaceable>&lt;END_TIME&gt;</replaceable>"/&gt;</sgmltag>
      <sgmltag>&lt;dest_prob_reroute id="<replaceable>&lt;EDGE_ID1&gt;</replaceable>" probability="<replaceable>&lt;PROBABILITY1&gt;</replaceable>"/&gt;</sgmltag>
      <sgmltag>&lt;dest_prob_reroute id="<replaceable>&lt;EDGE_ID2&gt;</replaceable>" probability="<replaceable>&lt;PROBABILITY2&gt;</replaceable>"/&gt;</sgmltag>
   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/rerouter&gt;</sgmltag></programlisting>

          <para>The route is computed automatically using the
          Dijkstra-algorithm and starting at the edge the vehicle is located
          at and ending at the new destination. The new route will be the
          fastest route in the empty network.</para>

          <para>The attributes used within a
          <literal>dest_prob_reroute</literal> are:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>id</sgmltag>: the id of the new destination;
              mandatory string, the id must be the id of an edge within the
              network</para>
            </listitem>

            <listitem>
              <para><sgmltag>probability</sgmltag>: the probability with which
              a vehicle will use the given edge as destination; mandatory
              float, should be between 0 and 1; the sum of the probabilities
              should be 1 (but this is not necessary)</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="user_chp06-management-rerouter-route_prob">
          <title>Assigning a new Route</title>

          <para>A "<literal>route_prob_reroute</literal>" forces the rerouter
          to assign a new route to vehicles which pass one of the edges
          defined in the <sgmltag>objectid</sgmltag>-attribute of the
          rerouter's declaration. In this case, the id of a complete route
          must be supplied instead of a new destination:</para>

          <programlisting><sgmltag>&lt;rerouter&gt;</sgmltag>
   <sgmltag>&lt;interval begin="<replaceable>&lt;BEGIN_TIME&gt;</replaceable>" end="<replaceable>&lt;END_TIME&gt;</replaceable>"/&gt;</sgmltag>
      <sgmltag>&lt;route_prob_reroute id="<replaceable>&lt;ROUTE_ID1&gt;</replaceable>" probability="<replaceable>&lt;PROBABILITY1&gt;</replaceable>"/&gt;</sgmltag>
      <sgmltag>&lt;route_prob_reroute id="<replaceable>&lt;ROUTE_ID2&gt;</replaceable>" probability="<replaceable>&lt;PROBABILITY2&gt;</replaceable>"/&gt;</sgmltag>
   <sgmltag>&lt;/interval&gt;</sgmltag>

   ... further intervals ...

<sgmltag>&lt;/rerouter&gt;</sgmltag></programlisting>

          <para>The attributes used within such definitions are:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>id</sgmltag>: the id of a new route to assign;
              mandatory string, the id must be the id of a previously loaded
              route</para>
            </listitem>

            <listitem>
              <para><sgmltag>probability</sgmltag>: the probability with which
              a vehicle will use the given edge as destination; mandatory
              float, should be between 0 and 1; the sum of the probabilities
              should be 1</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>

      <sect2 id="user_chp06-management-vclasses" revision="0.9.5">
        <title>Vehicle Classes</title>

        <para>Since version 0.9.5 SUMO is capable to handle vehicle classes.
        One can close a road or a lane for certain vehicle classes or
        explicitely allow certain vehicle classes on a road/lane. This is done
        by a combination of assigning allowed/disallowed vehicle classes to
        roads/lanes and additionally giving vehicles a further class
        attributes. Available vehicle classes as well as using them is
        described within the next subchapters.</para>

        <caution>
          <para>Please keep in mind that this feature is quite new and that du
          to this some things may not work as suspected and may get changed in
          the near future.</para>

          <para>We want to ask you to supply us any comments on this topic -
          it is not completely designed, yet.</para>
        </caution>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para>A first support for vehicle classes was added in version
            0.9.5</para>
          </listitem>
        </itemizedlist>

        <sect3 id="user_chp06-management-vclasses-defs">
          <title>Available Vehicle Classes</title>

          <para>A vehicle class is made up of two parts. The first part
          describes to what kind of an authority the vehicle belongs. The next
          table shows what kind of authorities are defined currently:</para>

          <table id="tab_vehicle_class_authorities">
            <title>Allowed vehicle class authority descriptions</title>

            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Table Name</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>private</entry>

                  <entry>The vehicle belongs to a private person</entry>
                </row>

                <row>
                  <entry>public_transport</entry>

                  <entry>The vehicle is a public transport vehicle</entry>
                </row>

                <row>
                  <entry>public_emergency</entry>

                  <entry>The vehicle is an emergency vehicle</entry>
                </row>

                <row>
                  <entry>public_authority</entry>

                  <entry>The vehicle belongs to a public authority
                  (police)</entry>
                </row>

                <row>
                  <entry>public_army</entry>

                  <entry>The vehicle is an army vehicle</entry>
                </row>

                <row>
                  <entry>vip</entry>

                  <entry>The vehicle is used to transport a vip (very
                  important person)</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>The second part describes the kind of the vehicle. Currently
          possible values are shown within the next table:</para>

          <table id="tab_vehicle_class_kinds">
            <title>Allowed vehicle class vehicle kind descriptions</title>

            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Table Name</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>passenger</entry>

                  <entry>A plain passenger car</entry>
                </row>

                <row>
                  <entry>hov</entry>

                  <entry>A heavy occupied vehicle</entry>
                </row>

                <row>
                  <entry>taxi</entry>

                  <entry>A taxi</entry>
                </row>

                <row>
                  <entry>bus</entry>

                  <entry>A bus</entry>
                </row>

                <row>
                  <entry>delivery</entry>

                  <entry>A small delivery vehicle</entry>
                </row>

                <row>
                  <entry>transport</entry>

                  <entry>A truck</entry>
                </row>

                <row>
                  <entry>lightrail</entry>

                  <entry>A lightrail</entry>
                </row>

                <row>
                  <entry>cityrail</entry>

                  <entry>A cityrail</entry>
                </row>

                <row>
                  <entry>rail_slow</entry>

                  <entry>A slow transport rail</entry>
                </row>

                <row>
                  <entry>rail_fast</entry>

                  <entry>A fast passenger rail</entry>
                </row>

                <row>
                  <entry>motorcycle</entry>

                  <entry>A motorcycle</entry>
                </row>

                <row>
                  <entry>bicycle</entry>

                  <entry>A bicycle</entry>
                </row>

                <row>
                  <entry>pedestrian</entry>

                  <entry>A pedestrian</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Please remark that both the authority descriptions and kind
          descriptions are only names, no model is stored behind them. By
          defining a vehicle type as "pedestrian" you will not get a person
          walking within the simulation - currently pedestrian are not modeled
          anyway. These values simply name possible types of vehicles found on
          a network to allow closing/opening lanes or edges for them
          currently.</para>
        </sect3>

        <sect3 id="user_chp06-management-vclasses-network_prepartion">
          <title>Closing/Opening Roads/Lanes for certain Vehicle
          Classes</title>

          <para>Roads/lanes are normally marked to allow/disallow a certain
          vehicle class while building the network using NETCONVERT. This
          process is described in chapter "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml#user_chp04-xml_descriptions-edges-vclasses">Defining
          allowed Vehicle Types</ulink>".</para>
        </sect3>

        <sect3 id="user_chp06-management-vclasses-vehicle_definitions">
          <title>Assigning a Type to a Vehicle</title>

          <para>You can assign a vehicle class to a vehicle by extending this
          vehicle's vehicle type. Assume you want to set a vehicle as being of
          the class "bus". A vehicle type definition could look like
          this:</para>

          <programlisting>    <sgmltag>&lt;vtype id="BUS" accel="2.6" decel="4.5" sigma="0.5" length="15" maxspeed="70"
            color="1,1,0" vclass="public_bus"/&gt;</sgmltag>
</programlisting>

          <para>In this case, the vehicle will drive only on lanes/roads where
          all vehicle classes are allowed or where public busses are not
          disallowed or where public busses are explicitely allowed.</para>
        </sect3>

        <sect3 id="user_chp06-management-vclasses-mixing">
          <title>Mixing Closings/Openings of Roads for Vehicle Classes</title>

          <para>The importer for XML-edge description uses two lanes
          attributes, <sgmltag>allow</sgmltag> and <sgmltag>disallow</sgmltag>
          (see <ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp04.shtml#user_chp04-xml_descriptions-edges-vclasses">Defining
          allowed Vehicle Types</ulink>). Within the resulting network the
          values supplied this way are stored by listing all allowed and
          disallowed vehicle classes, divided by a ';'. Here, disallowed
          vehicle classes are marked by a leading '-'. This means that if a
          lane shall not allow pedestrians, it should have the attribute
          <sgmltag>vclasses="-pedestrian"</sgmltag>.</para>

          <para>A vehicle class may use a lane if</para>

          <itemizedlist>
            <listitem>
              <para>there is no vehicle class allowed/disallowed on this
              lane</para>
            </listitem>

            <listitem>
              <para>the vehicle class matches a class allowed on this lane if
              any allowed class is defined for this lane</para>
            </listitem>

            <listitem>
              <para>the vehicle class does not match any of the defined
              disallowed vehicle classes on for this lane</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="user_chp06-file_load_order">
      <title>Using the Files in a correct Way</title>

      <para>You may have noticed that beside the networks, SUMO additionally
      reads route files and "additional" files. Most of the structures
      (detectors, actors, route definitions, vehicle type definitions, tls
      definitions, etc.) may be placed in both route files and additional
      files. On the low application level the difference between the two file
      types is the order of loading them.</para>

      <para>Normally, when the option <option>route-steps</option> is left to
      be not equal to zero, additional files are parsed first, in the order of
      their definition. This means if you set the option "<option>-a
      file1.add.xml;file2.add.xml</option>", at first
      "<filename>file1.add.xml</filename>" will be loaded, then
      "<filename>file2.ad..xml</filename>". Each file is read completely
      before the next file is parsed. This means that if you have some global
      routes and want to reference them by a changing set of vehicles, you
      should place these routes in a file which is loaded at first. After all
      additional files have been read, the route files are opened. Still, they
      are not read immediately but as soon as the simulation starts. Each of
      these files is read until a vehicle emission occures which is beyond the
      current time step + time defined in <option>route-steps</option>. Here,
      all route files are parsed in the order they occured within the call,
      too.</para>

      <para>The things change a little bit if the option
      <option>route-steps</option> is set to zero. In this case, the route
      files are parsed as first, BEFORE the simulation starts. They also will
      be parsed completely before the additional files are parsed. If you need
      your additional files to be parsed at first, either use a
      <option>route-steps</option> value not equal to zero or place your
      additional files at the begin of the route-files list.</para>
    </sect1>

    <sect1 id="user_chp06-other">
      <title>Other Topics</title>

      <para>This chapter includes some problems not described, yet.</para>

      <sect2 id="user_chp06-other-accidents">
        <title>Simulation of Accidents</title>

        <para>SUMO uses a collision-free traffic flow model. So if everything
        works as it should, no accidents should occure. If you want to model
        an accident you have the following possibilities:</para>

        <itemizedlist>
          <listitem>
            <para>Use variable speed signs to set a lane's maximum velocity
            down (see chapter "<ulink
            url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml#user_chp06-management-vss">Variable
            Speed Signs</ulink>")</para>
          </listitem>

          <listitem>
            <para>Let a vehicle stop at a predefined position (see chapter
            "<ulink
            url="http://sumo.sourceforge.net/docs/gen/user_chp06.shtml#user_chp06-management-public">Public
            Transport</ulink>")</para>
          </listitem>
        </itemizedlist>

        <para>Still, in some cases, for example if you insert a tls with no
        yellow phase, collisions may occure within the simulation. Earlier
        versions of <application>SUMO</application> reported an error in such
        cases and quit. We decided to change this behaviour. By now, the
        simulation reports a warning in such cases and tries to solve the
        problem internally, either by changing the position of the last car or
        - if this does not work because the lane the accident happened at is
        full - by removing one of the cars and trying to reinsert it as soon
        as possible. You still may force the simulation to quit as soon an
        "accident" happens using the option
        <option>--quit-on-accident</option>.</para>
      </sect2>
    </sect1>

    <sect1 id="user_chp06-missing">
      <title>Missing</title>

      <para>--route-steps</para>

      <para>--check-accidents</para>

      <para>--too-slow-rtf</para>

      <para>--no-duration-log</para>

      <para>loading &amp; saving of states</para>

      <para>--time-to-teleport</para>
    </sect1>
  </chapter>

  <chapter id="user_chp07">
    <title>Simulation-GUI</title>

    <para>The simulation-GUI (graphical user interface) is basically a wrapper
    around the command line simulation. The normal procedure is to start the
    gui-version like any other Window-based application (double-click on it)
    and to load a simulation's description specified using a "normal"
    configuration-file as used by the simulation's command line version. After
    loading it - what may dure a longer time if the network is large or the
    simulation is forced to load many routes at once - the network shall
    appear. Your application should then look like displayed below (with your
    own network, of course).</para>

    <figure id="img_gui">
      <title>The GUI-Window with a loaded simulation (violet: names of the
      controls as used below)</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="./gfx/user/simcontrols.gif"
                     format="GIF" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>You can now start your simulation using the "play"-button and/or
    manoeuvre within the network pressing one of the mouse buttons and moving
    the mouse. When moving the mouse within the window with the left button
    pressed, you'll move the network to the direction you move the mouse. When
    the mouse is moved with the right button pressed, you change the scale the
    network is displayed in, zooming into and out of the network.</para>

    <para>We will now discuss the different possibilities to use the graphical
    user interface more deeply.</para>

    <sect1 id="user_chp07-main_window">
      <title>Main Window Interface</title>

      <sect2 id="user_chp07-main_window-menu_bar">
        <title>Menu Bar</title>

        <sect3 id="user_chp07-main_window-menu_bar-file_menu">
          <title>File-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Open Simulation...</para>

                <para>Opens a file dialog that lets you choose a
                SUMO-configuration file that describes a complete simulation.
                The simulation described within this file will be loaded.
                Remark that you have to describe the simulation in full - no
                further extension is possible.</para>

                <para>You can of course load a simulation if another one is
                already loaded. In this case, the previous simulation will be
                closed.</para>
              </listitem>

              <listitem>
                <para>Reload Simulation <inlinegraphic
                fileref="./gfx/user/reload.gif" format="GIF" /></para>

                <para>Reloads the previously opened simulation.</para>
              </listitem>

              <listitem>
                <para>Close</para>

                <para>Closes the loaded simulation.</para>
              </listitem>

              <listitem>
                <para>[RECENT FILES]</para>

                <para>if you have opened at least one file before, it will be
                displayed within this list. The list may contain up to ten
                files read previously.</para>
              </listitem>

              <listitem>
                <para>Clear Recent Files</para>

                <para>Clears the list of recent files.</para>
              </listitem>

              <listitem>
                <para>Quit</para>

                <para>Quits the application.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3 id="user_chp07-main_window-menu_bar-edit_menu">
          <title>Edit-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Edit Chosen...</para>

                <para>Opens a dialog that lets you load/save and edit the list
                of chosen items.</para>
              </listitem>

              <listitem>
                <para>Edit Additional Weights...</para>

                <para>This menu enables you to edit additional weights for
                edges. These additional weight descriptions may be saved into
                a file and read by the <application>DUAROUTER</application>
                and his variants.</para>
              </listitem>

              <listitem>
                <para>Edit Breakpoints...</para>

                <para>This menu enables you to edit, load and save
                breakpoints. By now, the simulation will stop at one of the
                given brekpoints (simulation time steps) and can be then
                continued by pressing the "play"-button (<inlinegraphic
                fileref="./gfx/user/play.gif" format="GIF" />).</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3 id="user_chp07-main_window-menu_bar-settings_menu">
          <title>Settings-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Application Settings...</para>

                <para>By now, one can only set whether the application shall
                be closed automatically when the loaded simulation
                ends.</para>
              </listitem>

              <listitem>
                <para>Simulation Settings...</para>

                <para>Displays the settings as read from the configuration
                file. This item is only accessible if a simulation has been
                loaded.</para>

                <caution>
                  <para>Under current development. (Better do not use
                  it)</para>
                </caution>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3 id="user_chp07-main_window-menu_bar-windows_menu">
          <title>Windows-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Show Status Line</para>

                <para>By pressing this menu item, you can switch the status
                line off and on.</para>
              </listitem>

              <listitem>
                <para>Show Message Window</para>

                <para>By pressing this menu item, you can switch the message
                window off and on.</para>
              </listitem>

              <listitem>
                <para>Show Tool Bar</para>

                <para>By pressing this menu item, you can switch the toolbar
                off and on.</para>
              </listitem>

              <listitem>
                <para>Tile Horizontally</para>

                <para>Reorders the position of windows.</para>
              </listitem>

              <listitem>
                <para>Tile Vertically</para>

                <para>Reorders the position of windows.</para>
              </listitem>

              <listitem>
                <para>Cascade</para>

                <para>Reorders the position of windows.</para>
              </listitem>

              <listitem>
                <para>Close</para>

                <para>Closes the uppermost window.</para>
              </listitem>

              <listitem>
                <para>Clear Message Window</para>

                <para>Deletes all contents from the message window.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3 id="user_chp07-main_window-menu_bar-help_menu">
          <title>Help-Menu</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>About</para>

                <para>Shows a small window with some information about
                SUMO.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>
      </sect2>

      <sect2 id="user_chp07-main_window-tool_bar">
        <title>Tool Bar</title>

        <sect3 id="user_chp07-main_window-tool_bar-file_ops">
          <title>File Operations</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Open Button</para>

                <para>Opens a file dialog that lets you choose a
                SUMO-configuration file that describes a complete simulation.
                The simulation described within this file will be loaded.
                Remark that you have to describe the simulation in full - no
                further extension is possible.</para>

                <para>You can of course load a simulation if another one is
                already loaded. In this case, the previous simulation will be
                closed.</para>
              </listitem>

              <listitem>
                <para>Reload Button <inlinegraphic
                fileref="./gfx/user/reload.gif" format="GIF" /></para>

                <para>Reloads the previously opened simulation.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3 id="user_chp07-main_window-tool_bar-simulation_ops">
          <title>Simulation Operations</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Play Button <inlinegraphic fileref="./gfx/user/play.gif"
                format="GIF" /></para>

                <para>Starts the simulation. If a loaded simulation was not
                started before, it will begin with the step described by the
                b(egin)-parameter within the loaded configuration file. If the
                simulation was started and stopped, it will continue.</para>

                <caution>
                  <para>It is not possible to restart a simulation, you have
                  to reload it.</para>
                </caution>
              </listitem>

              <listitem>
                <para>Stop Button <inlinegraphic fileref="./gfx/user/stop.gif"
                format="GIF" /></para>

                <para>Stops a running application. A stopped application can
                be continued using the play-button (see above).</para>
              </listitem>

              <listitem>
                <para>Single Step Button <inlinegraphic
                fileref="./gfx/user/step.gif" format="GIF" /></para>

                <para>Performs a single simulation step.</para>
              </listitem>

              <listitem>
                <para>Current Step Field</para>

                <para>After the loaded simulation has been started, the
                information about the current time step is displayed
                herein.</para>
              </listitem>

              <listitem>
                <para>Simulation Speed Control</para>

                <para>The value you can change using this control is the time
                the application waits between two simulation steps. The higher
                the value, the slower the simulation will run.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3 id="user_chp07-main_window-tool_bar-window_ops">
          <title>Window Operations</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>New Microscopic View - Button <inlinegraphic
                fileref="./gfx/user/new_window.gif" format="GIF" /></para>

                <para>Opens a new window which displays the streets and
                vehicles moving on them.</para>
              </listitem>

              <listitem>
                <para>New Lane-Aggregated View - Button <inlinegraphic
                fileref="./gfx/user/new_window.gif" format="GIF" /></para>

                <para>Opens a new window which displays the streets and
                vehicles moving on them.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="user_chp07-simulation_window">
      <title>Simulation Window Interfaces</title>

      <para>SUMO-GUI provides different views on the simulation. The
      microscopic view shows the vehicles running just the way as the
      simulation performs his work. Aggregated views show the situation on the
      streets by coloring lanes by an aggregated value. Vehicles are not shown
      within the aggregated view.</para>

      <sect2 id="user_chp07-simulation_window-common">
        <title>Common Controls</title>

        <sect3 id="user_chp07-simulation_window-common-tracking">
          <title>Tracking Settings</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Locate Junction - Button <inlinegraphic
                fileref="./gfx/user/locate_junction.gif"
                format="GIF" /></para>

                <para>Opens a window that allows to choose a junction name
                from the set of junctions the network consists of. Pressing ok
                with a chosen junction zooms the view to this junction.</para>
              </listitem>

              <listitem>
                <para>Locate Edge - Button <inlinegraphic
                fileref="./gfx/user/locate_edge.gif" format="GIF" /></para>

                <para>Opens a window that allows to choose an edge name from
                the set of junctions the network consists of. Pressing ok with
                a chosen edge zooms the view to this edge.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3 id="user_chp07-simulation_window-common-view">
          <title>View Settings</title>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Recenter View - Button <inlinegraphic
                fileref="./gfx/user/recenter_view.gif" format="GIF" /></para>

                <para>You can use this button to reset the view to show the
                whole network. After pressing this button, the view will be
                the same as after loading the simulation: The zoom factor will
                be reset to a value that lets the window display the whole
                simulation area and the middle of the loaded network will be
                place into the middle of the view.</para>
              </listitem>
            </itemizedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="user_chp07-interaction">
      <title>Interacting with Objects</title>

      <sect2 id="user_chp07-interaction-tooltips">
        <title>Display an Object's Name</title>

        <para>Each view has the possibility to display tool tips. If enabled
        using the "<guibutton>Show Tool Tips</guibutton>"-Button
        (<inlinegraphic fileref="./gfx/user/show_tooltips.gif"
        format="GIF" />) the name of an object will pop up in a yellow windows
        if the cursor is over the object. A second click on the
        "<guibutton>Show Tool Tips</guibutton>"-Button disables this
        feature.</para>

        <caution>
          <para>This feature does slow down the visualisation. Use should use
          this carefully and disable if not needed.</para>
        </caution>
      </sect2>

      <sect2 id="user_chp07-interaction-popups">
        <title>Object Popup Menus</title>

        <para>If the cursor is over an object you can press down the right
        mouse button and after ahlf a second a popup menu will be shown that
        allows you some further interaction with the object. Normally, the
        following functions are available:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><guimenuitem>Center</guimenuitem> <inlinegraphic
              fileref="./gfx/user/recenter_view.gif" format="GIF" /></para>

              <para>Changes the view in a manner that the current object lies
              within the the view's center.</para>
            </listitem>
          </itemizedlist></para>

        <para>Further, some objects allow an interaction, that means to change
        some of the object's parameter. You can access this using the
        command:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para><guimenuitem>Manipulate</guimenuitem> <inlinegraphic
              fileref="./gfx/user/manip.gif" format="GIF" /></para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2 id="user_chp07-interaction-selection">
        <title>Object Selection</title>

        <para>From version 0.8. you are able to add every object that has a
        name (as shown if turning Tool Tips on) into a list of selected
        objects. You can select an object by holding the
        <keysym>Alt</keysym>-key and pressing the left mouse button when the
        mouse is over the object. Doing the same a second time will deselect
        the object again. You may wonder whether an object is selected or not.
        Use the lane colouring "<guilabel>by selection</guilabel>" from
        "<guimenuitem>Change Lane Colouring Scheme</guimenuitem>". When this
        colouring scheme is used, selected lanes are shown blueish, the other
        black.</para>

        <para>The menu entry <menuchoice>
            <guimenu>Edit-&gt;Edit Chosen...</guimenu>
          </menuchoice> allows you to edit the list of selected objects by
        deselected ones you don't need. It also allows you to save the list of
        selected objects. The resulting file contains the names of the
        selected objects predeccesed by the object's type, one per
        line.</para>

        <caution>
          <para><guibutton>Load</guibutton> is not implemented, yet.</para>
        </caution>

        <caution>
          <para>The handling of selected items is not yet designed cmopletely.
          Parts of the gui's behavior may change in the next time.</para>
        </caution>
      </sect2>

      <sect2 id="user_chp07-interaction-parameter">
        <title>Parameter Windows</title>

        <para>If you choose the option "<guimenuitem>Show
        Parameter</guimenuitem>" from an object's popup menu, a window like
        the one displayed below will appear:</para>

        <figure id="img_parameter_window">
          <title>A sample Parameter Window (for an induction loop in this
          case)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/parameter_window.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>This window conatins some of each object's parameter, including
        the parameter's name, its current value and the information is static
        (marked with a <inlinegraphic fileref="./gfx/user/no.gif"
        format="GIF" />) or dynamic (marked with a <inlinegraphic
        fileref="./gfx/user/ok.gif" format="GIF" />) within a simulation
        run.</para>

        <para>Pressing the right mouse button when being over a line marked as
        dynamic will show a small popup window with only a single command:
        "<guimenuitem>Open in new Tracker</guimenuitem>". Choosing this option
        will allow you to open another window where this parameter's values
        will be shown as a time line over the simulation run.</para>

        <figure id="img_tracker_window">
          <title>A sample Parameter Window (for the number of vehicles within
          a simulation in this case)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="./gfx/user/tracker_example.gif" format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>You can change the aggregation time of the tracked values within
        this window using the combobox in this window's menu.</para>

        <figure id="img_tracker_aggregation">
          <title>A sample usage of the aggregation option (for an induction
          loop in this case, for aggregation times of 1s, 1min, 5min (from
          left to right))</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/tracker_agg.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2 id="user_chp07-interaction-tl_tracker">
        <title>TL-Tracker Windows</title>

        <para>If you position your mouse over one of the red, green or yellow
        traffic light-bars that show the state of the traffic light and press
        the right mouse button for at least one second, the appearing pop-up
        includes a menu entry "<guimenuitem>Show Phases</guimenuitem>".
        Choosing this menu item will show up a diagram that shows the states
        of the tl chronologically. Each pixel in x-direction shows the state
        of the tls of one second. The display contains the tl-states from the
        time the tracker has been opened, no scrolling aorund is
        supported.</para>

        <figure id="img_tls_tracker">
          <title>A sample usage of the tls-tracker</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="./gfx/user/tlstracker.gif"
                         format="GIF" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>
    </sect1>

    <sect1 id="user_chp07-geometry_files">
      <title>Additional Geometry Files</title>

      <para>Since version 0.9.4 it is possible to load additional geometry
      files into GUISIM which may contain definition of polygons or points of
      interest. These shapes are currently meant to improve a simulation's
      appearence and to allow an easier debugging. No special interaction with
      them is implemented, yet.</para>

      <para>Both polygons and points-of-interest may be located at a "layer".
      Shapes with lowest layer values are drawn first so that they can be
      below those with a higher layer number. The network itself is drawn as
      layer 0. An additional file may contain definitions for both
      points-of-interest and polygons. Any name may be used for the embedding
      element.</para>

      <para>In the following subchapters, it is described how polygons and
      points-of-interest may be defined.</para>

      <sect2 id="user_chp07-geometry_files-polygons">
        <title>Polygon Definitions</title>

        <para>A polygon is defined as following:</para>

        <programlisting><sgmltag>&lt;poly id="&lt;POLYGON_ID&gt;" type="&lt;TYPENAME&gt;" color="&lt;RED&gt;,&lt;GREEN&gt;,&lt;BLUE&gt;" \
   fill="&lt;FILL_OPTION&gt;" layer="&lt;LAYER_NO&gt;"&gt;&lt;POINT&gt; [&lt;POINT&gt;]+&lt;/poly&gt;</sgmltag></programlisting>

        <para>These attributes have the following meanings:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>id</sgmltag>: The id (a unique name) of the
            polygon; mandatory string</para>
          </listitem>

          <listitem>
            <para><sgmltag>type</sgmltag>: A typename for the polygon. This
            value has no meaning; optional string, default: ""</para>
          </listitem>

          <listitem>
            <para><sgmltag>color</sgmltag>: The color with which the polygon
            shall be displayed; &lt;RED&gt;, &lt;GREEN&gt;, and &lt;BLUE&gt;
            must be floating point numbers between 0 and 1. They are devided
            using a ',' (no space); mandatory</para>
          </listitem>

          <listitem>
            <para><sgmltag>fill</sgmltag>: An information whether the polygon
            shall be filled; optional bool, default: false</para>
          </listitem>

          <listitem>
            <para><sgmltag>layer</sgmltag>: The number of the layer in which
            the polygon lies; optional int, default: -1</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp07-geometry_files-pois">
        <title>Point-of-interest Definitions</title>

        <para>A point-of-interest is defined as following:</para>

        <programlisting><sgmltag>&lt;poi id="&lt;POLYGON_ID&gt;" type="&lt;TYPENAME&gt;" color="&lt;RED&gt;,&lt;GREEN&gt;,&lt;BLUE&gt;" \
   layer="&lt;LAYER_NO&gt;" [(x="&lt;X_POS&gt;" y="&lt;Y_POS&gt;") | (lane="&lt;LANE_ID&gt;" pos="&lt;LANE_POS&gt;")]/&gt;</sgmltag></programlisting>

        <para>It means that the position a point-of-interest is located at may
        be given either using explicite x/y-coordinates or a lane name and a
        position on this lane. So, the attributes have the following
        meanings:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>id</sgmltag>: The id (a unique name) of the poi;
            mandatory string</para>
          </listitem>

          <listitem>
            <para><sgmltag>type</sgmltag>: A typename for the poi. This value
            has no meaning; optional string, default: ""</para>
          </listitem>

          <listitem>
            <para><sgmltag>color</sgmltag>: The color with which the poi shall
            be displayed; &lt;RED&gt;, &lt;GREEN&gt;, and &lt;BLUE&gt; must be
            floating point numbers between 0 and 1. They are devided using a
            ',' (no space); optional, default "1,0,0"</para>
          </listitem>

          <listitem>
            <para><sgmltag>layer</sgmltag>: The number of the layer in which
            the polygon lies; optional int, default: 1</para>
          </listitem>

          <listitem>
            <para><sgmltag>x</sgmltag>: The position of the poi along the
            x-axis; float</para>
          </listitem>

          <listitem>
            <para><sgmltag>y</sgmltag>: The position of the poi along the
            y-axis; float</para>
          </listitem>

          <listitem>
            <para><sgmltag>lane</sgmltag>: The name of the lane the poi is
            located at; string, the lane must be a part of the loaded
            network</para>
          </listitem>

          <listitem>
            <para><sgmltag>pos</sgmltag>: The position on the named lane at
            which the poi is located at; float</para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="user_chp08">
    <title>Tips, Tricks and Tools</title>

    <para>We want to supply some additional information that did not fit into
    the descriptions within the previous chapters. The next chapters are
    possibly the most interesting ones of this document as they describe some
    possibilities to ease the work.</para>

    <sect1 id="user_chp08-configs">
      <title>Using Configuration Files</title>

      <para>Most simulations have to be executed more than only one time.
      Furthermore, some experiments require the execution of similar, slightly
      different settings, for example the same network with a different route
      set. To avoid retyping of all parameter at the input line, all of the
      main applications can be fed with a configuration file. This
      configuration file contains the values the user normally would give to
      the program at the command line. For example, instead of typing</para>

      <screen>duarouter --cell=<replaceable>myCellFile</replaceable> --net=<replaceable>mySUMONet.net.xml</replaceable> --output-file=<replaceable>MySUMORoutes.rou.xml</replaceable> \
   -b <replaceable>0</replaceable> -e <replaceable>3600</replaceable></screen>

      <para>you can start the router with a configuration file only:</para>

      <screen>duarouter -c=<replaceable>myConfig.rou.cfg</replaceable></screen>

      <para>The <option>-c <replaceable>&lt;FILE&gt;</replaceable></option> -
      option may be passed to all of the package's main applications.</para>

      <para>Of course, you have to build the configuration file
      "<filename>myConfig.rou.cfg</filename>" first. You can find templates
      for configuration files within the data/cfg_templates - folder and all
      examples coming with the release contain configuration files,
      too.</para>

      <para>A configuration file is a simple XML-file in which each of the
      command line parameters is represented as a XML-element with the
      parameter's value being given as text between the begin and end tag of
      this parameter. So if you want to set a parameter "foo" to the value
      "bar" within your configuration file, write
      <sgmltag>&lt;foo&gt;bar&lt;foo/&gt;</sgmltag> into the configuration
      file. Do not forget that each XML-file has to have a root element, so
      that the whole configuration file would look like this:</para>

      <programlisting>&lt;configuration&gt;
   <sgmltag>&lt;foo&gt;</sgmltag>bar<sgmltag>&lt;foo/&gt;</sgmltag>
<sgmltag>&lt;/configuration&gt;</sgmltag></programlisting>

      <para>Between the starting at the ending tag, any type of values may be
      set, use a 'x' to mark boolean values as set. If a parameter allows a
      set of values (normally separated by a ';'), you have to use a single
      element and embed these value into it as you would on command line. A
      different approach will maybe be invented in future. You can find the
      templates for each of the package's application's configuration files
      within the folder
      "<filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/cfg_templates</filename>".</para>
    </sect1>

    <sect1 id="user_chp08-meta">
      <title>Additional Meta-Information</title>

      <para>All applications of the SUMO-package print a help-screen is
      printed including all options the application knows when the application
      is started with the <option>--help</option> (<option>-?</option> for
      short) option. You can also list all current option settings using
      <option>--print-options</option> (or <option>-p</option> for
      short).</para>

      <para>Recent changes:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>This chapter has been moved to this place while working on
          version 0.9.5</para>
        </listitem>

        <listitem>
          <para>The option <option>--version</option> that printed the currnt
          build number was removed in version 0.9.5. As we assume our users to
          build the software by themselves, a build number does not really
          make sense.</para>
        </listitem>

        <listitem>
          <para>The description of <option>--print-options</option> was added
          in version 0.9.5.</para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="user_chp08-tools">
      <title>Additional Tools</title>

      <para>You can some find helpful tools within the
      <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools</filename>
      - folder. We will now introduce some of them. The following chapters are
      devided by the topic the tools cover.</para>

      <sect2 id="user_chp08-tools-polyconvert" revision="0.9.6">
        <title>Polygon Conversion</title>

        <para>Since version 0.9.5 a further application was added to the
        suite: <application>POLYCONVERT</application>, a tool which allows you
        to convert polygons from Elmar's format into a description that may be
        used by SUMO. As the offset that was applied to the network during the
        conversion using <application>NETCONVERT</application> is needed, one
        has to supply the network name using <option>--net-file
        <replaceable>&lt;SUMO_NET&gt;</replaceable></option>
        (<option>--net</option> or <option>-n</option> for short).
        Additionally the name of the file that contains the polygons to import
        must be given using <option>--elmar
        <replaceable>&lt;ELMAR_POLYGON_FILE&gt;</replaceable></option>. The
        conversion from geocoordinates to cartesian is recommended, initiated
        using <option>--use-projection</option> and defined using
        <option>--proj
        <replaceable>&lt;PROJ_DEFINITION&gt;</replaceable></option> (see also
        "<link linkend="user_chp04-further_options-geocoordinates">Converting
        from Geocoordinates</link>").</para>

        <para>Defaults for the polygon's color and layer as well as a name
        prefix and the name of the type to assign can be given using the
        options <option>--color
        <replaceable>&lt;COLORDEF&gt;</replaceable></option>, <option>--layer
        <replaceable>&lt;LAYER_NO&gt;</replaceable></option>, <option>--prefix
        <replaceable>&lt;PREFIX&gt;</replaceable></option>, and <option>--type
        <replaceable>&lt;TYPENAME&gt;</replaceable></option>, respectively. As
        some inputs may contain different polygon types, you can also use a
        file which contains a type map which defines which values shall be set
        in dependance to the type. A single entry for this typemap should look
        like this: <sgmltag>&lt;polytype
        id="<replaceable>&lt;PREVIOUS_NAME&gt;</replaceable>"
        name="<replaceable>&lt;NEW_NAME&gt;</replaceable>"
        color="<replaceable>&lt;COLORDEF&gt;</replaceable>"
        fill="<replaceable>&lt;BOOL&gt;</replaceable>"
        layer="<replaceable>&lt;LAYER_NO&gt;</replaceable>"
        discard="<replaceable>&lt;BOOL&gt;</replaceable>"/&gt;</sgmltag>. The
        values are:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><sgmltag>id</sgmltag>: The name of the type as read from the
            input file</para>
          </listitem>

          <listitem>
            <para><sgmltag>name</sgmltag>: The name to use for the type in the
            output (type-name replacement)</para>
          </listitem>

          <listitem>
            <para>color: Definition of the color to assign</para>
          </listitem>

          <listitem>
            <para>fill: Information whether a filling of the polygon must be
            prohibited</para>
          </listitem>

          <listitem>
            <para>layer: Layer to use for this type of polygons</para>
          </listitem>

          <listitem>
            <para>discard: Information whether polygons of this type shall not
            be written to output</para>
          </listitem>
        </itemizedlist>

        <para>An example type-map for Elmar's polygons can be found in
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/</filename>add/elmar_type_map.xml.
        It is given to POLYCONVERT using the <option>--typemap
        <replaceable>&lt;TYPEMAP_FILE&gt;</replaceable></option>
        option.</para>

        <para>Since version 0.9.6, <application>POLYCONVERT</application> can
        also import single points of interest from Elmar's pointcollection
        files. To import such a file use the option <option>--elmar-points
        <replaceable>&lt;FILENAME&gt;</replaceable></option>, where
        <option><replaceable>&lt;FILENAME&gt;</replaceable></option> is the
        name of the file to import. You can use a type map in this case, too.
        In this case, the attribute "filled" will be ignored, all other
        attributes are processed as in the case of importing polygons.</para>

        <para>Also since this version, <application>POLYCONVERT</application>
        can import polygons and pois from Visum-networks. The options herefore
        are <option>--visum
        <replaceable>&lt;VISUM_NET&gt;</replaceable></option> and
        <option>--visum-points
        <replaceable>&lt;VISUM_NET&gt;</replaceable></option>. In the first
        case, polygons from "BEZIRK" and "GEBIET" are imported, in the second
        "POI". "POIKATEGORIE" is parsed in the second steps and the values
        stored herein are used as type names; for "BEZIRK", the type name
        "district" is used, "area" for "GEBIET". These type names may be
        references in the type map file.</para>

        <para>In some cases, it is wished not to import all polygons/pois. You
        can constrain which polygons/pois shall be written using the by
        assigning the attribute "<sgmltag>discard</sgmltag>" to certain types
        of polygons(pois within the type-map. You can also prune those
        polygons/pois that are not lying within a certain bounding box. This
        is done by calling <application>POLYCONVERT</application> with the
        option <option>--prune.boundary
        <replaceable>&lt;BOUNDARY&gt;</replaceable></option>.
        <option><replaceable>&lt;BOUNDARY&gt;</replaceable></option> is in
        this case the bounding box in which a polygon/poi must be located in
        order to be written into the output. It is a list of four floats,
        separated using ',' that describe the minimum x-value, the minimum
        y-value, the maximum x-value, and the maximum y-value of the bounding
        box. If one wishes to use the network's dimensions as the bounding
        box, he/she can do this using the option
        <option>--prune.on-net</option>. Additionally, one can supply offsets
        to the network's dimensions using <option>--prune.on-net.offsets
        <replaceable>&lt;BOUNDARY&gt;</replaceable></option>.</para>

        <para>All options:</para>

        <variablelist>
          <varlistentry>
            <term><option>( --net-file | --net | -n )
            <replaceable>&lt;SUMO_NET&gt;</replaceable></option></term>

            <listitem>
              <para>The SUMO-net to use as reference. <remark>Mandatory,
              type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--elmar
            <replaceable>&lt;ELMAR_POLYGON_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Reads polygons from the given Elmar polygon file.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--elmar-points
            <replaceable>&lt;ELMAR_POI_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Reads pois from the given Elmar pointcollection file.
              <remark>Optional, type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--visum
            <replaceable>&lt;VISUM_NET&gt;</replaceable></option></term>

            <listitem>
              <para>Reads polygons from the given VISUM net. <remark>Optional,
              type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--visum-points
            <replaceable>&lt;VISUM_NET&gt;</replaceable></option></term>

            <listitem>
              <para>Reads pois from the given VISUM net. <remark>Optional,
              type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--typemap
            <replaceable>&lt;TYPEMAP_FILE&gt;</replaceable></option></term>

            <listitem>
              <para>Reads type maps from the given file. <remark>Optional,
              type:filename, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--use-projection</option></term>

            <listitem>
              <para>Enables conversion from geocoordinates to cartesian.
              <remark>Optional, type:bool, default: false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--proj
            <replaceable>&lt;PROJ_DEFINITION&gt;</replaceable></option></term>

            <listitem>
              <para>Defines the projection to use. <remark>Optional,
              type:string, default: "+proj=utm +ellps=bessel
              +units=m"</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--color
            <replaceable>&lt;COLORDEF&gt;</replaceable></option></term>

            <listitem>
              <para>Defines the color to use as default. <remark>Optional
              (pregiven), type:color, default: "0.2,0.5,1." (light
              blue)</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--layer
            <replaceable>&lt;LAYER_NO&gt;</replaceable></option></term>

            <listitem>
              <para>Defines into which layer the polygons shall be put by
              default. <remark>Optional (pregiven), type:int, default: -1 (one
              layer below the road network)</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--prefix
            <replaceable>&lt;PREFIX&gt;</replaceable></option></term>

            <listitem>
              <para>Defines the type-dependant prefix to apply to polygons.
              <remark>Optional (pregiven), type:string, default:
              &lt;empty&gt;</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--type
            <replaceable>&lt;TYPENAME&gt;</replaceable></option></term>

            <listitem>
              <para>Defines the name of the type to set for the polygons.
              <remark>Optional (pregiven), type:string, default:
              "water"</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--prune.boundary
            <replaceable>&lt;BOUNDARY&gt;</replaceable></option></term>

            <listitem>
              <para>Defines the clipping bounding box in which a polygon/pois
              must lie in order to be written to the output. <remark>Optional,
              type:boundary definition, default: none</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--prune.on-net</option></term>

            <listitem>
              <para>Let POLYCONVERT use the network dimensions as the clipping
              bounding box. <remark>Optional (pregiven), type:bool, default:
              false</remark></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><option>--prune.on-net.offsets
            <replaceable>&lt;BOUNDARY&gt;</replaceable></option></term>

            <listitem>
              <para>Defines additional offsets that are added to the network
              dimensions' components. <remark>Optional, type:boundary
              definition, default: "0,0,0,0"</remark></para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Recent changes:</para>

        <itemizedlist>
          <listitem>
            <para><application>POLYCONVERT</application> is available since
            version 0.9.5</para>
          </listitem>

          <listitem>
            <para>Since version 0.9.6, <application>POLYCONVERT</application>
            is able to import Elmar's pointcollection files</para>
          </listitem>

          <listitem>
            <para>The possibility to constrain the imported points using
            bounding boxes was introduced in version 0.9.6</para>
          </listitem>

          <listitem>
            <para>Since version 0.9.6, <application>POLYCONVERT</application>
            is able to import Visum polygons and points</para>
          </listitem>

          <listitem>
            <para>The default for the proj-option changed in 0.9.7 from
            "+proj=utm +zone=33 +ellps=bessel +units=m" to "+proj=utm
            +ellps=bessel +units=m"</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="user_chp08-tools-dua">
        <title>Helpers for DUA-Computation</title>

        <sect3 id="user_chp08-tools-dua-dua_iterate">
          <title>dua-iterate.pl</title>

          <para>This script performs a dua computation by runing the
          <application>DUAROUTER</application> and
          <application>SUMO</application> a given number of times and using
          the previous outputs. A detailed description may be found in the
          subchapter "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-dua-iterate">Automatic
          Iteration using 'dua-iterate.pl'</ulink>".</para>

          <para><emphasis>Usage</emphasis>: <command>dua-iterate.pl
          <replaceable>&lt;PATH_TO_SUMO_BINARIES&gt;
          </replaceable><optional><replaceable>[&lt;BEGIN_ITERATION_STEP&gt;]
          </replaceable></optional><replaceable>&lt;END_ITERATION_STEP&gt;
          </replaceable></command></para>

          <para><emphasis>Output</emphasis>: see "<ulink
          url="http://sumo.sourceforge.net/docs/gen/user_chp05.shtml#user_chp05-dua-iterate">Automatic
          Iteration using 'dua-iterate.pl'</ulink>"</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/dua_tools</filename></para>
        </sect3>
      </sect2>

      <sect2 id="user_chp08-tools-routes">
        <title>Handling Routes and Route Alternatives</title>

        <sect3 id="user_chp08-tools-routes-oldStyle2newStyle">
          <title>oldStyle2newStyle_Routes.pl</title>

          <para>This tool converts route files as generated by
          <application>DUAROUTER</application>/<application>JTRROUTER</application>
          from their old-style representation where the route and the
          according vehicle where in separate tags into the new style where
          the route-description is.</para>

          <para><emphasis>Usage</emphasis>:
          <command>oldStyle2newStyle_Routes.pl
          <replaceable>&lt;SUMO_ROUTES_FILE&gt;</replaceable></command></para>

          <para><emphasis>Output</emphasis>: The tool prints the modified
          route file in the new-style on the command line</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/route_tools</filename></para>
        </sect3>

        <sect3 id="user_chp08-tools-routes-randomizeDepart">
          <title>randomizeDepart.pl</title>

          <para>This tool randomizes the departure time of vehicles within a
          given route/route alternatives file.</para>

          <para><emphasis>Usage</emphasis>: <command>randomizeDepart.pl
          <replaceable>&lt;SUMO_ROUTES_FILE&gt;
          &lt;MAX_DEPARTURE_TIME&gt;</replaceable></command></para>

          <para><emphasis>Output</emphasis>: The tool prints the modified
          route / route alternatives file in the new-style on the command
          line</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/route_tools</filename></para>

          <caution>
            <para>This tool is meant to be used for tests only - routes in
            randomized order may yield in an unexpected behaviour!</para>
          </caution>
        </sect3>

        <sect3 id="user_chp08-tools-routes-removeRouteId">
          <title>removeRouteId.pl</title>

          <para>Removes the ids of routes from their description within the
          given route file.</para>

          <para><emphasis>Usage</emphasis>: <command>removeRouteId.pl
          <replaceable>&lt;SUMO_ROUTES_FILE&gt;</replaceable></command></para>

          <para><emphasis>Output</emphasis>: The tool prints the modified
          route file in the new-style on the command line</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/route_tools</filename></para>

          <caution>
            <para>This tool is meant to be used for tests only - you may get
            an unexpected behaviour if you delete route ids which are still
            needed!</para>
          </caution>
        </sect3>

        <sect3 id="user_chp08-tools-routes-removeRouteReference">
          <title>removeRouteReference.pl</title>

          <para>Removes the references to routes from the descriptions of
          vehicles within the given route file.</para>

          <para><emphasis>Usage</emphasis>: removeRouteReference.pl<command>
          <replaceable>&lt;SUMO_ROUTES_FILE&gt;</replaceable></command></para>

          <para><emphasis>Output</emphasis>: The tool prints the modified
          route file in the new-style on the command line</para>

          <para><emphasis>Location</emphasis>:
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/tools/route_tools</filename></para>

          <caution>
            <para>This tool is meant to be used for tests only - you may get
            an unexpected behaviour if you delete the information which route
            shall be used if it still needed!</para>
          </caution>
        </sect3>
      </sect2>
    </sect1>
  </chapter>

  <appendix id="user_apa">
    <title>Naming Conventions</title>

    <para>To ease the usage of the supplied files, all of which are within a
    XML-derivate, we use a naming convention for the file extensions to allow
    a distinction between the contents with a single look. The list of used
    extensions is showed below. We of course highly encourage you to use this
    pattern, but if you have a better idea, let us know.</para>

    <itemizedlist>
      <listitem>
        <para>Configuration files:<itemizedlist spacing="compact">
            <listitem>
              <para>*.sumo.cfg</para>

              <para>Configuration file for <application>SUMO</application>
              (both command line and GUI-version)</para>
            </listitem>

            <listitem>
              <para>*.netc.cfg</para>

              <para>Configuration file for
              <application>NETCONVERT</application></para>
            </listitem>

            <listitem>
              <para>*.netg.cfg</para>

              <para>Configuration file for
              <application>NETGEN</application></para>
            </listitem>

            <listitem>
              <para>*.dua.cfg (sometimes also *.rou.cfg)</para>

              <para>Configuration file for
              <application>DUAROUTER</application></para>
            </listitem>

            <listitem>
              <para>*.jtr.cfg</para>

              <para>Configuration file for
              <application>JTRROUTER</application></para>
            </listitem>

            <listitem>
              <para>*.od2t.cfg</para>

              <para>Configuration file for
              <application>OD2TRIPS</application></para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <para>Data files:<itemizedlist spacing="compact">
            <listitem>
              <para>*.net.xml</para>

              <para>SUMO - network file</para>

              <para><emphasis>Contents:</emphasis> the SUMO-network including
              definitions for all streets, lanes and junctions</para>

              <para><emphasis>Generated by:</emphasis>
              <application>NETCONVERT</application> or
              <application>NETGEN</application></para>

              <para><emphasis>Used by:</emphasis>
              <application>SUMO</application>,
              <application>GUISIM</application>,
              <application>DUAROUTER</application>,
              <application>JTRROUTER</application>,
              <application>OD2TRIPS</application></para>
            </listitem>

            <listitem>
              <para>*.rou.xml</para>

              <para>sumo - routes file</para>

              <para><emphasis>Contents:</emphasis> vehicle type definitions,
              route definitions, vehicle definitions</para>

              <para><emphasis>Generated by:</emphasis>
              <application>DUAROUTER</application>,
              <application>JTRROUTER</application> or the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>SUMO</application>,
              <application>GUISIM</application>,
              <application>DUAROUTER</application></para>
            </listitem>

            <listitem>
              <para>*.add.xml</para>

              <para>sumo - additional definitions file</para>

              <para><emphasis>Contents:</emphasis> The definitions of
              detectors to build, sources to build etc.</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>SUMO</application>,
              <application>GUISIM</application></para>
            </listitem>

            <listitem>
              <para>*.out.xml</para>

              <para>sumo - output file</para>

              <para><emphasis>Contents:</emphasis> The "raw" output with
              edges, lanes and vehicles on them</para>

              <para><emphasis>Generated by:</emphasis>
              <application>SUMO</application>,
              <application>GUISIM</application></para>

              <para><emphasis>Used by:</emphasis> the user</para>
            </listitem>

            <listitem>
              <para>*.edg.xml</para>

              <para><application>NETCONVERT</application> - edges file</para>

              <para><emphasis>Contents:</emphasis> definitions of edges to
              build the network from</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>NETCONVERT</application></para>
            </listitem>

            <listitem>
              <para>*.nod.xml</para>

              <para><application>NETCONVERT</application> - nodes file</para>

              <para><emphasis>Contents:</emphasis> definitions of nodes to
              build the network from</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>NETCONVERT</application></para>
            </listitem>

            <listitem>
              <para>*.con.xml</para>

              <para><application>NETCONVERT</application>- connection
              file</para>

              <para><emphasis>Contents:</emphasis> definitions of connections
              between edges</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>NETCONVERT</application></para>
            </listitem>

            <listitem>
              <para>*.trips.xml</para>

              <para>trip definitions for
              <application>DUAROUTER</application></para>

              <para><emphasis>Contents:</emphasis> A list of trip
              definitions</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>DUAROUTER</application></para>
            </listitem>

            <listitem>
              <para>*.flows.xml</para>

              <para>flow definitions for
              <application>JTRROUTER</application>/<application>DUAROUTER</application></para>

              <para><emphasis>Contents:</emphasis> A list of flow
              definitions</para>

              <para><emphasis>Generated by:</emphasis> the user</para>

              <para><emphasis>Used by:</emphasis>
              <application>JTRROUTER</application>/<application>DUAROUTER</application></para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <para>Other used file types<itemizedlist spacing="compact">
            <listitem>
              <para>*.inp</para>

              <para>VISSIM network files</para>
            </listitem>

            <listitem>
              <para>*.net</para>

              <para>VISUM network files</para>
            </listitem>

            <listitem>
              <para>*.shp, *.shx, *.dbf</para>

              <para>ArcView-network descriptions (shapes, shape indices,
              definitions)</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
    </itemizedlist>
  </appendix>

  <appendix id="user_apb">
    <title>Included Data</title>

    <sect1 id="user_apb-config_templates">
      <title>Configuration File Templates</title>

      <para>You can find the templates for each of the package's application's
      configuration files within the folder
      <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/cfg_templates</filename>.
      These templates may be filled with your own values. Examples of fille
      configuration files may be found within the examples-section.</para>
    </sect1>

    <sect1 id="user_apb-included_examples" revision="0.9.5">
      <title>Included Examples</title>

      <para>Several examples are included in the distribution. You may find
      them in
      <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples</filename>.
      The subfolders have the following contents:</para>

      <table id="tab_supported_examples_folders">
        <title>Supported example folders</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry>Folder</entry>

              <entry>Contains examples for (topic)</entry>

              <entry>Contains examples for (application)</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><filename>dua</filename></entry>

              <entry>the dynamic user assignment</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application>,
              <application>DUAROUTER</application></entry>
            </row>

            <row>
              <entry><filename>duarouter</filename></entry>

              <entry>building routes</entry>

              <entry><application>DUAROUTER</application></entry>
            </row>

            <row>
              <entry><filename>emissions</filename></entry>

              <entry>vehicle emissions</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>

            <row>
              <entry><filename>extended</filename></entry>

              <entry>additional simulation structures</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>

            <row>
              <entry><filename>jtrrouter</filename></entry>

              <entry>building routes</entry>

              <entry><application>JTRROUTER</application></entry>
            </row>

            <row>
              <entry><filename>netbuild</filename></entry>

              <entry>network generation</entry>

              <entry><application>NETCONVERT</application>,
              <application>NETGEN</application></entry>
            </row>

            <row>
              <entry><filename>output_tests</filename></entry>

              <entry>simulation outputs</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>

            <row>
              <entry><filename>real_world</filename></entry>

              <entry>networks from the real world</entry>

              <entry>all</entry>
            </row>

            <row>
              <entry><filename>simple_nets</filename></entry>

              <entry>some simple scenarios</entry>

              <entry>all</entry>
            </row>

            <row>
              <entry><filename>traffic_lights</filename></entry>

              <entry>traffic light algorithms</entry>

              <entry><application>SUMO</application>/<application>GUISIM</application></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <sect2 id="user_apb-included_examples-simple_nets">
        <title>SIMPLE_NETS: Basic Examples</title>

        <para>Some smaller networks, mainly for testing purposes may be found
        within the
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples</filename>
        - folder. In respect to their shape, they are named
        <filename>"eight..."</filename>, <filename>"cross..."</filename> and
        <filename>"box..."</filename>. They differ in the number of lanes the
        edges have and whether a possibly existing junction is a simple
        right-of-way or a traffic light junction. The name pattern is as
        follows <replaceable>&lt;SHAPE&gt;</replaceable><varname>X</varname>l
        for networks with right-of-way junctions, where <varname>X</varname>
        is the number of lanes and
        <replaceable>&lt;SHAPE&gt;</replaceable><varname>X</varname>ltl for
        networks with a traffic light.
        <replaceable>&lt;SHAPE&gt;</replaceable> is the name of the coarse
        shape of the network.</para>
      </sect2>

      <sect2 id="user_apb-included_examples-netbuild">
        <title>NETBUILD: Examples for NETCONVERT'S XML-Import</title>

        <para>These examples may be found in the folder
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding</filename>.
        They shall show how networks may be imported/defined using the
        <application>NETCONVERT</application> application.</para>

        <sect3 id="user_apb-included_examples-netbuild-types">
          <title>"types": Using Type Definitions to describe edges</title>

          <para>Both of these two examples describe the same network (a simple
          cross), but "cross_notypes" describes each edge while
          "cross_usingtypes" uses types.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding/types</filename></para>
        </sect3>

        <sect3 id="user_apb-included_examples-netbuild-kmh_speed">
          <title>"speed_in_kmh": Defining Edges' Speed Limits in km/h</title>

          <para>Both of these two examples describe the same network (a simple
          cross) as the settings in
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding/types</filename>,
          but the speed is given in km/h, both within edge definitions
          (cross_notypes_kmh) and within the version using types
          (cross_usingtypes_kmh).</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding/speed_in_kmh</filename></para>
        </sect3>

        <sect3 id="user_apb-included_examples-netbuild-shapes">
          <title>"shapes": Defining the Shapes of Edges</title>

          <para>One can pass an additional parameter to edges to describe a
          more complex shape. This example is one for using this
          attribute.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/netbuilding/shapes/hokkaido-japan</filename></para>
        </sect3>
      </sect2>

      <sect2 id="user_apb-included_examples-router">
        <title>ROUTER: Examples for DUAROUTER and JTRROUTER</title>

        <para>These examples may be found in the folder
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router</filename>.
        They shall show how trips and flows may be used to define
        vehicles.</para>

        <sect3 id="user_apb-included_examples-routes-same1">
          <title>"trips2routes", "trips2routes_repetition", "flows2routes":
          Different Definition Types for the Same</title>

          <para>All these three examples generate 100 vehicles which all have
          the same route. In "trips2routes" each vehicle has an own route.
          They all are the same, only the vehicles' ids differ.
          "trips2routes_repetition" generates one vehicle but which is
          duplicated within the simulation 100 times. "flows2routes" generates
          100 vehicles and routes using a flow definition. The vehicles differ
          from those generated by "trips2routes" only by their ids.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router</filename></para>
        </sect3>

        <sect3 id="user_apb-included_examples-router-intervals">
          <title>"flows2routes" vs.
          "flows2routes_<replaceable>X</replaceable>s_interval" vs.
          "flows2routes_<replaceable>X</replaceable>s_interval_ext": Spreading
          vehicles over an interval</title>

          <para>These examples show the usage of the interval length in flows.
          While in "flows2routes" all vehicles are emitted at the same time,
          in "flows2routes_100s_interval" the departure times are spread over
          100s and in "flows2routes_200s_interval" over 200s. The example
          ending with "_ext" show how the interval may be defined using an
          enclosing element.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/router</filename></para>
        </sect3>
      </sect2>

      <sect2 id="user_apb-included_examples-extended">
        <title>EXTENDED: Examples for using additional SUMO-structures</title>

        <para>These examples may be found in the folder
        <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended</filename>.
        They show how simulations may be equipped with additional structures
        such as variable speed signs, bus routes etc..</para>

        <sect3 id="user_apb-included_examples-extended-bus_stops">
          <title>"busses1" vs. "3busses1": Examples for Bus Stops</title>

          <para>"busses1" shows how bus stops are defined and a bus is forced
          to stop at these. "3busses1" is almost the same, but three busses
          are moving around. "3busses1" shows also that the length of bus
          stops determines how many busses may stop here.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended</filename></para>
        </sect3>

        <sect3 id="user_apb-included_examples-extended-vehicle_stops">
          <title>"vehicle_stops": Defining Stop Positions for Vehicles</title>

          <para>"vehicle_stops" shows how a vehicle can be forced to stop at a
          certain postion.</para>

          <para><emphasis>Location:</emphasis>
          <filename><replaceable>&lt;SUMO_DIST&gt;</replaceable>/data/examples/extended</filename></para>
        </sect3>
      </sect2>
    </sect1>
  </appendix>
</book>
