<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN"[
<!entity sumo "<emphasis>SUMO</emphasis>">
<!entity sumo-netconvert "<emphasis>sumo-netconvert</emphasis>">
<!ENTITY index SYSTEM "sumo-userdocs-0.7.sgml">

<!ENTITY document-name "SUMO User Documentation">
<!ENTITY document-version "0.7">
<!ENTITY referred-program-version "0.7">

<!entity % ISOgrk1 PUBLIC "ISO 8879:1986//ENTITIES Greek Letters//EN">
%ISOgrk1;
]>


<book>
  <bookinfo>
	<title>&document-name;</title>
	<authorgroup>
	  <author>
		<firstname>Daniel</firstname>
		<surname>Krajzewicz</surname>
	  </author>
	  <author>
		<firstname>Christian</firstname>
		<surname>R&ouml;ssel</surname>
	  </author>
	  <author>
		<firstname>Georg</firstname>
		<surname>Hertkorn</surname>
	  </author>
	</authorgroup>
	<edition>&document-version;</edition>

   <pubdate role="cvs">$Date$</pubdate>

    <copyright>
      <year>2002</year>
      <holder>German Aerospace Centre</holder>
      <holder>Center for Applied Computer Science, University of
      Cologne</holder>
    </copyright>

    <legalnotice>
      <title>Copyright</title>
      <para>Permission is granted to copy,
      distribute and/or modify this document under the terms of the
      Open Publication License, version 2.0.</para>
    </legalnotice>

    <releaseinfo>This is an <emphasis>alpha</emphasis> version of this
    manual. It refers to <emphasis>SUMO</emphasis> version
    0.7.</releaseinfo>

    <!--
    $Log$
    Revision 1.1  2003/02/07 10:25:28  dkrajzew
    v0.7-documentation added

    Revision 1.12  2002/09/02 09:22:14  dkrajzew
    changes made by Georg Hertkorn on 15.07.2002 applied

    Revision 1.10  2002/07/11 08:20:13  dkrajzew
    The description of the usage under MSVC++ has been improved

    Revision 1.9  2002/07/08 11:57:23  dkrajzew
    intra-document references added

    Revision 1.8  2002/07/08 10:44:11  dkrajzew
    Some spelling mistakes removed; Cross-links added

    Revision 1.7  2002/06/20 10:57:39  dkrajzew
    windows-eols removed

    Revision 1.6  2002/06/06 05:23:08  dkrajzew
    some spelling mistakes corrected

    Revision 1.5  2002/04/29 14:58:50  dkrajzew
    some spelling mistakes removed

    Revision 1.4  2002/04/25 15:00:48  croessel
    CVS-log comment-tags changed.

    Revision 1.3  2002/04/25 14:48:11  croessel
    Syntax errors fixed.
    -->
    <revhistory>
      <revision>
        <revnumber></revnumber>
        <date></date>
      </revision>
    </revhistory>

  </bookinfo>

  <!-- ---------------------------------------------------- -->

  <chapter id="DocumentDescription">
	<title>Document Description</title>
	<sect1 id="DocumentDescription.DocumentDomain">
	  <title>Document Domain</title>
	  <para>This document is a part of the documentation of &sumo; - a microscopic, multimodal and continuous traffic simulation.</para>
	</sect1>
	<sect1 id="DocumentDescription.DocumentPurpose">
	  <title>Document Purpose</title>
	  <para>This document describes how to use the &sumo; - simulation module, &sumo;.</para>
	</sect1>
	<sect1 id="DocumentDescription.DocumentStatus">
	  <title>Document Status</title>
	  <sect2 id="DocumentDescription.DocumentStatus.DocumentVersion">
		<title>Document Version</title>
		<para>This is the version &document-version; of the document.</para>
		<para>It is assigned to the &sumo; - version &referred-program-version;.</para>
	  </sect2>
	  <sect2 id="DocumentDescription.DocumentStatus.ToDo">
		<title>To Do</title>
		<para>
          <orderedlist>
			<listitem><para>Describe the Krau&szlig; model more exactly</para></listitem>
		  </orderedlist>
        </para>
	  </sect2>
	</sect1>
  </chapter>

  <!-- ---------------------------------------------------- -->

  <chapter id="Introduction">
	<title>Introduction</title>
	<sect1 id="Introduction.WhatIs">
	  <title>What is &sumo;?</title>
	  <para>&sumo is a traffic simulation tool. It was primarily designed for urban street networks, but it may also be used for highway traffic simulations. In the near future it will be extended to model transit modes simultaneously with ordinary car traffic. </para>
	  <para>&sumo is a microscopic model: the basic elements of the simulation are single vehicles which are provided with information about the movement of surrounding vehicles. They use this information to accelerate or to slow down on their way through the network. The velocity and the position of the vehicles is updated in discrete time steps. Usually we use 1s as the (virtual) update interval.</para>
	  <para>We think that one of the benefits of an open source traffic simulation framework is that every developer is free to implement her or his own car following model. A default model is implemented (see <xref linkend="Introduction.UsedModels">).</para>
	  <para>Especially in urban networks junctions are of major importance, because travel times depend strongly on their capacity. &sumo can handle two standard junction types. If all streets that meet at a junction belong to the same class, the rule of 'rechts vor links' is applied. Otherwise one of the directions has the right of way. Traffic light controls are currently implemented.</para>
<!-- bekommt jemand raus, wie man griechische Buchstaben nutzt? -->
<!-- Sieht so aus, als sei das mit HTML recht hoffnungslos, in RTF taucht -->
<!-- tatsächlich ein tau auf -->
	</sect1>

	<sect1 id="Introduction.Features">
	  <title>Features</title>
	  <para>In version &referred-program-version; &sumo; supports:
        <itemizedlist>
		  <listitem><para>high portability by usage of standardised methods only</para></listitem>
		  <listitem><para>collision free vehicle movement</para></listitem>
		  <listitem><para>different vehicle types</para></listitem>
		  <listitem><para>multi-lanes streets with lane changing</para></listitem>
		  <listitem><para>junction-based right-of-way rules (right before left - junctions and junctions with streets having equal / different priorities)</para></listitem>
		  <listitem><para>lane-to-lane connections</para></listitem>
		  <listitem><para>a XML-raw-output containing information about the state of the net for every time step</para></listitem>
		  <listitem><para>detectors with independent GnuPlot or CVS - output</para></listitem>
		  <listitem><para>divided input from xml-files</para></listitem>
        </itemizedlist>
      </para>
	</sect1>

	<sect1 id="Introduction.UsedModels">
	  <title>Used Models</title>
	  <para>The car following model was developed by Stefan Krau&szlig;<!-- Referenz --> in his PhD thesis. It uses four parameters: acceleration, deceleration, maximum velocity, typical reaction time.</para>
	</sect1>
  </chapter>

  <!-- ---------------------------------------------------- -->

  <chapter id="Prerequisites">
	<title>Prerequisites</title>
	<sect1 id="Prerequisites.NeededPackages">
	  <title>Needed Packages</title>
	  <para>In addition to the &sumo;-distribution you will need the Xerces-XML-parser library available at <ulink url="http://xml.apache.org/xerces-c/index.html"><citetitle>http://xml.apache.org/xerces-c/index.html</citetitle></ulink><!-- Referenz -->. Please note you have to obtain the C++-version of the library which must also fit to your system.</para>
	  <para>When building own networks, you will probably also need the &sumo-netconvert; - programme which should be available from the same location as &sumo;.</para>
	</sect1>

	<sect1 id="Prerequisites.Installation">
	  <title>Installation</title>
	  <sect2 id="Prerequisites.Installation.Distribution">
		<title>Distribution</title>
		<para>You get the sources as a tar ball <filename>(*.tar.gz)</filename> or a zip-archive <filename>(*.zip)</filename> from <ulink url="http://sumo.sourceforge.net/download.html"><citetitle>http://sumo.sourceforge.net/download.html</citetitle></ulink>. We try to provide portable sources. The following operation system/compiler/STL combinations have been tested:
        <segmentedlist>
		  <segtitle>OS</segtitle>
		  <segtitle>Compiler</segtitle>
		  <segtitle>STL</segtitle>
		  <seglistitem>
			<seg>Linux</seg>
			<seg>gcc-2.95.2</seg>
			<seg>built-in</seg>
		  </seglistitem>
		  <seglistitem>
			<seg>SunOS 5.7</seg>
			<seg>gcc-2.95.2</seg>
			<seg>STLport</seg>
                  </seglistitem>
		  <seglistitem>
			<seg>Windows</seg>
			<seg>MSVC++ 6.0 with ServicePack 5</seg>
			<seg>built-in</seg>
		  </seglistitem>
		</segmentedlist>
		</para>
	  </sect2>

	  <sect2 id="Prerequisites.Installation.Building">
		<title>Building &sumo; from Sources</title>
		<sect3 id="Prerequisites.Installation.Building.LinuxUnix">
		  <title>Linux/Unix</title>
		  <para>Unpack the tarball
<programlisting>
gunzip sumo-&referred-program-version;.tar.gz
tar xvf sumo-&referred-program-version;.tar
</programlisting>
Run configure and build the binaries.
<programlisting>
cd sumo-&referred-program-version;
./configure --prefix=where-the-binaries-go \
   --with-xerces-includes=path-to-xerces-header-files
   --with-xerces-libraries=path-to-xerces-libraries
make
make install
</programlisting>
<!-- Wo findet man die Standardbeschreibung für die Verwendung -->
<!-- von configure? -->
          </para>
		</sect3>

		<sect3 id="Prerequisites.Installation.Building.Windows">
		  <title>Windows/<productname>MSVC++</productname></title>
		  <para>
Open a new console application project and migrate all supplied sources but the files SUMO/utils/TplConvert.cpp and SUMO/utils/TplConvertSec.cpp. Regard that you have to import source code files from the subfolders SUMO-NETCONVERT/netbuild and SUMO-NETCONVERT/utils, too.
Add the xerces.lib to the project. Go to
		    <menuchoice>
			  <guimenu>Project</guimenu>
			  <guimenuitem>Preferences</guimenuitem>
			  <guimenuitem>C/C++</guimenuitem>
			  <guimenuitem>Preprocessor</guimenuitem>
			</menuchoice> from the <productname>MSVC++</productname>
Menu. And add the include-path of your Xerces-library to the list of "Additional Include Paths".
          </para>
		  <para>Switch now to the <guimenuitem>C/C++ Programming Language</guimenuitem> settings panel which may be found under the combo box that displays "<guimenuitem>Preprocessor</guimenuitem>". Enable the RTTI and the Exception Handling.</para>
		  <para>You may also switch the warnings off as most of them do concern the <productname>MSVC++'s</productname> ability to display variables and not the code.</para>
		  <para>Within the <guimenuitem>General</guimenuitem>-tab select the option "use MFC in a shared library" if you want to compile the program in the DEBUG-mode</para>
		  <para>Press F7 to compile the program. That's all.</para>
		</sect3>
	  </sect2>
	</sect1>
  </chapter>

  <!-- ---------------------------------------------------- -->

  <chapter id="Usage">
	<title>Usage</title>

	<sect1 id="Usage.Basics">
	  <title>Basics of the Usage</title>
	  <sect2 id="Usage.Basics.CommandLineOptions">
		<title>Command Line Options</title>
		<para>After building your &sumo;-executable, you may run one of the examples. &sumo; is a command line application and you have to pass options and settings like the definitions of the input and the output files as command line parameters. These may be supplied to the programme in any order.</para>
	  </sect2>

	  <sect2 id="Usage.Basics.Configuration">
		<title>Configuration</title>
		<para>Another way to specify the settings is the generation of a configuration file. All settings you can pass at the command line may be written to this file and the programme may so be started using only one parameter. This approach may be more convenient when working with a single network many times. All but the boolean settings of the configuration file may be overridden at the command line by using arguments.</para>
	  </sect2>
	</sect1>

	<sect1 id="Usage.Quickstart">
	  <title>Quickstart</title>
	  <para>To run a simulation at least the following inputs are necessary:
		<variablelist>
		  <varlistentry>
			<term><varname>Netfile</varname></term>
			<listitem>
			  <para>A file containing the network the simulation shall take place on</para>
			</listitem>
		  </varlistentry>
		  <varlistentry>
			<term><varname>Starting time</varname></term>
			<listitem>
			  <para>The simulation time the simulation shall start at.</para>
			</listitem>
		  </varlistentry>
		  <varlistentry>
			<term><varname>End time</varname></term>
			<listitem>
			  <para>The simulation time the simulation shall stop at.</para>
			</listitem>
		  </varlistentry>
		</variablelist>
Supplying only these three parameter would cause &sumo; to write the state of the net at each time step to stdout. This output type is called "raw" output and although being complete and well-ordered XML, it is not very readable. You may prohibit it using the -R (--no-raw-output) - option or redirect it into a file using -o FILE option where FILE is the filename you want to save the output under.</para>
	  <para>You will find a deeper description of the parameters in the next chapter and <xref linkend="CommandLineOptions"> contains their complete list.</para>
	</sect1>

	<sect1 id="Usage.Quickstart.ParameterInDepth">
	  <title>Parameters In-depth</title>

	  <sect2 id="Usage.Quickstart.ParameterInDepth.SimulationTimesSpecifications">
		<title>Simulation Times Specifications</title>
		<para>&sumo; must know the times the simulation shall start and end at. These times are of course simulation-internal and should be in accordance with the departure times of the vehicles and the duration of their movements. An example: if you want to simulate a single day, your vehicles will probably leave from 0.00 (ignoring the traffic from the last night) and stop at 23.59. As the simulation's time scale is 1s, this means that vehicles leaving at 0.00 should have the depart time 0 and for instance those leaving to work at 7.00 should have the depart time 60s*60min*7h = 25200. The beginning of the simulation will be 0 and the end of the simulation will be 60s*60min*24h = 86400.</para>
		<para>The following command line parameters are used to specify the beginning and the end of the simulation:
		<variablelist>
		  <varlistentry>
			<term><varname>-b (--begin)</varname></term>
			<listitem><para>The starting time of the simulation</para></listitem>
		  </varlistentry>
		  <varlistentry>
			<term><varname>-e (--end)</varname></term>
			<listitem><para>The ending time of the simulation</para></listitem>
		  </varlistentry>
		</variablelist>
At the moment, the simulation can not be interrupted.
</para>
	  </sect2>

	  <sect2 id="Usage.Quickstart.ParameterInDepth.InputFiles">
		<title>Input Files</title>
		<sect3 id="Usage.Quickstart.ParameterInDepth.InputFiles.InputFileTypes">
		  <title>Input File Types</title>
		  <para>You will now find an introduction into the different input file types and their usage. Their formats will be described in later.</para>
		  <para>To allow easy modifications of the simulation settings but also the distribution of a single file, the input may but don't has to be divided into files of different type. We distinguish four types of simulation description: net, junction logics, routes and vehicles and detectors. Please note that you don't have to use all of these files. You may also join their contents when working on a certain project.</para>
		  <para>The net is the description of the street network consisting of the definitions of the streets themselves being the definitions of the lanes they are build of, the connections between the streets which describe which lane a vehicle has to take to reach a certain following edge, the information whether a vehicle on a certain lane has to slow down when approaching the next junction due to possible traffic with a higher priority and the net also holds the descriptions of the junctions build up from a list of incoming edges and a key to the logic.</para>
		  <para>This key is used to lookup a junction logic that realizes the priority assignment to the approaching vehicles. The junction logics may are divided in junctions where all streets have the same priority and junctions where a certain road has a higher priority. The extraction of these data from the network file was motivated by the wish to do research on different traffic light strategies. In this case, the network file does not have to be changed, but may be reused while only the logic files changes.</para>
		  <para>As we are also doing research on mobility, the routes will change very often. Due to this, we allow the extraction of the dynamic parts of the simulation into a second file. This shall contain the routes the vehicles will take and the vehicles themselves. Vehicle types are supposed to be inserted into this file, too, but there is no logical reason not to incorporate them into the original network file as long as they are supported.</para>
		  <para>The fourth input file type is the definition of detectors. Being not really a part of the net, detectors allow to measure traffic variables known from the traffic research like the flow or the average speed and write them into a file. This output may be formatted as CSV- or GnuPlot-readable files.</para>
		</sect3>

		<sect3 id="Usage.Quickstart.ParameterInDepth.InputFiles.MergingInputFiles">
		  <title>Merging Input Files</title>
		  <para>You have to supply the name of the input files to use at the command line. You may join several files of the same type using the semicolon as separator. If you have, for instance two maps of the city of Berlin, a very coarse one and a very fine one and if you want to use both, you may supply both names and do not need to merge the files before:<programlisting>sumo -n berlin_coarse.xml;berlin_fine.xml</programlisting></para>
		</sect3>

		<sect3 id="Usage.Quickstart.ParameterInDepth.InputFiles.CommandLineOptions">
		  <title>Command Line Options for Input Description</title>
		  <para>
		    <variablelist>
		      <varlistentry>
			    <term><varname>-n (--net-files) FILE[;FILE]+</varname></term>
			    <listitem><para>The name(s) of the file(s) containing the (static) network</para></listitem>
		      </varlistentry>
		      <varlistentry>
			    <term><varname>-j (--junction-files) FILE[;FILE]+</varname></term>
			    <listitem><para>The name(s) of the file(s) containing the junction logics</para></listitem>
		      </varlistentry>
		      <varlistentry>
			    <term><varname>-r (--route-files) FILE[;FILE]+</varname></term>
			    <listitem><para>The name(s) of the file(s) containing the definitions of vehicles together with their routes</para></listitem>
		      </varlistentry>
		      <varlistentry>
			    <term><varname>-d (--detector-files) FILE[;FILE]+</varname></term>
				 <listitem><para>The name(s) of the file(s) containing the definitions of the detectors</para></listitem>
			   </varlistentry>
			 </variablelist>
	     </para>
		</sect3>
	   </sect2>

	   <sect2 id="Usage.Quickstart.ParameterInDepth.OutputFiles">
		 <title>Output Files</title>
		 <para>The number of possible output files is not as big as the number of input files. As a default, the simulation will produce XML-output of the simulation that contains all streets with all lanes and all vehicles driving on them for each time step and print it to stdout. This output is likely to become very large. You may suppress it using the option '-R' (--no-raw-output) but you may also redirect it into a file using '-o FILENAME' (--output FILENAME). You will be informed when the file cannot be created.</para>
		 <para>To supply an output that is easier to evaluate, you may use detectors. They are specified in a file and may be supplied on the command line as described above. Their format will be described later.</para>
		 <sect3 id="Usage.Quickstart.ParameterInDepth.OutputFiles.CommandLineOptions">
		   <title>Command Line Options for Output Description</title>
		   <para>
			 <variablelist>
			   <varlistentry>
				 <term><varname>-R (--no-raw-output)</varname></term>
				 <listitem><para>No raw output will be generated.</para></listitem>
			   </varlistentry>
			   <varlistentry>
				 <term><varname>-o (--output-file) FILE</varname></term>
				 <listitem><para>The raw output will be written to the named file.</para></listitem>
			   </varlistentry>
			</variablelist>
		  </para>
		</sect3>
	  </sect2>

	  <sect2 id="Usage.Quickstart.ParameterInDepth.Configuration">
		<title>Configuration</title>
		<para>The configuration file allows you to merge all parameter that you had to supply explicitly into a single parameter. After generating a configuration file (see the format section for a description of the format) you may pass it to the application using the following option. As said before, you may overwrite the settings from your configuration on the command line.</para>

		<sect3 id="Usage.Quickstart.ParameterInDepth.Configuration.CommandLineOptions">
		  <title>Command Line Options for Configuration</title>
		  <para>
			 <variablelist>
			  <varlistentry>
				<term><varname>-c (--configuration) FILE</varname></term>
				<listitem><para>Load the parameter from the configuration.</para></listitem>
			  </varlistentry>
			</variablelist>
		  </para>
		</sect3>
	  </sect2>

	  <sect2 id="Usage.Quickstart.ParameterInDepth.Further">
		<title>Further Processing Options</title>
		<para>When running the application, you may also force it do run verbosely, printing the current status. You may also let you print the options set. This may be needful when working with configuration files and command line options where parameter usage may be misinterpreted or confusing. The last processing option is used to print a help screen which contains all possible parameter.</para>
		<sect3 id="Usage.Quickstart.ParameterInDepth.Further.CommandLineProcessingOptions">
		  <title>Command Line Processing Options</title>
		  <variablelist>
			<varlistentry>
			  <term><varname>-v (--verbose)</varname></term>
			  <listitem><para>The simulation will print the current action on the screen.</para></listitem>
			</varlistentry>
			<varlistentry>
			  <term><varname>-p (--print-options)</varname></term>
			  <listitem><para>The set options are printed before the processing starts.</para></listitem>
			</varlistentry>
			<varlistentry>
			  <term><varname>--help</varname></term>
			  <listitem><para>The list of possible parameter together with their meanings is printed</para></listitem>
			</varlistentry>
		  </variablelist>
		</sect3>
	  </sect2>
	</sect1>


	<sect1 id="Usage.ExampleSessions">
	  <title>Example Sessions</title>
	  <sect2 id="Usage.ExampleSessions.Example1">
		<title>Example1: eight</title>
		<para></para>
	  </sect2>
	</sect1>


  </chapter>

  <!-- ---------------------------------------------------- -->

  <chapter id="FileFormats">
	<title>File Formats</title>
	<sect1 id="FileFormats.NetDescription">
	  <title>Net Description</title>
	  <para>The network file is a complicated XML-file with information about each street and each junction. We propose not to bother you with most of it's contents unless you want to debug &sumo-netconvert;. See the developer documentation for further information.</para>
	</sect1>

	<sect1 id="FileFormats.JunctionLogics">
	  <title>Junction Logics</title>
	  <para>At the moment, junction logics are also computed by &sumo-netconvert;. You may take a look at the documentation of this tool but the junction logics are not meant to be edited by users.</para>
	</sect1>

	<sect1 id="FileFormats.VehicleDescriptions">
	  <title>Vehicle Descriptions</title>
	  <para>The route file contains three different types of data:
        <orderedlist numeration="lowerroman">
		  <listitem>
			<para>Vehicles</para>
			<para>The entry for a vehicle looks like this:
<programlisting>
	<sgmltag class="emptytag">vehicle type="[TYPE_ID]" id="[OWN_ID]" depart="[TIME]" route="[ROUTE_ID]"</sgmltag>
</programlisting>
			<variablelist>
				<varlistentry>
				  <term><varname>type</varname></term>
				  <listitem><para> The id of the vehicle type of the vehicle (don't forget to insert such a vehicle type into the routes file.)</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>id</varname></term>
				  <listitem><para>The id of the vehicle.</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>depart</varname></term>
				  <listitem><para>Time when the route starts given in seconds from the start of the simulation.</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>route</varname></term>
				  <listitem><para>The id of the route the vehicle will take.</para></listitem>
				</varlistentry>
			  </variablelist>
			</para>
		  </listitem>

		  <listitem>
			<para>Vehicle Types</para>
			<para>The vehicle types are defined in the following way:
<programlisting>
	<sgmltag class="emptytag">vtype id="[OWN_ID]" maxspeed="[NUM]" length="[NUM]" bmax="[NUM]" dmax="[NUM]" sigma="[NUM]"</sgmltag>
</programlisting>
			<variablelist>
				<varlistentry>
				  <term><varname>id</varname></term>
				  <listitem><para>The id of the vehicle type. This is the id that vehicles of this type must reference.</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>maxspeed</varname></term>
				  <listitem><para>The maximum velocity of the vehicle in m/s</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>length</varname></term>
				  <listitem><para>The length of the vehicle in m</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>bmax</varname></term>
				  <listitem><para>The maximum acceleration in m/s^2</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>dmax</varname></term>
				  <listitem><para>The maximum deceleration in m/s^2</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>sigma</varname></term>
				  <listitem><para>The driver's uncertainty (between 0 and 1)</para></listitem>
				</varlistentry>
			  </variablelist>
			</para>
		  </listitem>

		  <listitem>
			<para>Vehicle Types</para>
			<para>The vehicle types are defined in the following way:
<programlisting>
	<sgmltag class="starttag">route id="[OWN_ID]"</sgmltag>[EDGE_ID]+<sgmltag class="endtag">route</sgmltag>
</programlisting>
			  <variablelist>
				<varlistentry>
				  <term><varname>id</varname></term>
				  <listitem><para>The id of the route. This is the id that vehicles that want to use this rout must reference.</para></listitem>
				</varlistentry>
				<varlistentry>
				  <term><varname>EDGE_ID+</varname></term>
				  <listitem><para>A list of the ids of those edges that build up the route.</para></listitem>
				</varlistentry>
			  </variablelist>
			</para>
		  </listitem>
		</orderedlist>
	  </para>
	</sect1>

	<sect1 id="FileFormats.DetectorDescriptions">
	  <title>Detector Descriptions</title>
	  <para>The detector element has the following form:
<programlisting>
	<sgmltag class="emptytag">detector id="[OWN_ID]" type="InductLoop" lane="[LANE_ID]" pos="[NUM]" style="[GPLOT|CSV]" freq="[NUM]"</sgmltag>
</programlisting>
		<variablelist>
		  <varlistentry>
			<term><varname>id</varname></term>
			<listitem><para>The id of the detector.</para></listitem>
		  </varlistentry>
		  <varlistentry>
			<term><varname>type</varname></term>
			<listitem><para>The type of the detector. At the moment, &sumo; only knows induct loops, so no other types are possible.</para></listitem>
		  </varlistentry>
		  <varlistentry>
			<term><varname>lane</varname></term>
			<listitem><para>The id of the lane the detector shall be positioned at.</para></listitem>
		  </varlistentry>
		  <varlistentry>
			<term><varname>pos</varname></term>
			<listitem><para>The detector's position on the lane. Note that the position must be smaller than the length of the lane.</para></listitem>
		  </varlistentry>
		  <varlistentry>
			<term><varname>style</varname></term>
			<listitem><para>The output style of the detector. At the moment, we support Gnuplot where the data are written as tab-separated floats that may be read by Gnuplot and CSV - where data are separated by semicola and may be read by MS Excel, e.g.</para></listitem>
		  </varlistentry>
		  <varlistentry>
				  <term><varname>freq</varname></term>
			<listitem><para>The frequency or sampling interval of the detector. A numerical value measured in seconds.</para></listitem>
		  </varlistentry>
		</variablelist>
	  </para>
  	</sect1>

	<sect1 id="FileFormats.ConfigurationFile">
	  <title>Configuration File</title>
	  <para>The default configuration file looks like this:</para>
<!-- ----- -->
<programlisting>

<sgmltag class="starttag">configuration</sgmltag>
   <sgmltag class="starttag">files</sgmltag>
      <sgmltag class="starttag">net-file</sgmltag><sgmltag class="endtag">net-file</sgmltag>
      <sgmltag class="starttag">route-file</sgmltag><sgmltag class="endtag">route-file</sgmltag>
      <sgmltag class="starttag">junction-file</sgmltag><sgmltag class="endtag">junction-file</sgmltag>
      <sgmltag class="starttag">detector-file</sgmltag><sgmltag class="endtag">detector-file</sgmltag>
      <sgmltag class="starttag">output-file</sgmltag><sgmltag class="endtag">output-file</sgmltag>
      <sgmltag class="starttag">no-raw-output</sgmltag><sgmltag class="endtag">no-raw-output</sgmltag>
   <sgmltag class="endtag">files</sgmltag>

   <sgmltag class="starttag">simulation</sgmltag>
      <sgmltag class="starttag">begin</sgmltag><sgmltag class="endtag">begin</sgmltag>
      <sgmltag class="starttag">end</sgmltag><sgmltag class="endtag">end</sgmltag>
   <sgmltag class="endtag">simulation</sgmltag>

   <sgmltag class="starttag">reports</sgmltag>
      <sgmltag class="starttag">verbose</sgmltag><sgmltag class="endtag">verbose</sgmltag>
      <sgmltag class="starttag">print-options</sgmltag><sgmltag class="endtag">print-options</sgmltag>
   <sgmltag class="endtag">reports</sgmltag>

<sgmltag class="endtag">configuration</sgmltag>

</programlisting>
<!-- ----- -->
      <para>The elements of this file are equal to the options that may be given on the command line. By inserting filenames or durations between the opening and the ending tag that corresponds to the option you want to set, you save your settings in the configuration file. You may set bool values (verbose and print-options) by inserting a '1' into the field. Unset values are treated as if they would be not supplied at the command line. We advise you to copy the configuration file before editing it, to save it for further use.</para>
	  <para>Example: If you want to use always a special net where also the junctions and detectors do not change and which shall simulate a whole day, and want to change the routes on every run, you may generate the following configuration file:
<!-- ----- -->
<programlisting>

<sgmltag class="starttag">configuration</sgmltag>
   <sgmltag class="starttag">files</sgmltag>
      <sgmltag class="starttag">net-file</sgmltag>berlin_coarse.xml;berlin_fine.xml<sgmltag class="endtag">net-file</sgmltag>
      <sgmltag class="starttag">route-file</sgmltag><sgmltag class="endtag">route-file</sgmltag>
      <sgmltag class="starttag">junction-file</sgmltag>berlin_junctions.xml<sgmltag class="endtag">junction-file</sgmltag>
      <sgmltag class="starttag">detector-file</sgmltag>berlin_detectors1h.xml<sgmltag class="endtag">detector-file</sgmltag>
      <sgmltag class="starttag">output-file</sgmltag><sgmltag class="endtag">output-file</sgmltag>
      <sgmltag class="starttag">no-raw-output</sgmltag>1<sgmltag class="endtag">no-raw-output</sgmltag>
   <sgmltag class="endtag">files</sgmltag>

   <sgmltag class="starttag">simulation</sgmltag>
      <sgmltag class="starttag">begin</sgmltag>0<sgmltag class="endtag">begin</sgmltag>
      <sgmltag class="starttag">end</sgmltag>86400<sgmltag class="endtag">end</sgmltag>
   <sgmltag class="endtag">simulation</sgmltag>

   <sgmltag class="starttag">reports</sgmltag>
      <sgmltag class="starttag">verbose</sgmltag>1<sgmltag class="endtag">verbose</sgmltag>
      <sgmltag class="starttag">print-options</sgmltag><sgmltag class="endtag">print-options</sgmltag>
   <sgmltag class="endtag">reports</sgmltag>

<sgmltag class="endtag">configuration</sgmltag>

</programlisting>
<!-- ----- -->
With this configuration, saved as berlin_conf.xml, the simulation will also report what it does and will not generate a raw output file (we assume the file "berlin_detectors1h.xml" contains information of what output to generate). You now may start the simulation using:
<programlisting>
 sumo -c berlin_conf.xml -r berlin_routes02_04_11.xml
</programlisting>
Instead of
<programlisting>
 sumo -b 0 -e 86400 -n berlin_coarse.xml;berlin_fine.xml -r berlin_routes02_04_11.xml -j berlin_junctions.xml -d berlin_detectors1h.xml -R -v
</programlisting>
needed when not using a configuration file.
	</para></sect1>

	<sect1 id="FileFormats.DetectorOutput">
	  <title>Detector Output</title>
	  <para></para>
	</sect1>

	<sect1 id="FileFormats.RawOutput">
	  <title>Raw Output</title>
	  <para></para>
	</sect1>

  </chapter>

  <!-- ---------------------------------------------------- -->

  <bibliography>
	<title>Bibliography</title>

	<biblioentry>
	  <title>SUMO Internet pages</title>
	  <authorgroup>
		<author>
		  <firstname>Daniel</firstname>
		  <surname>Krajzewicz</surname>
		</author>
		<author>
		  <firstname>Georg</firstname>
		  <surname>Hertkorn</surname>
		</author>
	  </authorgroup>
	  <citetitle>SUMO-Internet</citetitle>
	</biblioentry>

	<biblioentry>
	  <title>SUMO v1.0 User Documentation - Module: Sumo</title>
	  <authorgroup>
		<author>
		  <firstname>Daniel</firstname>
		  <surname>Krajzewicz</surname>
		</author>
	  <author>
		<firstname>Christian</firstname>
		<surname>R&ouml;ssel</surname>
	  </author>
		<author>
		  <firstname>Georg</firstname>
		  <surname>Hertkorn</surname>
		</author>
	  </authorgroup>
	  <citetitle>SUMO-UserDocs</citetitle>
	</biblioentry>

	<biblioentry>
	  <title>SUMO v1.0 Developer Documentation - Module: Sumo</title>
	  <authorgroup>
		<author>
		  <firstname>Georg</firstname>
		  <surname>Hertkorn</surname>
		</author>
	  <author>
		<firstname>Christian</firstname>
		<surname>R&ouml;ssel</surname>
	  </author>
		<author>
		  <firstname>Daniel</firstname>
		  <surname>Krajzewicz</surname>
		</author>
	  </authorgroup>
	  <citetitle>SUMO-DevDocs</citetitle>
	</biblioentry>

	<biblioentry>
	  <title>SUMO v1.0 Class Description - Module: Sumo</title>
	  <author>
		<contrib>generated by Doxygen</contrib>
	  </author>
	</biblioentry>

	<biblioentry>
	  <title>SUMO v1.0 User Documentation - Module: Netconvert</title>
		<authorgroup>
		<author>
		  <firstname>Daniel</firstname>
		  <surname>Krajzewicz</surname>
		</author>
	  <author>
		<firstname>Christian</firstname>
		<surname>R&ouml;ssel</surname>
	  </author>
		<author>
		  <firstname>Georg</firstname>
		  <surname>Hertkorn</surname>
		</author>
		</authorgroup>
	  <citetitle>SUMO-ClassDocs</citetitle>
	</biblioentry>

	<biblioentry>
	  <title>SUMO v1.0 Developer Documentation - Module: Netconvert</title>
		<authorgroup>
		<author>
		  <firstname>Daniel</firstname>
			<surname>Krajzewicz</surname>
		</author>
	  <author>
		<firstname>Christian</firstname>
		<surname>R&ouml;ssel</surname>
	  </author>
		<author>
		  <firstname>Georg</firstname>
		  <surname>Hertkorn</surname>
		</author>
	  </authorgroup>
	  <citetitle>NETC-DevDocs</citetitle>
	</biblioentry>

	<biblioentry>
	  <title>SUMO v1.0 Class Descriptions - Module: Netconvert</title>
	  <author>
		  <contrib>generated by Doxygen</contrib>

	  </author>
	  <citetitle>NETC-ClassDocs</citetitle>
	</biblioentry>

	<biblioentry>
	  <title>Microscopic Modeling of Traffic Flow: Investigation of Collision Free Vehicle Dynamics</title>
	  <author>
		<firstname>Stefan</firstname>
		<surname>Krau&szlig;</surname>
	  </author>
	  <publisher>
		<publishername>DLR (Hauptabteilung Mobilität und Systemtechnik)</publishername>
	  </publisher>
		<date>1998</date>
	  <issn>ISSN 1434-8454</issn>
	  <citetitle>Krau&szlig;98</citetitle>
	</biblioentry>

	<biblioentry>
	  <title>Mikroskopische Minimalmodelle des Straßenverkehrs</title>
	  <author>
		<firstname>Stefan</firstname>
		  <surname>Janz</surname>
	  </author>
	  <bibliomisc>Diplom-thesis</bibliomisc>
	  <date>1998</date>
	  <citetitle>Janz98</citetitle>
	</biblioentry>

	  <biblioentry>
	  <title>Simulation-Based Traffic Assignment - Computing User Equilibria in Large Street Networks</title>
	  <author>
		<firstname>Christian</firstname>
		<surname>Gawron</surname>
	  </author>
		<bibliomisc>Dissertation</bibliomisc>
	  <date>1998</date>
	  <citetitle>Gawron98</citetitle>
	</biblioentry>

	<biblioentry>
	  <productname>Xerces</productname>
		<address><otheraddr><ulink url="http://xml.apache.org">Apache XML-project homepage</ulink></otheraddr></address>
	  <citetitle>Xerces</citetitle>
	</biblioentry>

	<biblioentry>
	  <productname>Doxygen</productname>
	  <address><otheraddr><ulink url="http://www.stack.nl/~dimitri/doxygen/">Doxygen homepage</ulink></otheraddr></address>
	  <citetitle>Doxygen</citetitle>
	</biblioentry>

	<biblioentry>
	  <title>Option parser Documentation</title>
	  <author>
		<firstname>Daniel</firstname>
		<surname>Krajzewicz</surname>
	  </author>
	  <citetitle>OptionsDocs</citetitle>
	</biblioentry>

  </bibliography>


  <!-- ---------------------------------------------------- -->

  <appendix id="FAQ">
	<title>FAQ : Frequently Asked Questions</title>
	<para>No one wanted to know anything yet</para>
  </appendix>

  <!-- ---------------------------------------------------- -->

  <appendix id="Comments">
	<title>Comments</title>
	<para></para>
  </appendix>

  <!-- ---------------------------------------------------- -->

  <appendix id="Bugs">
	<title>Bugs</title>
	<para></para>
  </appendix>

  <!-- ---------------------------------------------------- -->

  <appendix id="CommandLineOptions">
	<title>Command Line Options</title>
	<variablelist>
	  <varlistentry>
		<term><varname>-c (--configuration) FILE</varname></term>
		<listitem><para>Load the program parameter from FILE.</para></listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>-n (--net-files) FILE[;FILE]+</varname></term>
		<listitem><para>The name(s) of the file(s) containing the (static) network</para></listitem>
	  </varlistentry>
	  <varlistentry>
		<term><varname>-j (--junction-files) FILE[;FILE]+</varname></term>
		<listitem><para>The name(s) of the file(s) containing the junction logics</para></listitem>
	  </varlistentry>
	  <varlistentry>
		<term><varname>-r (--route-files) FILE[;FILE]+</varname></term>
		<listitem><para>The name(s) of the file(s) containing the definitions of vehicles and their routes</para></listitem>
	  </varlistentry>
	  <varlistentry>
		<term><varname>-d (--detector-files) FILE[;FILE]+</varname></term>
		<listitem><para>The name(s) of the file(s) containing the definitions of the detectors</para></listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>-o (--output-file) FILE</varname></term>
		<listitem><para>The raw output will be written FILE.</para></listitem>
	  </varlistentry>
	  <varlistentry>
		<term><varname>-R (--no-raw-output)</varname></term>
		<listitem><para>No raw output will be generated.</para></listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>-b (--begin)</varname></term>
		<listitem><para>The starting time of the simulation</para></listitem>
	  </varlistentry>
	  <varlistentry>
		<term><varname>-e (--end)</varname></term>
		<listitem><para>The end time of the simulation</para></listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>-C (--no-config)</varname></term>
		<listitem><para>No configuration file will be loaded, all parameter must be supplied at the command line.</para></listitem>
	  </varlistentry>
	  <varlistentry>
		<term><varname>-v (--verbose)</varname></term>
		<listitem><para>The simulation will print the current action to the standard output device.</para></listitem>
	  </varlistentry>
	  <varlistentry>
		<term><varname>-p (--print-options)</varname></term>
		<listitem><para>The current option settings are printed before the processing starts.</para></listitem>
	  </varlistentry>
	  <varlistentry>
		<term><varname>--help</varname></term>
		<listitem><para>The list of possible parameters together with their meanings is printed</para></listitem>
	  </varlistentry>
	</variablelist>
  </appendix>

  <!-- ---------------------------------------------------- -->

  <appendix>
	<title>Error Messages</title>
	<para>Here, only errors that should occur to normal users are reported. There are some other possible errors which should only occur when the network is corrupt what should not happened when it was generated by &sumo-netconvert;. As said before, we do not expect a normal user to build a network "by hand". If you are a developer and an error occurs that is not in the list below, refer to the developer documentation.</para>

	<variablelist>

	  <varlistentry>
		<term><varname>No option with the name '[NAME]' exists.</varname></term>
		<listitem>
		  <para>You are trying to set an option on the command line that is not known to sumo.</para>
		  <para>You may have misspelled an option. See Appendix A for a list of known options and their correct spelling.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>The option '[NAME]' is not a boolean attribute and requires an argument.</varname></term>
		<listitem>
		  <para>A non-boolean option was set, but no parameter was supplied. Example: you have typed "sumo -n", but the option "-n" needs an argument like "-n ./nodes.xml".</para>
		  <para>Always supply a parameter for parametrized options.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>A value for the option '[NAME]' was already set. Possible synonymes: [SYNONYMES]</varname></term>
		<listitem>
		  <para>You are setting an option twice. Example: you have typed "sumo -n [FILE1] --net [FILE2]". This is not allowed. A list of possible synonymes is displayed.</para>
		  <para>Set a value only once. When you are sure you have specified the value only once on the command line, your configuration file may contain two definitions for the value. However, a value may be defined as well in the configuration fine and on he command line.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>Error: The current parameter '[NAME1]' and the parameter '[NAME2]' do both need a value.</varname></term>
		<listitem>
		  <para>You are trying to use a single value for two parameters. Example: "sumo -nj [FILE1]" or "sumo -nj [FILE1] [FILE2]" is not allowed as the parameter may not be assigned to the network and the junctions at the same time. Only boolean options may be coupled with other options.</para>
		  <para>Split the options when using parametrized options.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>The configuration file '[NAME]' could not be found.</varname></term>
		<listitem>
		  <para>The name for the configuration file is not valid.</para>
		  <para>Even if you did not specify a configuration file, it is loaded as default. Use the option "-C" when you don't want to use a configuration file.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>Error: The named junctions folder '[NAME]' does not exist.</varname></term>
		<listitem>
		  <para>You have specified a folder for your junction logics that does not exist.</para>
		  <para>You have to use a valid folder for your junctions.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>Error: No simulation file (-n) specified.</varname></term>
		<listitem>
		  <para>You forgot to specify a file containing the road network to use. Attention! The file is not exmined to be valid, this error only occurs when the file is not given by the user. When it is not existing or invalid, other errors are produced.</para>
		  <para>You have to specify a network file using "-n [FILE]" where [FILE] is the name of the network file.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>Error: The begining of the simulation (-b) is not specified.</varname></term>
		<listitem>
		  <para>You forgot to specify the beginning of the simulation.</para>
		  <para>Use "-b [TIME]" to specify the time, when the simulation shall start. [TIME] is a numerical (integer) value.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>Error: The end of the simulation (-e) is not specified.</varname></term>
		<listitem>
		  <para>You forgot to specify the end of the simulation.</para>
		  <para>Use "-e [TIME]" to specify the simulation-time the simulation shall end at where [TIME] is a numerical value.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>Error: The output file '[NAME]' can not be build.</varname></term>
		<listitem>
		  <para>The output file can not be created. This may be due to trying to save the file into a folder that does not exist.</para>
		  <para>Use a valid name a file may be created under for your output. Check whether the folder you want to generate the file in exists.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>Error during XML-initialization: ...</varname></term>
		<listitem>
		  <para>An error while the initialisation of the XML-importer occured.</para>
		  <para>In fact, this is an error produced by XERCES. The only explanation we have is that you are using an inappropriate version of XERCES. Remember to use a C++ - XERCES version 1.5 or later.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>An XML-error occured: ...</varname></term>
		<listitem>
		  <para>Your document is corrupt so that our XML-parser XERCES is not able to parse it. This may happen when you forgot to open a tag before closing it or when using non-ascii characters. </para>
		  <para>This error always comes with a further explanation, so you may find the error quite easy. If you do not see any error, you have to look into a XML-description or try to load the document into A XML-development tool.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>"Empty route ([NAME])" or "The list belonging to the '[TYPE]' with the id '[NAME]' must not but is empty</varname>"</term>
		<listitem>
		  <para>You have specified an empty route. This is not valid.</para>
		  <para>Remove the route or insert at least one edge.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>The description of the object '[TYPE]' with the id '[NAME]' is not complete.</varname></term>
		<listitem>
		  <para>At least one of the needed values for an object is not given. The type of the object is given in [TYPE], it's name in [NAME]. In the case of an vehicle, this could be the type, the route or the departure time. The missing of the id is reported by another error message.</para>
		  <para>Check your file for missing values.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>The id of the object [TYPE] is missing in the description.</varname></term>
		<listitem>
		  <para>An object from your defintion which type is given in [TYPE] does not have an id (name).</para>
		  <para>Insert ids for all used objects.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>The object [TYPE] with the id [NAME] is not known</varname></term>
		<listitem>
		  <para>You have references an object of the type [TYPE] with the name [NAME] that you did not define in the file. Such an error may occur when you wish to use a vehicle of the type "VW Beetle" but have not defined a vehicle type named "VW Beetle".</para>
		  <para>Insert a definition for TYPE with the id NAME or use a given id in your file.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>Another [TYPE] with the id [NAME] exists</varname></term>
		<listitem>
		  <para>You are using an id twice for two objects of the same type. </para>
		  <para>All objects of a type have to have unique ids.</para>
		</listitem>
	  </varlistentry>

	  <varlistentry>
		<term><varname>The list belonging to the '[TYPE]' with the id '[NAME]' is empty</varname></term>
		<listitem>
		  <para>The information you have specified needs values which you do not have supplied.</para>
		  <para>Supply all needed information.</para>
		</listitem>
	  </varlistentry>

	</variablelist>

  </appendix>

  <!-- ---------------------------------------------------- -->

</book>
